{"version":3,"sources":["services/unsplashService.js","style/img/collage.jpg","style/img/colors.jpg","history.js","services/httpService.js","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/AddCard.jsx","cmps/CardLabels.jsx","cmps/DueBadge.jsx","cmps/MemberInitials.jsx","cmps/LabelEdit.jsx","cmps/AddLabel.jsx","cmps/LabelsEdit.jsx","cmps/MemberEdit.jsx","cmps/MembersEdit.jsx","cmps/DueDateEdit.jsx","cmps/CardMenu.jsx","cmps/CardPreview.jsx","cmps/PhasePreview.jsx","cmps/PhaseList.jsx","cmps/Activity.jsx","cmps/Activities.jsx","cmps/boardMenu/BoardMenu.jsx","cmps/boardMenu/ColorMenu.jsx","cmps/boardMenu/PhotoMenu.jsx","cmps/boardMenu/BackgroundMenu.jsx","cmps/CardHeader.jsx","cmps/CardDesc.jsx","cmps/ChecklistItem.jsx","cmps/CardChecklist.jsx","services/cloudinaryService.js","cmps/CardImage.jsx","cmps/Card.jsx","cmps/BoardUserFilter.jsx","pages/Board.jsx","pages/Home.jsx","services/userService.js","store/actions/userActions.js","pages/SignIn.jsx","pages/SignUp.jsx","cmps/MainNav.jsx","pages/Boards.jsx","pages/Dashboard.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/userReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["global","fetch","unsplash","Unsplash","accessKey","unsplashService","getListPhotos","perPage","page","_getRandomInt","photos","listPhotos","then","res","json","min","max","Math","ceil","floor","random","module","exports","history","createBrowserHistory","httpService","endpoint","data","ajax","a","method","axios","url","console","dir","response","push","OPERETIONS","TYPES","CARD","PHASE","Board","filter","boards","id","board","addboard","updateboard","makeId","length","txt","possible","i","charAt","socket","boardService","query","getById","remove","add","update","getBoardCopy","JSON","parse","stringify","getNewCard","partialCard","bgColor","desc","dueDate","createdAt","Date","now","labels","checkList","assignedTo","attachments","getNewPhase","name","cards","getSortedPhase","sortBy","phase","sort","card1","card2","title","localeCompare","addActivity","user","operation","type","object","activity","at","activities","unshift","createNewBoard","loggedInUser","creator","members","phaseLists","isLabelTxtShown","imgUrl","getNewLabel","color","socketService","setup","io","terminate","on","eventName","cb","off","emit","loadBoard","dispatch","updateBoard","updatedBoard","state","_id","setCard","card","_AddCard","handleChange","target","setState","value","onAddCard","ev","preventDefault","trim","boardCopy","props","phaseIdx","findIndex","phaseId","newCard","bottomCard","scrollIntoView","behavior","handleClick","addCardBtn","cardNameInput","form","dispatchEvent","Event","cancelable","toggleAddCardShown","this","isAddCardShown","addEventListener","submitOnEnter","window","removeEventListener","which","shiftKey","Fragment","className","onSubmit","required","autoFocus","autoComplete","onChange","spellCheck","ref","el","placeholder","onClick","Close","Component","mapDispatchToProps","AddCard","connect","trelloApp","trelloUser","_CardLabels","toggleIsLabelTxtShown","stopPropagation","getUpdatedLabels","reduce","acc","label","foundLabel","find","boardLabel","labelClassName","map","style","backgroundColor","key","CardLabels","DueBadge","displayDate","moment","format","isDueClose","AccessTime","fontSize","MemberInitials","firstLastName","initials","member","fullName","split","str","join","slice","img","toUpperCase","LabelEdit","toggleEditMode","isLabelOnCard","some","lbl","toggleLabelOnCard","Check","CreateOutlined","AddLabel","handleChangeColor","handleSubmit","addLabel","toggleIsAddLabelShown","Clear","_LabelsEdit","editLabel","isAddLabelShown","hideLabelsEdit","code","toggleProperty","prevState","saveLabel","editedLabel","cardId","cardIdx","partialLabel","labelToSave","removeLabel","updatedLabels","Add","LabelsEdit","MemberEdit","toggleMemberOnCard","isMemberOnCard","mmbr","_MembersEdit","hideMembersEdit","membersToDisplay","toLowerCase","includes","MembersEdit","DueDateEdit","hideDueDateEdit","handleDateChange","date","_d","getTime","handleSave","changeDueDate","removeDueDate","DateTimePicker","disablePast","views","minDateMessage","_CardMenu","isLabelEditShown","isMembersEditShown","isDueDateEditShown","hideMenu","toggleIsMenuShown","getPhaseIdxByCardId","onDelete","onChangeTitle","newDate","property","titleInput","cardMenu","block","inline","onMouseDown","cols","rows","LabelOutlined","PersonOutlineOutlined","DeleteForeverOutlined","CardMenu","_CardPreview","isMenuShown","pageX","pageY","checklistDoneCount","item","isDone","checklistBgc","checklistColor","draggableId","index","provided","snapshot","draggableProps","onContextMenu","dragHandleProps","innerRef","alt","src","AttachmentOutlined","CheckBoxOutlined","React","CardPreview","_PhasePreview","isInputShown","isSortShown","newPhaseName","toggleInputShown","hideInput","toggleMenuShown","showAddCard","toggleIsSortShown","sortListBy","sortedPhase","onDeletePhase","isDropAnimating","onBlur","MoreHoriz","droppableId","droppableProps","opacity","PhasePreview","_PhaseList","newListName","phaseListToShow","removeEventListeners","addEventListeners","listNameInput","submitBtn","onAddPhase","newPhase","listForm","onDragEnd","result","destination","source","newPhasesOrder","movingPhase","splice","srcPhase","dstPhase","movingCard","getFilteredPhaseLists","filteredByUser","prevProps","searchedName","cloneBoard","direction","PhaseList","_Activity","dynamicActivity","userElmemnt","elmentType","href","rel","OpenByObjectType","fromNow","allowOpenCard","boardClone","currPhase","onCloseMenu","Activity","_Activities","onEnterDown","handleSaveBoard","showCommentBox","ListOutlined","onKeyDown","Activities","BoardMenu","shownClass","boardBg","CloseOutlined","onToggleMenu","_ColorMenu","changeBoardColor","clonedBoard","ArrowBackIosOutlined","ColorMenu","_PhotoMenu","imgs","changeBoardImg","thumbUrl","urls","thumb","regularUrl","regular","fullUrl","full","credit","links","html","userName","PhotoMenu","BackgroundMenu","require","_CardHeader","onPhase","isTitleOnEdit","toggleInput","forEach","autoGrow","elTextarea","height","scrollHeight","backToboard","e","keyCode","blur","onFocus","handleKeyPress","autoCorrect","CardHeader","_CardDesc","CardDesc","ChecklistItem","idx","todo","checked","_CardChecklist","todoText","onAdd","progress","checklistTitle","progressBarUpdate","doneTodos","currVal","addTodo","newTodo","clone","updatedCards","phaseIndex","toggleAdd","field","cloneChkList","handleFocus","select","progressBgc","PlaylistAddCheck","width","CardChecklist","UPLOAD_URL","formData","FormData","append","files","post","error","cloudinaryService","uploadImg","uploadRawAttachment","CardImage","isImgLoading","removeImgUrl","loadingMsg","msg","secondaryColor","_Card","cardActivities","hideCard","getActivities","limit","addCheckList","cloneCard","removeMemberFromCard","onUploadImg","removeCard","PermIdentity","Schedule","htmlFor","CropOriginal","Card","BoardUserFilter","list","event","onInputChanged","_Board","boardMenus","currentOpend","menusState","mainMenu","backgroundMenu","colorMenu","photoMenu","boardName","openSocket","match","params","getBoardById","toggleMenu","menuName","clonedMenus","handleKeyDown","handleNameChange","handleChangeBoardName","nameBeforeChange","toggleTitleEdit","BOARD","AddUserToBoard","queryUsers","users","to","PieChartOutlined","MenuOutlined","_Home","Home","email","userCred","_handleLogin","sessionStorage","setItem","clear","updateuser","userService","signup","getUserCopy","getByEmail","login","logout","userCreds","setUser","addUser","_SignIn","loginCred","password","loginHandleChange","doLogin","err","log","noValidate","TextField","variant","fullWidth","Button","SignIn","userReducer","_SignUp","signupCred","signupHandleChange","doSignup","signupCreds","SignUp","_MainNav","isCreateBoardMenuShown","newBoardName","newBoardColor","boardColor","toggleAddBoard","newBoard","addBoard","HomeOutlined","DashboardOutlined","AccountTreeOutlined","addedBoard","MainNav","_Boards","handleLoadBoard","queryBoards","backgroundImage","backgroundSize","Boards","bgColors","hovColors","_Dashboard","getSprintProgress","getSprintProgressMap","checkListItem","Object","keys","datasets","values","hoverBackgroundColor","getTaskPerPhaseDistribution","phaseTaskMap","getTaskByLables","devTaskMap","goBack","tPerDevloper","getTasksPerDevloperData","taskPerPhaseDistribution","tasksByLabels","sprintProgress","options","scales","yAxes","ticks","beginAtZero","Dashboard","App","path","component","exact","Boolean","location","hostname","initialState","localLoggedinUser","rootReducer","combineReducers","action","boardId","logedInUser","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","utils","MomentUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2d167c56.chunk.js","sourcesContent":["import fetch from 'node-fetch';\r\nimport Unsplash from 'unsplash-js';\r\nglobal.fetch = fetch;\r\nconst unsplash = new Unsplash({ accessKey: \"8ZH8zzN8CDDrZJWGYhpPmzEreLvOZ6WRPVTgnEH_6Ac\" });\r\n\r\n\r\nfunction getListPhotos(perPage = 14) {\r\n    const page = _getRandomInt(1, 5)\r\n    return unsplash.photos.listPhotos(page, perPage, \"popular\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const unsplashService = {\r\n    getListPhotos\r\n}\r\nfunction _getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/collage.48948499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/colors.864f4df1.jpg\";","import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();\r\n","import { history } from '../history';\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.dir(err);\r\n        // if (err.response && err.response.status === 401) {\r\n        if (err.response) {\r\n            history.push('/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","import { httpService } from './httpService';\r\nexport const OPERETIONS = {\r\n    ADD: 'added',\r\n    UPDATE: 'updated',\r\n    DELETE: 'deleted'\r\n}\r\nexport const TYPES = {\r\n    CARD: 'a card',\r\n    PHASE: 'a phase',\r\n    Board: 'a board'\r\n}\r\n\r\n\r\n\r\nasync function query(filter) {\r\n    var queryString = '';\r\n    // if (filter) {\r\n    //     if (filter.inStock !== '') queryString = `?inStock=${filter.inStock}`;\r\n    //     if (filter.type !== '') (queryString === '') ? queryString = `?type=${filter.type}` : queryString += `&type=${filter.type}`;\r\n    //     if (filter.name !== '') (queryString === '') ? queryString = `?q=${filter.name}` : queryString += `&q=${filter.name}`;\r\n    // }\r\n    const boards = await httpService.get(`board/${queryString}`);\r\n    return boards;\r\n}\r\n\r\nasync function getById(id) {\r\n    const board = await httpService.get(`board/${id}`);\r\n    return board\r\n}\r\n\r\nasync function add(addboard) {\r\n\r\n    const board = await httpService.post(`board`, addboard);\r\n    return board;\r\n}\r\n\r\nasync function update(updateboard) {\r\n    const board = await httpService.put('board', updateboard);\r\n    return board;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`board/${id}`);\r\n}\r\n\r\nfunction getBoardCopy(board) {\r\n    return JSON.parse(JSON.stringify(board));\r\n}\r\n\r\nfunction getNewCard(partialCard) {\r\n    return {\r\n        ...partialCard,//this currently has only a title\r\n        id: makeId(),\r\n        bgColor: '',\r\n        desc: '',\r\n        dueDate: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        checkList: [],\r\n        assignedTo: [],\r\n        attachments: []\r\n    }\r\n}\r\n\r\nfunction getNewPhase(name) {\r\n    return {\r\n        id: makeId(),\r\n        name,\r\n        desc: '',\r\n        cards: []\r\n    }\r\n}\r\n\r\nfunction addActivity(board, user, operation, type, object, desc = null) {\r\n    const activity = {\r\n        at: Date.now(),\r\n        operation,\r\n        user,\r\n        type,\r\n        object,\r\n        desc\r\n    }\r\n    board.activities.unshift(activity);\r\n}\r\n\r\nfunction getSortedPhase(sortBy, phase) {\r\n    if (sortBy === 'title') {\r\n        return phase.cards.sort((card1, card2) => card1.title.localeCompare(card2.title))\r\n    } else if (sortBy === 'firstCreated') {\r\n        return phase.cards.sort((card1, card2) => card1.createdAt - card2.createdAt);\r\n    } else return phase.cards.sort((card1, card2) => card2.createdAt - card1.createdAt);\r\n}\r\n\r\nfunction createNewBoard(name, bgColor, loggedInUser) {\r\n    const _board = {\r\n\r\n        name: name,\r\n        bgColor: bgColor,\r\n        createdAt: Date.now(),\r\n        creator: loggedInUser,\r\n        members: [loggedInUser],\r\n        desc: null,\r\n        activities: [],\r\n        phaseLists: [],\r\n        labels: [],\r\n        isLabelTxtShown: false,\r\n        imgUrl: null\r\n    }\r\n    return _board;\r\n}\r\n\r\nfunction getNewLabel({ txt, color }) {\r\n    return {\r\n        txt,\r\n        color,\r\n        id: makeId(),\r\n    }\r\n} \r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    add,\r\n    update,\r\n    makeId,\r\n    getBoardCopy,\r\n    getNewCard,\r\n    getNewPhase,\r\n    getSortedPhase,\r\n    addActivity,\r\n    createNewBoard,\r\n    getNewLabel,\r\n    \r\n\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport const socketService = {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import { boardService } from '../../services/boardService'\r\nimport { socketService } from '../../services/socketService'\r\nexport const LOAD_BOARD = 'LOAD_BOARD';\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const ADD_BOARD = 'ADD_BOARD';\r\nexport const REMOVE_BOARD = 'REMOVE_BOARD';\r\nexport const QUERY_BOARDS = 'QUERY_BOARDS'\r\nexport const CREATE_BOARD = 'CREATE_BOARD';\r\n\r\nexport function queryBoards(filter) {\r\n    return dispatch => {\r\n        boardService.query(filter)\r\n            .then(boards => dispatch({ type: QUERY_BOARDS, boards }));\r\n    }\r\n}\r\n\r\nexport function loadBoard(id) {\r\n    return async dispatch => {\r\n        const board = await boardService.getById(id);\r\n        dispatch({ type: LOAD_BOARD, board });\r\n    }\r\n}\r\n\r\nexport function addBoard(addedBoard) {\r\n    return async dispatch => {\r\n        const board = await boardService.add(addedBoard);\r\n        dispatch({ type: ADD_BOARD, board })\r\n    }\r\n}\r\n\r\nexport function updateBoard(updatedBoard) {\r\n\r\n    return async (dispatch, state) => {\r\n        //const keepBoard = boardService.getBoardCopy(state.board); not working right now the state.board is undifined; wierd!!!\r\n        dispatch({ type: UPDATE_BOARD, board: updatedBoard });\r\n\r\n        try {\r\n            await boardService.update(updatedBoard);\r\n        } catch (err) {\r\n            // dispatch({ type: UPDATE_BOARD, board: keepBoard });\r\n        }\r\n\r\n        socketService.emit('board updated', updatedBoard._id);\r\n    }\r\n}\r\n\r\nexport function removeBoard(boardId) {\r\n    return dispatch => {\r\n        boardService.remove(boardId)\r\n            .then(() => dispatch({ type: REMOVE_BOARD, boardId }));\r\n    }\r\n}\r\n\r\nexport function setCard(card) {\r\n    return dispatch => {\r\n        dispatch({ type: 'SET_CARD', card });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\nexport class _AddCard extends Component {\r\n    state = {\r\n        card: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAddCardShown) {\r\n            this.cardNameInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n            window.addEventListener(\"mouseup\", this.handleClick);\r\n            this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n        else window.removeEventListener(\"mouseup\", this.handleClick);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } })\r\n    }\r\n\r\n    onAddCard = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.card.title.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === this.props.phaseId);\r\n        const newCard = boardService.getNewCard(this.state.card);\r\n        boardCopy.phaseLists[phaseIdx].cards.push(newCard);\r\n        boardService.addActivity(boardCopy, this.props.user, OPERETIONS.ADD, TYPES.CARD, { id: newCard.id, title: newCard.title });\r\n\r\n        await this.props.updateBoard(boardCopy);//async await is for the scroll\r\n        this.setState({ card: { title: '' } });\r\n        this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleClick = (ev) => {\r\n        if (ev.target !== this.addCardBtn &&//If user clicked add button or the input\r\n            ev.target !== this.cardNameInput) {\r\n            if (this.state.card.title) {//If there's input- add the card\r\n                this.addCardBtn.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            }\r\n            this.props.toggleAddCardShown();\r\n        }//This rather than onBlur because it gives the user\r\n        // the experience of clicking the button himself\r\n    }\r\n\r\n    render() {\r\n        const { handleChange, onAddCard, state } = this;\r\n        const { toggleAddCardShown, isAddCardShown } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isAddCardShown && <form className=\"add-card\" onSubmit={onAddCard}>\r\n                    <textarea className=\"card-name-input\" required autoFocus type=\"text\"\r\n                        name=\"title\" autoComplete=\"off\" onChange={handleChange} spellCheck=\"false\"\r\n                        ref={el => this.cardNameInput = el} value={state.card.title}\r\n                        placeholder=\"Enter a title for this card..\" />\r\n                    <div className=\"form-btns flex align-end\">\r\n                        <button ref={(el) => this.addCardBtn = el} className=\"submit-btn\"\r\n                            type=\"submit\">Add Card</button>\r\n                        <button className=\"close-btn\" onClick={toggleAddCardShown}><Close /></button>\r\n                    </div>\r\n                </form>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const AddCard = connect(mapStateToProps, mapDispatchToProps)(_AddCard)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\n\r\nexport class _CardLabels extends Component {\r\n\r\n    toggleIsLabelTxtShown = (ev) => {\r\n        ev.stopPropagation();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.isLabelTxtShown = !boardCopy.isLabelTxtShown;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsLabelTxtShown } = this;\r\n        const { isLabelTxtShown } = this.props.board;\r\n        const labels = this.getUpdatedLabels();\r\n        const labelClassName = isLabelTxtShown ? 'shown' : '';\r\n        return (\r\n            <div className=\"labels-container flex wrap\">\r\n\r\n                {labels.map(label => <span title={label.txt} className={`label ${labelClassName}`}\r\n                    style={{ backgroundColor: label.color }}\r\n                    onClick={toggleIsLabelTxtShown} key={label.id}>\r\n                    <span className=\"label-txt\">\r\n                        {isLabelTxtShown && label.txt}</span>\r\n                </span>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const CardLabels = connect(mapStateToProps, mapDispatchToProps)(_CardLabels)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { AccessTime } from '@material-ui/icons';\r\n\r\nexport const DueBadge = ({ dueDate }) => {\r\n\r\n    const displayDate = dueDate ? moment(dueDate).format(\"MMM Do\") : null;\r\n    const isDueClose = ((dueDate - Date.now()) < 86400000) ? true : false;\r\n    const isDuePassed = Date.now() > dueDate ? true : false;\r\n    const backgroundColor = isDuePassed ? '#eb5a46' : isDueClose ? '#f2d600' : '';\r\n    const color = !backgroundColor ? '#5e6c84' : '#fff';\r\n\r\n    return (\r\n        <div style={{ backgroundColor, color }}\r\n            className=\"card-due flex align-center\"> <span className=\"due-icon\">\r\n                <AccessTime fontSize=\"small\" /></span>{displayDate}</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function MemberInitials(props) {\r\n\r\n\r\n    var firstLastName;\r\n    if (props.member) {\r\n        firstLastName = props.member.fullName.split(' ');\r\n    } else {\r\n        firstLastName = props.fullName.split(' ');\r\n    }\r\n\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n    const { member } = props;\r\n    return (\r\n        <div title={firstLastName.join(' ')} className=\"member-avatar\">\r\n            {(!member || !member.img) && <span className='member-initial'>{initials.toUpperCase()}</span>}\r\n            {member && member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-initial-img\" ></span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n// className=\"member-img\"","import React from 'react';\r\nimport { CreateOutlined, Check } from '@material-ui/icons';\r\n\r\nexport function LabelEdit(props) {\r\n\r\n    const { label, toggleEditMode } = props;\r\n    const isLabelOnCard = props.card.labels.some(lbl => lbl.id === label.id);\r\n    return (\r\n        <div className=\"label-edit flex align-center\">\r\n            <span onClick={() => { props.toggleLabelOnCard(label) }}\r\n                className=\"grow flex align-center\" style={{ backgroundColor: label.color }}>\r\n                {label.txt}{isLabelOnCard && <Check className=\"icon\" />}\r\n            </span>\r\n            <button onClick={() => { toggleEditMode(label) }}>\r\n                <CreateOutlined className=\"icon\" /></button>\r\n        </div >\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport class AddLabel extends Component {\r\n\r\n    state = {\r\n        txt: '',\r\n        color: '#b3bac5'\r\n    }\r\n\r\n    handleChangeColor = ({ target }) => {\r\n        this.setState({ color: target.value });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ txt: target.value });\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        this.props.addLabel(this.state);\r\n    }\r\n\r\n    render() {\r\n        const { txt, color } = this.state;\r\n        return (\r\n            <section className=\"add-label\">\r\n                <div className=\"add-label-header flex align-center\">\r\n                    <p className=\"grow\">Add a label</p>\r\n                    <button onClick={this.props.toggleIsAddLabelShown}>\r\n                        <Clear /></button>\r\n                </div>\r\n                <div className=\"add-label-gallery\">\r\n                    <p>Select a color</p>\r\n                    <label className={\"#61bd4f\" === color ? \"color-preview c-61bd4f selected\" : \"color-preview c-61bd4f\"}  >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#61bd4f\" /></label>\r\n\r\n                    <label className={\"#f2d600\" === color ? \"color-preview f2d600 selected\" : \"color-preview f2d600\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#f2d600\" /></label>\r\n\r\n                    <label className={\"#ff9f1a\" === color ? \"color-preview ff9f1a selected\" : \"color-preview ff9f1a\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff9f1a\" /></label>\r\n\r\n                    <label className={\"#eb5a46\" === color ? \"color-preview eb5a46 selected\" : \"color-preview eb5a46\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#eb5a46\" /></label>\r\n\r\n                    <label className={\"#0079bf\" === color ? \"color-preview c-0079bf selected\" : \"color-preview c-0079bf\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#0079bf\" /></label>\r\n\r\n                    <label className={\"#00c2e0\" === color ? \"color-preview c-00c2e0 selected\" : \"color-preview c-00c2e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#00c2e0\" /></label>\r\n\r\n                    <label className={\"#ff78cb\" === color ? \"color-preview ff78cb selected\" : \"color-preview ff78cb\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff78cb\" /></label>\r\n\r\n                    <label className={\"#344563\" === color ? \"color-preview c-344563 selected\" : \"color-preview c-344563\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#344563\" /></label>\r\n\r\n                    <label className={\"#b3bac5\" === color ? \"color-preview b3bac5 selected\" : \"color-preview b3bac5\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#b3bac5\" /></label>\r\n\r\n                    <label className={\"#c377e0\" === color ? \"color-preview c377e0 selected\" : \"color-preview c377e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#c377e0\" /></label>\r\n                    <form onSubmit={(ev) => {\r\n                        ev.preventDefault();\r\n                        this.props.addLabel(this.state);\r\n                    }}>\r\n                        <input type=\"text\" name=\"txt\" value={txt} autoFocus\r\n                            placeholder=\"Enter label name..\" required\r\n                            autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                        <button className=\"save-btn\">Save</button>\r\n                    </form>\r\n                    <button className=\"cancel-btn\" onClick={this.props.toggleIsAddLabelShown}>\r\n                        Cancel</button>\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { Clear, Add } from '@material-ui/icons';\r\nimport { boardService } from '../services/boardService';\r\nimport { LabelEdit } from './LabelEdit';\r\nimport { AddLabel } from './AddLabel';\r\n\r\nclass _LabelsEdit extends Component {\r\n\r\n    state = {\r\n        editLabel: null,\r\n        isAddLabelShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    hideLabelsEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isLabelEditShown');\r\n    }\r\n\r\n    toggleEditMode = (editLabel) => {\r\n        this.setState({ editLabel });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({\r\n            editLabel: {\r\n                ...prevState.editLabel,\r\n                txt: target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    saveLabel = async (ev) => {\r\n        ev.preventDefault();\r\n        const editedLabel = this.state.editLabel;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n\r\n        boardCopy.labels = boardCopy.labels.map(label => {\r\n            if (label.id === editedLabel.id) return editedLabel;\r\n            return label;\r\n        })\r\n        await this.props.updateBoard(boardCopy);// The await might be neccessary when working with DB\r\n        this.toggleEditMode();\r\n    }\r\n\r\n    toggleLabelOnCard = (label) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card labels inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the card has the label or not and flip it\r\n        if (card.labels.some(lbl => lbl.id === label.id)) {\r\n            card.labels = card.labels.filter(lbl => lbl.id !== label.id);\r\n        } else {\r\n            card.labels.push(label);\r\n        }\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleIsAddLabelShown = () => {\r\n        this.setState(prevState => ({ isAddLabelShown: !prevState.isAddLabelShown }));\r\n    }\r\n\r\n    addLabel = (partialLabel) => {\r\n        const labelToSave = boardService.getNewLabel(partialLabel);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.labels.push(labelToSave);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsAddLabelShown();\r\n    }\r\n\r\n    removeLabel = (id) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = boardCopy.labels.filter(label => label.id !== id);\r\n        boardCopy.labels = updatedLabels;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleEditMode(null);\r\n    }\r\n\r\n    render() {\r\n        const { toggleEditMode, saveLabel, toggleLabelOnCard, removeLabel } = this;\r\n        const { editLabel, isAddLabelShown } = this.state;\r\n        const { labels } = this.props.board;\r\n        return (\r\n            <React.Fragment>\r\n                {!isAddLabelShown && <section className=\"edit-labels flex column\">\r\n                    <div className=\"edit-labels-header flex align-center\">\r\n                        <p className=\"grow\">Labels</p>\r\n                        <button onClick={() => { this.props.toggleProperty('isLabelEditShown') }}>\r\n                            <Clear /></button>\r\n                    </div>\r\n                    <div className=\"labels-gallery grow\">\r\n                        {!editLabel && labels.map(label => <LabelEdit toggleLabelOnCard={toggleLabelOnCard}\r\n                            card={this.props.card} saveLabel={saveLabel} key={label.id} label={label}\r\n                            toggleEditMode={toggleEditMode} />)}\r\n\r\n                        {editLabel && <div>\r\n                            <form onSubmit={saveLabel}>\r\n                                <input type=\"text\" name=\"txt\" value={editLabel.txt} autoFocus\r\n                                    autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                                <button className=\"save-btn\">Save</button>\r\n                            </form>\r\n                            <button className=\"cancel-btn\" onClick={() => { removeLabel(editLabel.id) }}>\r\n                                Delete</button>\r\n                        </div>}\r\n\r\n                    </div>\r\n                    <button className=\"add-label-btn flex align-center justify-center\"\r\n                        onClick={this.toggleIsAddLabelShown}\r\n                    ><Add className=\"add-icon\" />Add Label</button>\r\n                </section>}\r\n\r\n                {isAddLabelShown &&\r\n                    <AddLabel addLabel={this.addLabel}\r\n                        toggleIsAddLabelShown={this.toggleIsAddLabelShown} />}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const LabelsEdit = connect(mapStateToProps, mapDispatchToProps)(_LabelsEdit)","import React from 'react'\r\nimport { Check } from '@material-ui/icons';\r\n\r\nexport function MemberEdit(props) {\r\n    const { member, toggleMemberOnCard } = props;\r\n    const isMemberOnCard = props.card.assignedTo.some(mmbr => mmbr._id === member._id);\r\n    const firstLastName = member.fullName.toUpperCase().split(' ');\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n\r\n    return (\r\n        <div onClick={() => { toggleMemberOnCard(member) }}\r\n            className=\"member-item flex align-center\">\r\n            {!member.img && <div className=\"initials\"><span>{initials}</span></div>}\r\n            {member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-img\"></span>}\r\n            {member.fullName}{isMemberOnCard && <Check className=\"icon\" />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { MemberEdit } from './MemberEdit';\r\nimport { boardService } from '../services/boardService';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\n\r\nexport class _MembersEdit extends Component {\r\n\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMembersEdit);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    hideMembersEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isMembersEditShown');\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ name: target.value });\r\n    }\r\n\r\n    toggleMemberOnCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the member is assigned or not and flip it\r\n        if (card.assignedTo.some(mmbr => mmbr._id === member._id)) {\r\n            card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        } else card.assignedTo.push(member);\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { members, toggleProperty, card } = this.props;\r\n        // const { users, board } = this.props; members  //TODO LATER WHEN ADD USER TO BOARD\r\n        // if (!members && !users) return 'loading!!!!';\r\n        const { name } = this.state;\r\n        // var membersToDisplay;\r\n        // if (!users) {\r\n        //     membersToDisplay = members.filter(mmbr =>\r\n        //         mmbr.fullName.toLowerCase().includes(name.toLowerCase()));  //TODO LATER WHEN ADD USER TO BOARD\r\n        // }\r\n        const membersToDisplay = members.filter(mmbr =>\r\n            mmbr.fullName.toLowerCase().includes(name.toLowerCase()));\r\n\r\n        return (\r\n            <section className=\"edit-members\" >\r\n                <div className=\"edit-members-header flex align-center\">\r\n                    <p className=\"grow\">Members</p>\r\n                    <button onClick={() => { toggleProperty('isMembersEditShown') }}><Clear /></button>\r\n                </div>\r\n                <input className=\"search-name\" onChange={this.handleChange} autoComplete=\"off\"\r\n                    type=\"search\" name=\"name\" value={name} placeholder=\"Search members\" />\r\n                <div className=\"members-gallery\">\r\n                    {members && membersToDisplay.map(member =>\r\n                        <MemberEdit toggleMemberOnCard={this.toggleMemberOnCard} card={card}\r\n                            key={member._id} member={member} />)}\r\n                    {/* {users && membersToDisplay.map(member =>\r\n                        <MemberEdit toggleMemberOnCard={this.toggleMemberOnCard} card={card} //board={board} //TODO LATER WHEN ADD USER TO BOARD\r\n                            key={member._id} member={member} />)} */}\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const MembersEdit = connect(mapStateToProps, mapDispatchToProps)(_MembersEdit)","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\n\r\nexport class DueDateEdit extends Component {\r\n\r\n    state = {\r\n        dueDate: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideDueDateEdit);\r\n        this.setState({ dueDate: Date.now() })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideDueDateEdit);\r\n    }\r\n\r\n    hideDueDateEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    handleDateChange = date => {\r\n        this.setState({ dueDate: date._d.getTime() })\r\n    }\r\n\r\n    handleSave = () => {\r\n        this.props.changeDueDate(this.state.dueDate);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        this.props.changeDueDate(null);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    render() {\r\n        const { toggleProperty } = this.props;\r\n        const { dueDate } = this.state;\r\n        return (\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker-header flex align-center\">\r\n                    <p className=\"grow\">Change Due Date</p>\r\n                    <button onClick={() => { toggleProperty('isDueDateEditShown') }}>\r\n                        <Clear className=\"icon\" /></button>\r\n                </div>\r\n                <div className=\"date-picker-content flex column justify-center\">\r\n                    <DateTimePicker className=\"picker-input\"\r\n                        disablePast=\"true\"\r\n                        views={[\"date\", \"month\", \"hours\", \"minutes\"]}\r\n                        minDateMessage=\"\"\r\n                        value={dueDate} onChange={this.handleDateChange} />\r\n                    <div className=\"flex space-between\">\r\n                        <button onClick={this.removeDueDate}\r\n                            className=\"remove-btn\">Remove</button>\r\n                        <button onClick={this.handleSave} className=\"save-btn\">Save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport {\r\n    DeleteForeverOutlined, AccessTime,\r\n    PersonOutlineOutlined, LabelOutlined\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { DueDateEdit } from './DueDateEdit';\r\n\r\nexport class _CardMenu extends Component {\r\n\r\n    state = {\r\n        card: {\r\n            title: '',\r\n            dueDate: 0,\r\n            labels: [],\r\n            assignedTo: []\r\n        },\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        isDueDateEditShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMenu);\r\n        this.titleInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n        const { title, dueDate, labels, assignedTo } = this.props.card;\r\n        this.setState({ card: { title, dueDate, labels, assignedTo } });\r\n        this.cardMenu.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'end' })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMenu);\r\n        this.titleInput.removeEventListener(\"keypress\", this.submitOnEnter);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    hideMenu = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.toggleIsMenuShown();\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n    onDelete = () => {\r\n        const { id } = this.props.card;//getting the id and boardCopy\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //getting the phaseIdx to edit his cards\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards =\r\n            boardCopy.phaseLists[phaseIdx].cards.filter(card => card.id !== id);\r\n        //filtering out the deleted card\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    onChangeTitle = () => {\r\n        if (!this.state.card.title.trim()) return;\r\n        const { id } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards.filter(card => {\r\n            if (card.id !== id) return card;\r\n            else {\r\n                card.title = this.state.card.title;\r\n                return card;\r\n            }\r\n        });\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { onDelete, handleChange, onChangeTitle, toggleProperty, changeDueDate } = this;\r\n        const { isLabelEditShown, card, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        const { title } = card;\r\n        return (\r\n            <section>\r\n                <div onMouseDown={this.props.toggleIsMenuShown} className=\"screen\"></div>\r\n                <section className=\"menu-container flex\">\r\n\r\n                    <form onSubmit={onChangeTitle} className=\"edit-card-form flex column\">\r\n                        <textarea onChange={handleChange} name=\"title\" value={title} cols=\"30\" rows=\"5\"\r\n                            ref={el => this.titleInput = el} spellCheck=\"false\" autoComplete=\"off\" autoFocus />\r\n                        <button onClick={onChangeTitle} className=\"save-btn\">Save</button>\r\n                    </form>\r\n\r\n                    <div ref={(el) => this.cardMenu = el} className=\"card-menu flex column\">\r\n                        <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"flex align-center\">\r\n                            <LabelOutlined className=\"icon\" />Edit Labels</button>\r\n                        {isLabelEditShown &&\r\n                            <LabelsEdit card={this.props.card} toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isMembersEditShown') }} className=\"flex align-center\">\r\n                            <PersonOutlineOutlined className=\"icon\" />Change Members</button>\r\n                        {isMembersEditShown && <MembersEdit card={this.props.card}\r\n                            members={this.props.board.members}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                            className=\"flex align-center\">\r\n                            <AccessTime className=\"icon\" />Change Due Date</button>\r\n                        {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={onDelete} className=\"flex align-center\">\r\n                            <DeleteForeverOutlined className=\"icon\" />Delete</button>\r\n                    </div>\r\n\r\n                </section>\r\n            </section >\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const CardMenu = connect(mapStateToProps, mapDispatchToProps)(_CardMenu)","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { CardLabels } from './CardLabels';\r\nimport { AttachmentOutlined, CheckBoxOutlined, CreateOutlined } from '@material-ui/icons';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\nimport { loadBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { DueBadge } from './DueBadge';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { CardMenu } from './CardMenu';\r\nimport { boardService } from '../services/boardService';\r\n\r\n\r\nclass _CardPreview extends React.Component {\r\n\r\n    state = {\r\n        isMenuShown: false,\r\n        pageX: 0,\r\n        pageY: 0\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    toggleIsMenuShown = (ev) => {\r\n        if (ev) {\r\n            ev.preventDefault();//This prevents context menu\r\n            ev.stopPropagation();//This prevents card from opening\r\n        }\r\n        this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsMenuShown, state } = this;\r\n        const { isMenuShown } = state;\r\n        const { title, imgUrl, dueDate, checkList, assignedTo, attachments } = this.props.card;\r\n        const checklistDoneCount = checkList.filter(item => item.isDone).length;\r\n        const checklistBgc = checklistDoneCount === checkList.length ? '#61bd4f' : '';\r\n        const checklistColor = checklistBgc ? '#fff' : '';\r\n        const labels = this.getUpdatedLabels();\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {isMenuShown && <CardMenu card={this.props.card} toggleIsMenuShown={toggleIsMenuShown} />}\r\n\r\n                <Draggable draggableId={this.props.card.id} index={this.props.index}>\r\n                    {(provided, snapshot) => (\r\n                        <NaturalDragAnimation style={provided.draggableProps.style} snapshot={snapshot}>\r\n                            {style => (\r\n                                <section onContextMenu={toggleIsMenuShown}\r\n                                    onClick={() => { this.props.setCard(this.props.card) }}\r\n                                    className=\"card-preview flex column\"\r\n                                    {...provided.draggableProps} {...provided.dragHandleProps}\r\n                                    ref={provided.innerRef} style={style}>\r\n\r\n                                    <button onClick={toggleIsMenuShown}\r\n                                        className=\"show-menu-btn\">\r\n                                        <CreateOutlined className=\"show-menu-icon\" />\r\n                                    </button>\r\n\r\n                                    {imgUrl && <div className=\"card-img flex justify-center\">\r\n                                        <img alt=\"Card\" src={imgUrl} /></div>}\r\n                                    {labels && <CardLabels labels={labels} />}\r\n\r\n                                    <p>{title}</p>\r\n\r\n                                    <div className=\"card-badges flex wrap\">\r\n                                        {dueDate && <DueBadge dueDate={dueDate} />}\r\n\r\n                                        {attachments.length > 0 &&\r\n                                            <div className=\"attach-badge flex align-center\">\r\n                                                <AttachmentOutlined className=\"attach-icon\" />\r\n                                                <span>{attachments.length}</span>\r\n                                            </div>}\r\n\r\n                                        {checkList.length > 0 &&\r\n                                            <div style={{ backgroundColor: checklistBgc, color: checklistColor }}\r\n                                                className=\"checklist-badge flex align-center\">\r\n                                                <span><CheckBoxOutlined className=\"checklist-icon\" />\r\n                                                </span>\r\n                                                <span>{checklistDoneCount}/{checkList.length}</span>\r\n                                            </div>}\r\n                                    </div>\r\n                                    <div className=\"members-badge flex align-center\">\r\n                                        {assignedTo.length > 0 &&\r\n                                            assignedTo.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                                    </div>\r\n                                </section>\r\n                            )}\r\n                        </NaturalDragAnimation>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    setCard\r\n}\r\n\r\nexport const CardPreview = connect(mapStateToProps, mapDispatchToProps)(_CardPreview)","import React, { Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { MoreHoriz, Close, Add } from '@material-ui/icons';\r\nimport { AddCard } from './AddCard';\r\nimport { CardPreview } from './CardPreview';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nexport class _PhasePreview extends Component {\r\n\r\n    state = {\r\n        isInputShown: false,\r\n        isMenuShown: false,\r\n        isSortShown: false,\r\n        newPhaseName: '',\r\n        isAddCardShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ newPhaseName: this.props.phase.name })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) window.addEventListener('keydown', this.hideInput);\r\n        else window.removeEventListener('keydown', this.hideInput);\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        if (ev.code === 'Escape' || ev.type === 'onblur') {\r\n            this.setState({ isInputShown: false });\r\n            window.removeEventListener('keydown', this.hideInput);\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ newPhaseName: target.value })\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newPhaseName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === id);\r\n        boardCopy.phaseLists[phaseIdx].name = this.state.newPhaseName;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleInputShown();\r\n    }\r\n\r\n    toggleMenuShown = () => {\r\n        if (this.state.isSortShown) {\r\n            //making sure menu returns to default \"state\"\r\n            this.setState({ isMenuShown: false, isSortShown: false });\r\n        } else this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    showAddCard = () => {\r\n        this.setState({ isAddCardShown: true });\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    toggleAddCardShown = () => {\r\n        this.setState(prevState => ({ isAddCardShown: !prevState.isAddCardShown }));\r\n    }\r\n\r\n    toggleIsSortShown = () => {\r\n        this.setState(prevState => ({ isSortShown: !prevState.isSortShown }));\r\n    }\r\n\r\n    sortListBy = (sortBy) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phase = boardCopy.phaseLists.find(phase => phase.id === id);\r\n        const sortedPhase = boardService.getSortedPhase(sortBy, phase);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id ===\r\n            sortedPhase.id ? sortedPhase : phase);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsSortShown();//to close the menu\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    onDeletePhase = () => {\r\n        this.toggleMenuShown();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id !== this.props.phase.id);\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { name, id, cards } = this.props.phase;\r\n        const { newPhaseName, isInputShown, isMenuShown, isSortShown, isAddCardShown } = this.state;\r\n\r\n        return (\r\n            <Draggable draggableId={id} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <NaturalDragAnimation\r\n                        style={provided.draggableProps.style}\r\n                        snapshot={snapshot}\r\n                    >\r\n                        {style => (\r\n                            <article className=\"phase flex column\"\r\n                                {...provided.draggableProps}\r\n                                ref={provided.innerRef}\r\n                                {...snapshot.isDropAnimating = true} style={style}\r\n                            >\r\n                                <div {...provided.dragHandleProps} className=\"phase-header flex space-between\">\r\n\r\n                                    {!isInputShown && <h5 className=\"phase-title grow\"\r\n                                        onClick={this.toggleInputShown}>{name}</h5>}\r\n                                    {isInputShown && <form className=\"flex grow\" onSubmit={this.handleSubmit}>\r\n                                        <input className=\"phase-name-input grow\" type=\"text\" name=\"newPhaseName\"\r\n                                            value={newPhaseName} autoFocus autoComplete=\"off\" spellCheck=\"false\"\r\n                                            onBlur={this.toggleInputShown} onChange={this.handleChange} />\r\n                                    </form>}\r\n\r\n                                    <MoreHoriz className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                    {isMenuShown && <div className=\"phase-menu flex column\">\r\n                                        <div className=\"menu-header flex align-center\">\r\n\r\n                                            <h5 className=\"grow\">List Actions</h5>\r\n                                            <Close className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                        </div>\r\n                                        <div className=\"menu-btns flex column\">\r\n                                            <button onClick={this.showAddCard} >Add A Card</button>\r\n                                            <button onClick={this.toggleIsSortShown}>Sort By..</button>\r\n                                            {isSortShown && <div className=\"sort-options flex column\">\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('title')\r\n                                                }}>Title</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('firstCreated')\r\n                                                }}>First Created</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('lastCreated')\r\n                                                }}>Last Created</button>\r\n                                            </div>}\r\n                                            <button onClick={this.onDeletePhase}>Delete List</button>\r\n\r\n                                        </div>\r\n                                    </div>}\r\n                                </div>\r\n                                <Droppable droppableId={id}>\r\n                                    {(provided) => (\r\n                                        <div className=\"cards-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                            {cards.map((card, index) => <CardPreview key={card.id} card={card} index={index} />)}\r\n                                            {provided.placeholder}\r\n                                            <AddCard isAddCardShown={isAddCardShown} bottomCard={this.bottomCard}\r\n                                                toggleAddCardShown={this.toggleAddCardShown} phaseId={this.props.phase.id} />\r\n                                            <div style={{ opacity: 0 }} ref={el => this.bottomCard = el}></div>\r\n                                        </div>\r\n                                    )}\r\n                                </Droppable>\r\n                                {!isAddCardShown && <button onClick={this.toggleAddCardShown}\r\n                                    className=\"add-card-btn flex align-center\">\r\n                                    <Add className=\"add-icon\" fontSize=\"large\" />Add a card</button>}\r\n                            </article>\r\n                        )}\r\n                    </NaturalDragAnimation>\r\n                )}\r\n\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhasePreview = connect(mapStateToProps, mapDispatchToProps)(_PhasePreview)","import React, { Component } from 'react';\r\nimport { PhasePreview } from './PhasePreview';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { Add, Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\n\r\nexport class _PhaseList extends Component {\r\n    state = {\r\n        board: null,\r\n        isInputShown: false,\r\n        newListName: '',\r\n        phaseListToShow: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ board: this.props.board }, () => {\r\n\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ board: this.props.board, phaseListToShow });\r\n        }\r\n        if (JSON.stringify(prevProps.filteredByUser) !== JSON.stringify(this.props.filteredByUser)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeEventListeners();\r\n    }\r\n\r\n    getFilteredPhaseLists(searchedName) {\r\n        if (!searchedName) return this.props.board.phaseLists;\r\n        const cloneBoard = boardService.getBoardCopy(this.props.board);\r\n\r\n        cloneBoard.phaseLists.map(phase => {\r\n            return phase.cards = phase.cards.filter(card => {\r\n                return card.assignedTo.find(user => user.fullName.toLowerCase().includes(searchedName.trim().toLowerCase()))\r\n            })\r\n        })\r\n        return cloneBoard.phaseLists;\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) this.addEventListeners();\r\n        else this.removeEventListeners();\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        //To allow closing the input through Escape/click on something else\r\n        // Cannot use 'onBlur', in order to allow adding lists in a row(Try at trello)\r\n        if ((ev.code === 'Escape' || ev.target !== this.listNameInput)\r\n            && ev.target !== this.submitBtn) {\r\n            this.setState({ isInputShown: false });\r\n            this.removeEventListeners();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({ ...prevState, newListName: target.value }));\r\n    }\r\n\r\n    addEventListeners = () => {\r\n        window.addEventListener('keydown', this.hideInput);\r\n        window.addEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    removeEventListeners = () => {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n        window.removeEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    onAddPhase = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newListName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const newPhase = boardService.getNewPhase(this.state.newListName);\r\n        boardCopy.phaseLists.push(newPhase);\r\n        await this.props.updateBoard(boardCopy);\r\n        this.setState({ newListName: '' }, () => {\r\n            this.listForm.scrollIntoView({ inline: 'end', behavior: 'smooth' });\r\n        });\r\n    }\r\n\r\n    onDragEnd = result => {\r\n\r\n        const { destination, source, type } = result;\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        if (type === 'PhasePreview') {\r\n            const newPhasesOrder = boardCopy.phaseLists;\r\n            const movingPhase = newPhasesOrder.splice(source.index, 1)[0];\r\n            newPhasesOrder.splice(destination.index, 0, movingPhase);\r\n        } else {\r\n            const { phaseLists } = boardCopy;\r\n            const srcPhase = phaseLists.find(phase => phase.id === source.droppableId);\r\n            const dstPhase = phaseLists.find(phase => phase.id === destination.droppableId);\r\n\r\n            if (srcPhase.id === dstPhase.id) {\r\n                const movingCard = srcPhase.cards.splice(source.index, 1)[0];\r\n                srcPhase.cards.splice(destination.index, 0, movingCard);\r\n            } else {\r\n                const srcCards = srcPhase.cards;\r\n                const movingCard = srcCards.splice(source.index, 1)[0];\r\n                const dstCards = dstPhase.cards;\r\n                dstCards.splice(destination.index, 0, movingCard);\r\n                boardService.addActivity(boardCopy,\r\n                    this.props.user,\r\n                    OPERETIONS.UPDATE,\r\n                    TYPES.CARD, {\r\n                    id: movingCard.id,\r\n                    title: movingCard.title\r\n                },\r\n                    `moved card from ${srcPhase.name} to ${dstPhase.name} -Card:`);\r\n            }\r\n        }\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.board || !this.state.phaseListToShow) return 'loading..'\r\n\r\n\r\n        const { toggleInputShown, onAddPhase, handleChange, hideInput } = this;\r\n        const { isInputShown, newListName, phaseListToShow } = this.state;\r\n\r\n        return (\r\n\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"PhasePreview\">\r\n                    {(provided, snapshot) => (\r\n                        <section className=\"phase-list flex\"  {...provided.droppableProps} ref={provided.innerRef} >\r\n                            {phaseListToShow && phaseListToShow.map((phase, index) => <PhasePreview key={phase.id} index={index}\r\n                                phase={phase} />)}\r\n\r\n                            {!isInputShown && <button className=\"add-list-btn flex align-center\"\r\n                                onClick={toggleInputShown}> <Add fontSize=\"small\" />Add new list</button>}\r\n\r\n                            {isInputShown && <form ref={el => this.listForm = el} className=\"add-list-form\"\r\n                                onSubmit={onAddPhase}>\r\n                                <input ref={el => this.listNameInput = el} type=\"text\" autoFocus spellCheck=\"false\"\r\n                                    name=\"newListName\" onChange={handleChange} required autoComplete=\"off\"\r\n                                    placeholder=\"Enter list title..\" value={newListName} />\r\n                                <div className=\"flex align-center\">\r\n                                    <button ref={el => this.submitBtn = el} className=\"submit-btn\"\r\n                                        type=\"submit\">Add List</button>\r\n                                    <Close className=\"cancel-btn pointer\" onClick={hideInput} />\r\n                                </div>\r\n                            </form>}\r\n                            {provided.placeholder}\r\n                        </section>\r\n\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhaseList = connect(mapStateToProps, mapDispatchToProps)(_PhaseList)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nclass _Activity extends React.Component {\r\n\r\n    dynamicActivity = (activity) => {\r\n\r\n        const { at, user, type, object, operation, desc } = activity;\r\n\r\n        var userElmemnt = null;\r\n        var elmentType = null;\r\n        if (desc) {\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            return (\r\n                <div className=\"activity flex\">\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${desc}`}</span>\r\n                        <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            if (!user) return <div style={{ \"display\": \"none\" }}>stam</div>\r\n\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            elmentType = <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>;\r\n\r\n            return (\r\n\r\n                < div className=\"activity flex\" >\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${operation} ${type}`} {elmentType}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n    OpenByObjectType = () => {\r\n        const { type, object, } = this.props.activity;\r\n        if (!type || !object) return;\r\n        // parent is menu and not card and type is card\r\n        if (type.toLowerCase() === 'card' && this.props.allowOpenCard) {\r\n            const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = object.id;\r\n            const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n            if (!currPhase) return;\r\n            const card = currPhase.cards.find(card => card.id === cardId);\r\n            if (!card) return;\r\n            this.props.onCloseMenu(null);\r\n            this.props.setCard(card);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { activity } = this.props\r\n        return (\r\n            this.dynamicActivity(activity)\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Activity = connect(mapStateToProps, mapDispatchToProps)(_Activity)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { Activity } from './Activity';\r\nimport { ListOutlined } from '@material-ui/icons';\r\n\r\nclass _Activities extends React.Component {\r\n\r\n    state = {\r\n        txt: '',\r\n\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n    onEnterDown = (ev) => {\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            this.handleSaveBoard();\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const card = this.props.card;\r\n        if (!this.state.txt.trim()) return;\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.ADD, TYPES.CARD, { id: card.id, title: card.title },\r\n            `commented \"${this.state.txt}\"`);\r\n        this.setState({ txt: '' });\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        const { activities, showCommentBox } = this.props;\r\n        const { txt } = this.state\r\n        return (\r\n\r\n            <div className=\"activity-container\">\r\n                <div className=\"activity-header flex align-center\">\r\n                    <ListOutlined className=\"activity-icon\" />\r\n                    <span className=\"activity-header-text\">Activity</span>\r\n                </div>\r\n\r\n                {showCommentBox &&\r\n                    <div className=\"flex column\">\r\n                        <div className=\"flex\">\r\n                            <MemberInitials fullName={this.props.user.fullName} />\r\n                            <input type=\"text\" className=\"comment-input\" ref={el => this.cardNameInput = el}\r\n                                placeholder=\"Write a comment...\" onChange={this.handleChange}\r\n                                spellCheck=\"false\"\r\n                                onBlur={this.handleSaveBoard} onKeyDown={this.onEnterDown} value={this.state.txt}></input>\r\n\r\n                        </div>\r\n                        {txt.length > 0 && <button onClick={this.handleSaveBoard} className=\"add-comment-btn\" type=\"submit\">Save</button>}\r\n                    </div>\r\n                }\r\n\r\n                {activities.map((activity, index) => {\r\n                    return <Activity allowOpenCard={!showCommentBox} onCloseMenu={this.props.onCloseMenu} key={index} activity={activity}>\r\n\r\n                    </Activity>\r\n                })}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const Activities = connect(mapStateToProps, mapDispatchToProps)(_Activities)","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons';\r\nimport { Activities } from '../Activities'\r\n\r\nexport class BoardMenu extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        const shownClass = !this.props.isMenuShown ? '' : 'shown';\r\n        const board = this.props.board;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"board-menu-header flex\">\r\n                    <div className=\"board-menu-header-content flex align-center grow\">\r\n                        <h3 className=\"menu-header-title\">Menu</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-content flex column\">\r\n                        <div className=\"board-menu-item flex align-center\" onClick={() => this.props.onToggleMenu('backgroundMenu')}>\r\n                            <div className=\"board-menu-icon\" style={boardBg}></div>\r\n                            <span className=\"board-menu-text\">Change Background</span>\r\n                        </div>\r\n                        <span className=\"board-menu-header-divider\"></span>\r\n                        <Activities onCloseMenu={this.props.onToggleMenu} activities={board.activities} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _ColorMenu extends Component {\r\n\r\n    changeBoardColor = (color) => {\r\n\r\n        if (!color) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.bgColor = color;\r\n        clonedBoard.imgUrl = null;\r\n        boardService.addActivity(clonedBoard, this.props.user, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `changed board background color`);\r\n        this.props.updateBoard(clonedBoard);\r\n\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Change Background</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 121, 191)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 121, 191)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(210, 144, 52)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(210, 144, 52)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(81, 152, 57)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(81, 152, 57)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(176, 70, 50)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(176, 70, 50)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(137, 96, 158)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(137, 96, 158)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(205, 90, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(205, 90, 145)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(75, 191, 107)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(75, 191, 107)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 174, 204)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 174, 204)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(131, 140, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(131, 140, 145)\")} >\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const ColorMenu = connect(mapStateToProps, mapDispatchToProps)(_ColorMenu)\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService';\r\nimport { unsplashService } from '../../services/unsplashService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _PhotoMenu extends Component {\r\n\r\n    state = {\r\n        imgs: null\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.imgs) {\r\n            unsplashService.getListPhotos()\r\n                .then(json => {\r\n                    const imgs = json.map(img => {\r\n                        return {\r\n                            thumbUrl: img.urls.thumb,\r\n                            regularUrl: img.urls.regular,\r\n                            fullUrl: img.urls.full,\r\n                            credit: `${img.user.links.html}?utm_source=Flowz&utm_medium=referral`,\r\n                            userName: `${img.user.name}`\r\n                        }\r\n                    })\r\n                    this.setState({ imgs }, () => {\r\n                    });\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    changeBoardImg = (img) => {\r\n\r\n        if (!img) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.imgUrl = img;\r\n        clonedBoard.bgColor = null;\r\n        boardService.addActivity(clonedBoard, this.props.user, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background image`);\r\n        this.props.updateBoard(clonedBoard);\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        const { imgs } = this.state;\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Photos by<a className=\"unsplash\"\r\n                                href=\"https://unsplash.com/?utm_source=Flowz&utm_medium=referral&utm_campaign=api-credit\" >Unsplash</a></h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            {imgs && imgs.map((img, index) =>\r\n\r\n                                <div className='btn-photo flex column align-center flex-end '\r\n                                    style={{ \"backgroundImage\": `url(\"${img.thumbUrl}\")` }} key={index}\r\n                                    onClick={() => this.changeBoardImg(img.regularUrl)} >\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const PhotoMenu = connect(mapStateToProps, mapDispatchToProps)(_PhotoMenu)\r\n","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class BackgroundMenu extends Component {\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"mainMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Colors</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between\">\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"photoMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/collage.jpg\")} alt=\"\" />\r\n                                <span>Photos</span>\r\n                            </div>\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"colorMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/colors.jpg\")} alt=\"\" />\r\n                                <span>Colors</span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NoteOutlinedIcon from '@material-ui/icons/NoteOutlined';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nclass _CardHeader extends Component {\r\n    state = {\r\n        txt: '',\r\n        onPhase: '',\r\n        isTitleOnEdit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const cardId = this.props.card.id;\r\n        let currPhase = this.props.board.phaseLists.filter(phase =>\r\n            phase.cards.find(card => card.id === cardId));\r\n        this.setState({ txt: this.props.card.title, onPhase: currPhase[0].name })\r\n    }\r\n\r\n    toggleInput = () => {\r\n        this.setState(prevState => ({ isTitleOnEdit: !prevState.isTitleOnEdit }))\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        if (!this.state.txt.trim()) return this.toggleInput();\r\n        if (this.state.isTitleOnEdit) {\r\n            let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = this.props.card.id;\r\n            let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n            currPhase[0].cards.forEach(card => {\r\n                if (card.id === this.props.card.id) {\r\n                    card.title = this.state.txt;\r\n                }\r\n            })\r\n            this.props.updateBoard(boardClone)\r\n            this.toggleInput();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    autoGrow = (el) => {\r\n        el.style.height = (el.scrollHeight) + \"px\";\r\n    }\r\n\r\n    backToboard = () => {\r\n        history.push(`/board/${this.props.board._id}`)\r\n    }\r\n\r\n    render() {\r\n        if (!this.state) return 'loading';\r\n        const { txt, isTitleOnEdit, onPhase } = this.state;\r\n\r\n        return (<div className=\"card-header\">\r\n            <div className=\"card-header-container flex align-center\">\r\n                <NoteOutlinedIcon className=\"icon\" />\r\n                {!isTitleOnEdit && <h3 onClick={this.toggleInput} className=\"card-title grow\">{txt}</h3>}\r\n                {isTitleOnEdit && <textarea ref={el => this.elTextarea = el} spellCheck=\"false\"\r\n                    onFocus={(ev) => { this.autoGrow(ev.target) }} onKeyDown={(e) => this.handleKeyPress(e)}\r\n                    className=\"card-title-input\" autoFocus\r\n                    onBlur={this.handleSaveBoard} placeholder=\"Title...\" autoCorrect=\"false\"\r\n                    onChange={this.handleChange} value={txt} />}\r\n            </div>\r\n            <button className=\"close-btn\" onClick={() => { this.props.setCard(null) }}>\r\n                <Clear className=\"close-icon\" /></button>\r\n            <p className=\"card-link\">in list <span\r\n                onClick={() => { this.props.setCard(null) }}>{onPhase}</span></p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\n\r\nexport const CardHeader = connect(mapStateToProps, mapDispatchToProps)(_CardHeader)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\n\r\nclass _CardDesc extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ txt: this.props.card.desc })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n\r\n    handleSaveBoard = () => {\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n\r\n        currPhase[0].cards.forEach(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.desc = this.state.txt;\r\n            }\r\n        })\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div className=\"desc-header-container flex\">\r\n                    <DescriptionIcon className=\"icon\" />\r\n                    <span className=\"desc-header\">Description</span>\r\n                </div>\r\n                <textarea className=\"card-desc-input\"\r\n                    placeholder=\"Add a more detailed description...\" onChange={this.handleChange}\r\n                    spellCheck=\"false\"\r\n                    onBlur={this.handleSaveBoard} value={this.state.txt}></textarea>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\n\r\nexport const CardDesc = connect(mapStateToProps, mapDispatchToProps)(_CardDesc)\r\n\r\n\r\n","import React from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport function ChecklistItem(props) {\r\n    const { idx, todo, onDelete, handleChange, handleSaveBoard, handleKeyPress } = props;\r\n    return (\r\n        <div className=\"checklist-item flex align-center\" key={idx} >\r\n            <input className=\"checkbox\" type=\"checkbox\" name=\"isDone\"\r\n                onChange={(e) => { handleChange(e, idx) }}\r\n                onBlur={handleSaveBoard} checked={todo.isDone} />\r\n                \r\n            <input className=\"checklist-item-txt grow\" type=\"text\" name=\"txt\"\r\n                onChange={(e) => handleChange(e, idx)} spellCheck=\"false\"\r\n                placeholder=\"Add a todo...\"\r\n                onBlur={handleSaveBoard} value={todo.txt} onKeyDown={handleKeyPress} />\r\n            <button onClick={() => { onDelete(idx) }}><Clear className=\"icon\" /></button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { PlaylistAddCheck } from '@material-ui/icons';\r\nimport { ChecklistItem } from './ChecklistItem';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService'\r\n\r\nclass _CardChecklist extends Component {\r\n    state = {\r\n        checkList: null,\r\n        todoText: '',\r\n        onAdd: false,\r\n        progress: 0,\r\n        checklistTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let checklistTitle = this.props.card.checklistTitle\r\n            ? this.props.card.checklistTitle : 'My Checklist';\r\n        this.setState({ checkList: this.props.card.checkList, onAdd: false, checklistTitle },\r\n            () => this.progressBarUpdate());\r\n    }\r\n\r\n    progressBarUpdate = () => {\r\n        const doneTodos = this.state.checkList.reduce((acc, currVal) => {\r\n            if (currVal.isDone) acc++\r\n            return acc\r\n        }, 0)\r\n        this.setState({ progress: Math.floor((doneTodos / this.state.checkList.length) * 100) });\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (!this.state.todoText) return\r\n\r\n        let newTodo = { txt: this.state.todoText, isDone: false }\r\n        let clone = this.state.checkList.slice();\r\n        clone.push(newTodo);\r\n        this.setState({ checkList: clone, todoText: '' }, () => {\r\n            this.handleSaveBoard();\r\n        });\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n\r\n        const updatedCards = currPhase.cards.map(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.checkList = this.state.checkList;\r\n                card.checklistTitle = this.state.checklistTitle;\r\n            }\r\n            return card;\r\n        })\r\n        const phaseIndex = boardClone.phaseLists.findIndex(phase => phase.id === currPhase.id)\r\n        currPhase.cards = updatedCards;\r\n        boardClone.phaseLists[phaseIndex] = currPhase;\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.UPDATE, TYPES.CARD,\r\n            { id: this.props.card.id, title: this.props.card.title },\r\n            'update checklist on card');\r\n\r\n        this.props.updateBoard(boardClone)\r\n            .then(() => {\r\n                this.progressBarUpdate();\r\n            })\r\n    }\r\n\r\n\r\n    toggleAdd = () => {\r\n        if (this.state.todoText) this.addTodo();\r\n        this.setState(prevState => ({ onAdd: !prevState.onAdd }));\r\n    }\r\n\r\n\r\n    onDelete = (idx) => {\r\n        let clone = this.state.checkList.slice();\r\n        clone.splice(idx, 1);\r\n        const checklistTitle = this.state.checkList.length === 1 ? '' : this.state.checklistTitle;\r\n        this.setState({ checkList: clone, checklistTitle }, () => {\r\n            this.handleSaveBoard();\r\n        })\r\n    }\r\n\r\n    handleChange = ({ target }, idx = -1) => {\r\n        const field = target.name;\r\n        const value = (field === 'isDone') ? target.checked : target.value;\r\n        let cloneChkList = this.state.checkList.slice();\r\n        if (field === 'isDone') {\r\n            cloneChkList[idx].isDone = value;\r\n            this.setState({ checkList: cloneChkList }, () => {\r\n                this.handleSaveBoard();\r\n            });\r\n        }\r\n        else {\r\n            if (idx === -1)\r\n                (this.state.onAdd ? this.setState({ todoText: value }) : this.setState({ checklistTitle: value }))\r\n\r\n            else {\r\n\r\n                cloneChkList[idx].txt = value;\r\n            }\r\n        }\r\n        this.setState({ checkList: cloneChkList });\r\n    }\r\n\r\n    handleFocus = (ev) => ev.target.select();\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { todoText, onAdd, checklistTitle, progress, checkList } = this.state;\r\n        if (!checkList || !checkList.length) return null;\r\n        const progressBgc = this.state.progress === 100 ? '#61bd4f' : '#2196f3';\r\n\r\n        return (\r\n            <div className=\"card-check-list\">\r\n                <div className=\"checklist-title-container flex align-center\">\r\n                    <PlaylistAddCheck className=\"checklist-icon\" />\r\n                    <input className=\"checklist-title\" type=\"text\" name=\"txt\" placeholder=\"Checklist name...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} spellCheck=\"false\"\r\n                        onFocus={this.handleFocus} onBlur={this.handleSaveBoard}\r\n                        value={checklistTitle} /></div>\r\n                {checkList && checkList.length > 0 && < div className=\"progress-bar-container\">\r\n                    <div className=\"progress-bar\"\r\n                        style={{ width: `${progress}%`, backgroundColor: progressBgc }}></div>\r\n                </div>}\r\n                {\r\n                    checkList && checkList.length > 0 && this.state.checkList.map((todo, idx) => <ChecklistItem todo={todo} key={idx}\r\n                        onDelete={this.onDelete} handleChange={this.handleChange}\r\n                        handleSaveBoard={this.handleSaveBoard} idx={idx}\r\n                        handleKeyPress={this.handleKeyPress} />)\r\n                }\r\n\r\n                {!onAdd && <button className=\"add-btn\" onClick={this.toggleAdd}>Add Todo</button>}\r\n                {\r\n                    onAdd && <div className=\"add-item flex align-center\">\r\n                        <input type=\"text\" onChange={this.handleChange}\r\n                            onKeyDown={this.handleKeyPress} autoFocus onBlur={this.toggleAdd} value={todoText} />\r\n                        <button className=\"save-checklist-item-btn\">Save</button>\r\n                    </div>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const CardChecklist = connect(mapStateToProps, mapDispatchToProps)(_CardChecklist)\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nasync function uploadImg({ target }) {\r\n    const CLOUD_NAME = 'marmelada';\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', target.files[0]);\r\n    formData.append('upload_preset', 'balulu');\r\n    try {\r\n        const res = await axios.post(UPLOAD_URL, formData);\r\n        return res.data.url\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n\r\n}\r\n\r\nasync function uploadRawAttachment({ target }) {\r\n    const CLOUD_NAME = 'marmelada';\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/raw/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', target.files[0]);\r\n    formData.append('upload_preset', 'balulu');\r\n    try {\r\n        const res = await axios.post(UPLOAD_URL, formData);\r\n        return res.data.url\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const cloudinaryService = {\r\n    uploadImg,\r\n    uploadRawAttachment\r\n}","import React from 'react';\r\nimport { DeleteForeverOutlined } from '@material-ui/icons';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const CardImage = (props) => {\r\n    const { isImgLoading, imgUrl, title, removeImgUrl, loadingMsg } = props;\r\n    const msg = !(loadingMsg) ? 'Loading your image..' : loadingMsg\r\n    return (\r\n        <React.Fragment>\r\n            {isImgLoading && <div className=\"loading-field flex column align-center\">\r\n                <Loader secondaryColor=\"#2196f3d9\" type=\"Circles\" color=\"#2196F3\"\r\n                    className=\"loader\" height={60} width={60} />\r\n                <p>{msg}</p>\r\n            </div>}\r\n            {\r\n                imgUrl && <React.Fragment>\r\n                    <img className=\"card-img\" src={imgUrl} alt={title} />\r\n                    <button className=\"remove-btn flex align-center\"\r\n                        title=\"Remove cover image\" onClick={removeImgUrl}>\r\n                        <DeleteForeverOutlined className=\"icon\" /></button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, setCard, updateBoard } from '../store/actions/boardActions';\r\nimport { CardHeader } from './CardHeader';\r\nimport { CardDesc } from './CardDesc';\r\nimport { CardChecklist } from './CardChecklist';\r\nimport { Activities } from '../cmps/Activities'\r\nimport {\r\n    PermIdentity, LabelOutlined, PlaylistAddCheck,\r\n    Schedule, CropOriginal, DeleteForeverOutlined,\r\n    // Attachment\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { boardService } from '../services/boardService';\r\nimport { DueDateEdit } from './DueDateEdit';\r\nimport moment from 'moment';\r\nimport { cloudinaryService } from '../services/cloudinaryService';\r\nimport { CardImage } from './CardImage';\r\n// import { CardAttachments } from './CardAttachments';\r\n\r\n\r\nclass _Card extends Component {\r\n    state = {\r\n        card: null,\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        cardActivities: [],\r\n        isDueDateEditShown: false,\r\n        isImgLoading: false,\r\n        loadingMsg: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideCard);\r\n        var card;\r\n        this.props.board.phaseLists.forEach(phase => {\r\n            const res = phase.cards.find(card => card.id === this.props.cardId);\r\n            if (res) card = res;\r\n        });\r\n        const cardActivities = this.getActivities(card.id);\r\n        this.setState({ card, cardActivities });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideCard);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            var card;\r\n            this.props.board.phaseLists.forEach(phase => {\r\n                const res = phase.cards.find(card => card.id === this.props.cardId);\r\n                if (res) card = res;\r\n            });\r\n            const cardActivities = this.getActivities(card.id);\r\n            this.setState({ card, cardActivities });\r\n        }\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.state.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    hideCard = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.setCard(null);\r\n    }\r\n\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    getActivities = (cardId, limit = 10) => {\r\n        const cardActivities = this.props.board.activities.filter(activity => activity.object.id === cardId);\r\n        if (cardActivities.length > 10) return cardActivities.slice(0, limit);\r\n        return cardActivities\r\n\r\n\r\n    }\r\n\r\n    addCheckList = () => {\r\n        const cloneCard = JSON.parse(JSON.stringify(this.state.card));\r\n        if (!cloneCard.checkList.length) {\r\n            cloneCard.checkList.push({ txt: '', isDone: false });\r\n            this.setState({ card: cloneCard })\r\n        }\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n\r\n    removeMemberFromCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Removing the member from the card\r\n        card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    removeImgUrl = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].imgUrl = null;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    onUploadImg = async (ev) => {\r\n        this.setState({ isImgLoading: true });\r\n        const imgUrl = await cloudinaryService.uploadImg(ev);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].imgUrl = imgUrl;\r\n        this.props.updateBoard(boardCopy);\r\n        this.setState({ isImgLoading: false });\r\n    }\r\n\r\n    // handleFileUpload = async (ev) => { //no support for attachments clodinary!!!\r\n    //     const fileName = ev.target.files[0].name;\r\n    //     const ext = fileName.split('.').pop();\r\n    //     this.setState({ isImgLoading: true, loadingMsg: \"Uploading your attachment..\" });\r\n    //     const attachmentUrl = await cloudinaryService.uploadRawAttachment(ev, fileName);\r\n    //     const boardCopy = boardService.getBoardCopy(this.props.board);\r\n    //     const card = this.props.card;\r\n    //     const cardId = card.id;\r\n    //     const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n    //     const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n    //     boardCopy.phaseLists[phaseIdx].cards[cardIdx].attachments.push({ at: Date.now(), name: fileName, ext, url: attachmentUrl })\r\n    //     boardService.addActivity(boardCopy, this.props.user, OPERETIONS.ADD, TYPES.CARD, { id: cardId, title: card.title },\r\n    //         `attachment ${fileName} to card`);\r\n    //     this.props.updateBoard(boardCopy);\r\n    //     this.setState({ isImgLoading: false, loadingMsg: null });\r\n    // }\r\n\r\n\r\n    removeCard = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards.splice(cardIdx, 1);\r\n        this.props.setCard(null)\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board || !this.state.card) return 'Loading';\r\n        const { card, isLabelEditShown, isMembersEditShown, cardActivities, isDueDateEditShown, isImgLoading } = this.state;\r\n        const { assignedTo, dueDate, imgUrl, title } = card;\r\n        const { toggleProperty, changeDueDate, removeImgUrl } = this;\r\n        const labels = this.getUpdatedLabels();\r\n\r\n        return (\r\n            <section>\r\n                <div onClick={() => { this.props.setCard(null) }} className=\"card-modal\" >\r\n                    <div onClick={(ev) => ev.stopPropagation()} className=\"card-container\" >\r\n                        <div className=\"card-img-container flex justify-center\">\r\n                            <CardImage isImgLoading={isImgLoading} loadingMsg={this.state.loadingMsg} imgUrl={imgUrl}\r\n                                title={title} removeImgUrl={removeImgUrl} />\r\n                        </div>\r\n                        < CardHeader card={card} />\r\n                        <div className=\"card-content flex\">\r\n                            <div className=\"card-details flex column grow\">\r\n                                {assignedTo.length > 0 && <div className=\"card-details-members\">\r\n                                    <h3>Members</h3>\r\n                                    <div className=\"flex align-center\">\r\n                                        {assignedTo.map((member) => <span key={member._id}\r\n                                            onClick={() => { this.removeMemberFromCard(member) }}>\r\n                                            <MemberInitials member={member} />\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {labels.length > 0 && <div className=\"card-details-labels\">\r\n                                    <h3>Labels</h3>\r\n                                    <div className=\"labels-gallery flex wrap align-center\">\r\n                                        {labels.map(label => <span title={label.txt} className=\"label\"\r\n                                            onClick={() => { toggleProperty('isLabelEditShown') }}\r\n                                            style={{ backgroundColor: label.color }}\r\n                                            key={label.id}> <span className=\"label-txt\">{label.txt}</span>\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {dueDate && <div className=\"card-details-date\">\r\n                                    <h3>Due Date</h3>\r\n                                    <div onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                        className=\"date flex align-center\">\r\n                                        <span className=\"date-str\">{`${moment(dueDate).format(\"MMM Do\")}\r\n                                     at ${moment(dueDate).format(\"HH:mm\")}`}</span>\r\n                                    </div>\r\n                                </div>}\r\n                                < CardDesc card={card} />\r\n                                {/* <CardAttachments card={card} /> //coudinary do not suppot pdf right now */}\r\n                                {(card.checkList.length > 0) && < CardChecklist card={card} />}\r\n                                <Activities card={card} showCommentBox={true} activities={cardActivities} />\r\n                            </div>\r\n                            <div className=\"card-sidebar\">\r\n                                <button onClick={() => { toggleProperty('isMembersEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <PermIdentity className=\"icon\" /></span>Members</button>\r\n                                {isMembersEditShown &&\r\n                                    <MembersEdit members={this.props.board.members} card={card}\r\n                                        toggleProperty={toggleProperty} />}\r\n\r\n                                <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"card-sidebar-btn\">\r\n                                    <span ><LabelOutlined className=\"icon\" /></span>Labels</button>\r\n\r\n                                {isLabelEditShown &&\r\n                                    <LabelsEdit card={card} toggleProperty={toggleProperty} />}\r\n\r\n                                {(card.checkList.length < 1) && <button className=\"card-sidebar-btn\"\r\n                                    onClick={this.addCheckList}><span>\r\n                                        <PlaylistAddCheck className=\"icon\" /></span>Checklist</button>}\r\n\r\n                                <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <Schedule className=\"icon\" /></span>Due Date</button>\r\n                                {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                                    toggleProperty={toggleProperty} />}\r\n\r\n                                {/* <label htmlFor=\"attachmentUrl\" className=\"card-sidebar-btn pointer\"><span> no support from cloudinary attchemnts other then media\r\n                                    <Attachment className=\"icon\" /></span>Attachment</label>\r\n                                <input type=\"file\" className=\"get-file display-none\" name=\"file\" id=\"attachmentUrl\" onChange={this.handleFileUpload} ></input> */}\r\n\r\n                                {!imgUrl && <React.Fragment>\r\n                                    <label htmlFor=\"imgUrl\" className=\"card-sidebar-btn pointer\"><span>\r\n                                        <CropOriginal className=\"icon\" /></span>Cover</label>\r\n                                    <input className=\"display-none\" type=\"file\" id=\"imgUrl\"\r\n                                        onChange={this.onUploadImg} />\r\n                                </React.Fragment>}\r\n\r\n                                <button onClick={this.removeCard} className=\"card-sidebar-btn\"><span>\r\n                                    <DeleteForeverOutlined className=\"icon\"\r\n                                    /></span>Delete</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Card = connect(mapStateToProps, mapDispatchToProps)(_Card)","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport function BoardUserFilter(props) {\r\n\r\n    return (\r\n        <form className=\"search-input-container flex\" >\r\n            <input className=\"board-filter-input\" placeholder=\"Filter by user...\"\r\n                type=\"text\" list=\"users\" name=\"user\"\r\n                onChange={(event) => props.onInputChanged(event.target.value)} />\r\n            <SearchIcon className=\"search-icon\" />\r\n        </form >\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\n// import { queryUsers } from '../store/actions/userActions'\r\nimport { connect } from 'react-redux';\r\nimport { PhaseList } from '../cmps/PhaseList';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { BoardMenu } from '../cmps/boardMenu/BoardMenu';\r\nimport { ColorMenu } from '../cmps/boardMenu/ColorMenu';\r\nimport { PhotoMenu } from '../cmps/boardMenu/PhotoMenu';\r\nimport {\r\n    MenuOutlined, PieChartOutlined,\r\n    // PersonAddOutlined  //TODO LATER WHEN ADD USER TO BOARD\r\n}\r\n    from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { BackgroundMenu } from '../cmps/boardMenu/BackgroundMenu';\r\nimport { Card } from '../cmps/Card';\r\nimport { BoardUserFilter } from '../cmps/BoardUserFilter'\r\nimport { socketService } from '../services/socketService';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService.js';\r\n//import { MembersEdit } from '../cmps/MembersEdit' //TODO LATER WHEN ADD USER TO BOARD\r\n\r\n\r\n\r\nclass _Board extends Component {\r\n\r\n    state = {\r\n        boardMenus: {\r\n            currentOpend: null,\r\n            menusState: {\r\n                mainMenu: false,\r\n                backgroundMenu: false,\r\n                colorMenu: false,\r\n                photoMenu: false\r\n            }\r\n        },\r\n        filteredByUser: null,\r\n        boardName: '',\r\n        isTitleOnEdit: false,\r\n        // isMembersEditShown: false //TODO LATER WHEN ADD USER TO BOARD\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n        this.openSocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socketService.off('board updated', this.getBoardById);\r\n        socketService.terminate();\r\n    }\r\n\r\n    openSocket = () => {\r\n        socketService.setup();\r\n        const id = this.props.match.params.id;\r\n        socketService.emit('open board socket', id);\r\n        socketService.on('board updated', this.getBoardById)\r\n\r\n    }\r\n\r\n\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n        this.setState({ boardName: this.props.board.name })\r\n    }\r\n\r\n    toggleMenu = (menuName) => {\r\n        const { boardMenus } = this.state;\r\n        const clonedMenus = JSON.parse(JSON.stringify(boardMenus));\r\n        //close open menu if their is\r\n        if (!menuName) { //menuName===null mean no menu should be open\r\n            clonedMenus.menusState[clonedMenus.currentOpend] = false;\r\n            clonedMenus.currentOpend = null;\r\n        } else {\r\n            if (clonedMenus.currentOpend != null)\r\n                clonedMenus.menusState[clonedMenus.currentOpend] = !clonedMenus.menusState[clonedMenus.currentOpend];\r\n            //open menu new menu\r\n            clonedMenus.menusState[menuName] = !clonedMenus.menusState[menuName];\r\n            //set currentOpend \r\n            clonedMenus.currentOpend = menuName;\r\n        }\r\n        this.setState({ boardMenus: clonedMenus }, () => {\r\n            if (this.state.boardMenus.currentOpend) window.addEventListener('keydown', this.handleKeyDown);\r\n            else window.removeEventListener('keydown', this.handleKeyDown)\r\n        });\r\n    }\r\n\r\n    handleNameChange = ({ target }) => {\r\n        const value = target.value;\r\n        this.setState({ boardName: value });\r\n    }\r\n\r\n\r\n    handleChangeBoardName = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const nameBeforeChange = this.state.boardName;\r\n        if (!this.state.boardName.trim()) return this.toggleTitleEdit();\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.UPDATE, TYPES.BOARD, { id: this.props.board._id, title: this.props.board.name },\r\n            `the name of the board from ${nameBeforeChange} to ${this.state.boardName}`);\r\n        boardClone.name = this.state.boardName;\r\n        this.props.updateBoard(boardClone);\r\n        this.toggleTitleEdit();\r\n    }\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    handleKeyDown = (ev) => {\r\n        if (ev.code === 'Escape') this.toggleMenu(null);\r\n    }\r\n    onInputChanged = async (name) => {\r\n        await this.setState({ filteredByUser: name })\r\n    }\r\n\r\n    toggleTitleEdit = () => {\r\n        this.setState(prevState => ({ isTitleOnEdit: !prevState.isTitleOnEdit }))\r\n    }\r\n\r\n    AddUserToBoard = async () => {\r\n        await this.props.queryUsers();\r\n        this.toggleProperty(\"isMembersEditShown\");\r\n    }\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { filteredByUser, isTitleOnEdit } = this.state;\r\n        // const {isMembersEditShown}  = this.state; TODO: FOR ADDING USER TO BOARD\r\n        const { board } = this.props;\r\n        if ((!board) || (!this.state)) return '';\r\n\r\n        const { mainMenu, backgroundMenu, colorMenu, photoMenu } = this.state.boardMenus.menusState;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n\r\n        return (\r\n            (!board) ? 'loading' : <main style={boardBg} className=\"board flex column grow\">\r\n                <section className=\"board-nav flex space-between align-center\">\r\n                    <div className=\"board-nav-controls flex align-center wrap\">\r\n                        {!isTitleOnEdit && <h4 onClick={this.toggleTitleEdit}\r\n                            className=\"board-title\">{board.name}</h4>}\r\n                        {isTitleOnEdit && <input className=\"board-title grow\" type=\"text\" name=\"txt\"\r\n                            onChange={(e) => this.handleNameChange(e)} spellCheck=\"false\" autoFocus\r\n                            onBlur={this.handleChangeBoardName} value={this.state.boardName}\r\n                            onKeyDown={this.handleKeyPress} />}\r\n                        <span className=\"board-nav-divider\"></span>\r\n                        <div className=\"board-members flex align-center\">\r\n                            {board.members && board.members.map((member) =>\r\n                                <MemberInitials key={member._id} member={member} />)}\r\n                        </div>\r\n                        {/* <div className=\"add-member\" onClick={this.AddUserToBoard}> TODO: ADD USERS TO BOARD!!!\r\n                            <PersonAddOutlined />\r\n\r\n                            {isMembersEditShown && <MembersEdit users={this.props.users} board={this.props.board}\r\n                                toggleProperty={this.toggleProperty} />}\r\n                        </div> */}\r\n\r\n                        <BoardUserFilter users={board.members} onInputChanged={this.onInputChanged} />\r\n                        <Link to={`/board/${board._id}/dashboard`}>\r\n                            <div className=\"nav-btn  flex align-center\">\r\n                                <PieChartOutlined className=\"nav-icon\" />\r\n                                <span className=\"btn-text\">Statistics</span>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"nav-btn flex align-center\" onClick={() => this.toggleMenu(\"mainMenu\")}>\r\n                        <MenuOutlined />\r\n                    </div>\r\n                    <BoardMenu isMenuShown={mainMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <BackgroundMenu isMenuShown={backgroundMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <ColorMenu isMenuShown={colorMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <PhotoMenu isMenuShown={photoMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                </section>\r\n                <section className=\"board-content flex grow\">\r\n                    <PhaseList filteredByUser={filteredByUser} />\r\n                </section>\r\n                {this.props.card && <Card cardId={this.props.card.id} />}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card,\r\n        user: state.trelloUser.user,\r\n        //users: state.trelloUser.users //TODO LATER WHEN ADD USER TO BOARD\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    //queryUsers //TODO LATER WHEN ADD USER TO BOARD\r\n\r\n}\r\n\r\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nclass _Home extends Component {\r\n    render() {\r\n        return (\r\n            <main className=\"home-container flex\">\r\n                <div className=\"text-area flex column align-start\">\r\n                    <h1>Don't Waste Papers</h1>\r\n                    <h3><span className=\"logo\">Flowz</span>\r\n                     the project managment software that keep teams going and Collaborate</h3>\r\n\r\n                    <Link to=\"/board/5ecbc8edcb39d7f5494f8d40\"> <span className=\"btn-home\">Get Started</span></Link>\r\n                </div>\r\n\r\n\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(_Home);\r\n","import { httpService } from './httpService'\r\nexport const OPERETIONS = {\r\n    ADD: 'Add',\r\n    UPDATE: 'Updated',\r\n    DELETE: 'Delete'\r\n}\r\nexport const TYPES = {\r\n    User: 'User'\r\n}\r\n\r\nasync function query() {\r\n    const users = await httpService.get(`user`);\r\n    return users;\r\n}\r\n\r\nasync function getById(id) {\r\n    const user = await httpService.get(`user/${id}`);\r\n    return user\r\n}\r\n\r\nasync function getByEmail(email) {\r\n    const user = await httpService.get(`user/${email}`);\r\n    return user\r\n}\r\n\r\nasync function login(userCred) {\r\n    const user = await httpService.post('auth/login', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n    sessionStorage.setItem('user', JSON.stringify(user))\r\n    return user;\r\n}\r\nasync function logout() {\r\n    await httpService.post('auth/logout');\r\n    sessionStorage.clear();\r\n}\r\n\r\nasync function signup(userCred) {\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nasync function update(updateuser) {\r\n    const user = await httpService.put('user', updateuser);\r\n    return user;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`user/${id}`);\r\n}\r\n\r\nfunction getUserCopy(user) {\r\n    return JSON.parse(JSON.stringify(user));\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const userService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    signup,\r\n    update,\r\n    makeId,\r\n    getUserCopy,\r\n    getByEmail,\r\n    login,\r\n    logout\r\n}","import { userService } from '../../services/userService';\r\nexport const LOAD_USER = 'LOAD_USER';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\nexport const QUERY_USERS = 'QUERY_USERS'\r\nexport const CREATE_USER = 'CREATE_USER';\r\n\r\nexport function login(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.login(userCreds);\r\n        dispatch(setUser(user));\r\n    };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.signup(userCreds);\r\n        dispatch(setUser(null)); // since login is not a part of sihnup we put null user redirect to login page\r\n        dispatch(addUser(user));\r\n    };\r\n}\r\n\r\nexport function logout(userCreds) {\r\n    return async dispatch => {\r\n        await userService.logout(userCreds);\r\n        dispatch(setUser(null));\r\n    };\r\n}\r\nexport function setUser(user) {\r\n    return {\r\n        type: 'SET_USER',\r\n        user\r\n    };\r\n}\r\n\r\nexport function addUser(user) {\r\n    return {\r\n        type: 'ADD_USER',\r\n        user\r\n    };\r\n}\r\n\r\nexport function removeUser(userId) {\r\n    return dispatch => {\r\n        userService.remove(userId)\r\n            .then(() => dispatch({ type: REMOVE_USER, userId }));\r\n    }\r\n}\r\n\r\nexport function queryUsers() {\r\n    return async dispatch => {\r\n        userService.query()\r\n            .then(users => dispatch({ type: QUERY_USERS, users }));\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../store/actions/userActions'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass _SignIn extends Component {\r\n    state = {\r\n\r\n        loginCred: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        msg: ''\r\n    }\r\n\r\n    loginHandleChange = ev => {\r\n        const { name, value } = ev.target;\r\n        this.setState(prevState => ({\r\n            loginCred: {\r\n                ...prevState.loginCred,\r\n                [name]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n\r\n    doLogin = async ev => {\r\n        ev.preventDefault();\r\n        const { email, password } = this.state.loginCred;\r\n        if (!email || !password) {\r\n            this.setState({ msg: 'Please enter correct user/password' });\r\n        } else {\r\n            const userCreds = { email, password };\r\n            try {\r\n                this.props.login(userCreds);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n            this.setState({ loginCred: { email: '', password: '' }, msg: '' }, () => { this.props.history.push('/boards') });\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"sign-in\">\r\n                <p>{this.state.msg}</p>\r\n                <form className=\"sign-in-form\" onSubmit={this.doLogin} noValidate>\r\n\r\n\r\n                    <TextField onChange={this.loginHandleChange}\r\n                        className=\"signin-email\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n\r\n                    <TextField onChange={this.loginHandleChange}\r\n                        className=\"signin-password\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"sign-in-submit-btn\"\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n\r\n\r\n                </form>\r\n\r\n\r\n                <a href=\"/signUp\" className=\"sign-in-link\">\r\n                    Dont have an account? Sign Up\r\n                    </a>\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.trelloUser.userReducer\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    login\r\n}\r\n\r\nexport const SignIn = connect(mapStateToProps, mapDispatchToProps)(_SignIn);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../store/actions/userActions'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nclass _SignUp extends Component {\r\n    state = {\r\n        msg: '',\r\n        signupCred: {\r\n            email: '',\r\n            password: '',\r\n            fullName: ''\r\n        }\r\n    }\r\n\r\n    signupHandleChange = ev => {\r\n        const { name, value } = ev.target;\r\n        this.setState(prevState => ({\r\n            signupCred: {\r\n                ...prevState.signupCred,\r\n                [name]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n    doSignup = async ev => {\r\n        ev.preventDefault();\r\n        const { email, password, fullName } = this.state.signupCred;\r\n        if (!email || !password || !fullName) {\r\n            return this.setState({ msg: 'All inputs are required!' });\r\n        }\r\n        const signupCreds = { email, password, fullName };\r\n        this.props.signup(signupCreds);\r\n        this.setState({ signupCred: { email: '', password: '', fullName: '' } });\r\n        this.props.history.push('/login');\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"sign-up\">\r\n\r\n                <p>{this.state.msg}</p>\r\n\r\n                <form className=\"sign-up-form\" onSubmit={this.doSignup} noValidate>\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-full-name\"\r\n                        autoComplete=\"fname\"\r\n                        name=\"fullName\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fullName\"\r\n                        label=\"Full Name\"\r\n                        autoFocus\r\n                    />\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-email\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-password\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n\r\n                    <Button\r\n\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"sign-up-submit-btn\"\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                </form>\r\n\r\n\r\n                {/* <a  className=\"sign-in-link\">\r\n                    Already have an account? Sign in\r\n                    </a> */}\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.trelloUser.userReducer\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n    signup\r\n}\r\n\r\nexport const SignUp = connect(mapStateToProps, mapDispatchToProps)(_SignUp);\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { boardService } from '../services/boardService'\r\nimport { HomeOutlined, DashboardOutlined, AccountTreeOutlined, Add, Close } from '@material-ui/icons';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, addBoard } from '../store/actions/boardActions';\r\nimport { logout, login } from '../store/actions/userActions'\r\n\r\nclass _MainNav extends Component {\r\n\r\n\r\n    state = {\r\n        isCreateBoardMenuShown: false,\r\n        newBoardName: '',\r\n        newBoardColor: '#61acca'\r\n    }\r\n\r\n\r\n    handleChangeColor = async ({ target }) => {\r\n\r\n        const boardColor = target.value;\r\n        await this.setState({ newBoardColor: boardColor });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ newBoardName: value })\r\n    }\r\n\r\n    toggleAddBoard = () => {\r\n        this.setState(prevState => ({ isCreateBoardMenuShown: !prevState.isCreateBoardMenuShown }))\r\n    }\r\n\r\n    createNewBoard = async () => {\r\n        let boardName;\r\n        if (!this.state.newBoardName.trim()) boardName = 'New Board';\r\n        else boardName = this.state.newBoardName;\r\n        const newBoard = boardService.createNewBoard(boardName, this.state.newBoardColor, this.props.user);\r\n        await this.props.addBoard(newBoard);\r\n        history.push(`/board/${this.props.board._id}`)\r\n        this.setState({ isCreateBoardMenuShown: false, newBoardName: '' })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isCreateBoardMenuShown, newBoardName, newBoardColor } = this.state\r\n        const { user } = this.props;\r\n        if (!this.state) return ''\r\n        return (\r\n            <header className=\"main-header flex space-between\">\r\n                <nav className=\"flex align-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <HomeOutlined className=\"btn-icon\" />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/boards\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <DashboardOutlined className=\"btn-icon\" />\r\n                            <span className=\"btn-text\">Boards</span>\r\n                        </div>\r\n                    </Link>\r\n                </nav>\r\n\r\n                <div className=\"nav-center flex align-center justify-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"logo flex align-center\">\r\n                            <AccountTreeOutlined className=\"btn-icon\" />\r\n                            <span className=\"logo-text\">Flowz</span>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <nav className=\"right-nav flex flex-end align-center\">\r\n                    <div className=\"btn-main-nav flex align-center\" onClick={this.toggleAddBoard}>\r\n                        <Add className=\"btn-icon\" />\r\n                    </div>\r\n                    {isCreateBoardMenuShown && <div className=\"create-board-menu  flex column\">\r\n                        <div className=\"create-board-header flex align-center\">\r\n                            <h5 className=\"grow\">New Board</h5>\r\n                            <Close className=\"close-create-board-menu\" onClick={this.toggleAddBoard} />\r\n                        </div>\r\n                        <div className=\"create-board-btns flex column\">\r\n                            <div className=\"color-container\">\r\n\r\n                                <label className={\"rgb(81, 152, 57)\" === newBoardColor ? \"color-preview green selected\" : \"color-preview green\"}  >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"green\" value=\"rgb(81, 152, 57)\" /></label>\r\n\r\n                                <label className={\"#d29034\" === newBoardColor ? \"color-preview orange selected\" : \"color-preview orange\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"orange\" value=\"#d29034\" /></label>\r\n\r\n                                <label className={\"rgb(0, 121, 191)\" === newBoardColor ? \"color-preview blue selected\" : \"color-preview blue\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"blue\" value=\"rgb(0, 121, 191)\" /></label>\r\n\r\n                                <label className={\"rgb(176, 70, 50)\" === newBoardColor ? \"color-preview red selected\" : \"color-preview red\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"red\" value=\"rgb(176, 70, 50)\" /></label>\r\n\r\n                                <label className={\"rgb(137, 96, 158)\" === newBoardColor ? \"color-preview purple selected\" : \"color-preview purple\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"purple\" value=\"rgb(137, 96, 158)\" /></label>\r\n\r\n                                <label className={\"rgb(205, 90, 145)\" === newBoardColor ? \"color-preview pink selected\" : \"color-preview pink\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"pink\" value=\"rgb(205, 90, 145)\" /></label>\r\n\r\n                                <label className={\"rgb(75, 191, 107)\" === newBoardColor ? \"color-preview light-green selected\" : \"color-preview light-green\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"light-green\" value=\"rgb(75, 191, 107)\" /></label>\r\n\r\n                                <label className={\"rgb(73, 169, 215)\" === newBoardColor ? \"color-preview turquise selected\" : \"color-preview turquise\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"turquise\" value=\"rgb(73, 169, 215)\" /></label>\r\n                            </div>\r\n                            <input className=\"board-name-input\" type=\"text\" onChange={this.handleChange} placeholder=\"Your Board's name...\" value={newBoardName} />\r\n                            <button className=\"create-board-btn\" onClick={this.createNewBoard} >Create a new Board</button>\r\n                        </div>\r\n                    </div>}\r\n                    {(user && user.fullName !== \"Guest\") &&\r\n                        <div className=\"logout-btn btn-main-nav flex align-center\">\r\n                            <span className=\"btn-text\" onClick={this.props.logout}>Logout</span>\r\n                        </div>}\r\n                    {(user) && <span className=\"logged-in flex align-center\"><MemberInitials member={user} /></span>}\r\n\r\n                    {user && user.fullName === \"Guest\" && <div className=\"login-btn btn-main-nav flex align-center\">\r\n                        <Link to=\"/login\"> <span className=\"btn-text\">Login</span></Link>\r\n                    </div>}\r\n                </nav>\r\n            </header >\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    addBoard,\r\n    logout,\r\n    login\r\n}\r\n\r\n\r\nexport const MainNav = connect(mapStateToProps, mapDispatchToProps)(_MainNav)\r\n\r\n","import React, { Component } from 'react'\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, queryBoards } from '../store/actions/boardActions';\r\n\r\nclass _Boards extends Component {\r\n    componentDidMount() {\r\n\r\n        this.props.queryBoards();\r\n    }\r\n\r\n    handleLoadBoard = (id) => {\r\n        this.props.loadBoard(id)\r\n        history.push(`/board/${id}`)\r\n    }\r\n\r\n    render() {\r\n\r\n        const { boards } = this.props\r\n        return (\r\n            <section className=\"boards-page\">\r\n                <div className='boards' >\r\n                    <h1 className=\"boards-title flex\">Boards</h1>\r\n                    <div className=\"boards-container\">\r\n                        {!boards && <p>Your boards will appear here</p>}\r\n                        {boards && boards.map((board, idx) =>\r\n                            <div className={`board-item board-item${idx}`} key={idx}\r\n                                onClick={() => this.handleLoadBoard(board._id)}\r\n                                style={board.imgUrl ?\r\n                                    { backgroundImage: `url(${board.imgUrl})`, backgroundSize: 'cover' } : { backgroundColor: board.bgColor }} >\r\n                                {<h3>{board.name}</h3>}\r\n                            </div>)}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        boards: state.trelloApp.boards,\r\n        user: state.trelloApp.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    queryBoards\r\n}\r\n\r\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport { connect } from 'react-redux';\r\nimport { history } from '../history'\r\nimport { loadBoard, } from '../store/actions/boardActions';\r\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\n\r\nconst bgColors =\r\n    [\r\n        '#273d5d',\r\n        '#C492B1',\r\n        '#00ca78',\r\n        '#a8eb12',\r\n\r\n        '#ee6352',\r\n        '#DA4167',\r\n        '#ffb5d7',\r\n        '#72709e',\r\n\r\n        '#F6AE2D',\r\n        '#C9E3AC',\r\n        '#9580b0',\r\n        '#b991bf',\r\n        '#dda2cc',\r\n\r\n\r\n    ];\r\nconst hovColors =\r\n    [\r\n\r\n        '#273d5dc2',\r\n        '#C492B1c2',\r\n        '#00ca78c2',\r\n        '#a8eb12c2',\r\n\r\n        '#ee6352c2',\r\n        '#DA4167c2',\r\n        '#ffb5d7c2',\r\n        '#72709ec2',\r\n\r\n        '#F6AE2Dc2',\r\n        '#C9E3ACc2',\r\n        '#9580b0c2',\r\n        '#b991bfc2',\r\n        '#dda2ccc2',\r\n\r\n    ];\r\n\r\n\r\nclass _Dashboard extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n\r\n\r\n    }\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    getSprintProgress = () => {\r\n\r\n        const { board } = this.props;\r\n        var getSprintProgressMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.checkList.forEach(checkListItem => {\r\n                    if (checkListItem.isDone) {\r\n                        (!getSprintProgressMap[\"Completed\"]) ? getSprintProgressMap[\"Completed\"] = 1 : getSprintProgressMap[\"Completed\"] += 1;\r\n                    } else {\r\n                        (!getSprintProgressMap[\"In Progress\"]) ? getSprintProgressMap[\"In Progress\"] = 1 : getSprintProgressMap[\"In Progress\"] += 1;\r\n                    }\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(getSprintProgressMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Sprint Progress\",\r\n                data: [...Object.values(getSprintProgressMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTaskPerPhaseDistribution = () => {\r\n        const { board } = this.props;\r\n        var phaseTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n\r\n                (!phaseTaskMap[phase.name]) ? phaseTaskMap[phase.name] = 1 : phaseTaskMap[phase.name] += 1;\r\n\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n\r\n                ...Object.keys(phaseTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks Per Phase Distribution\",\r\n                data: [...Object.values(phaseTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n    getTaskByLables = () => {\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.labels.forEach(label => {\r\n                    (!devTaskMap[label.txt]) ? devTaskMap[label.txt] = 1 : devTaskMap[label.txt] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks by Label\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTasksPerDevloperData() {\r\n\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.assignedTo.forEach(member => {\r\n                    (!devTaskMap[member.fullName]) ? devTaskMap[member.fullName] = 1 : devTaskMap[member.fullName] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks Per Developer\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n\r\n    }\r\n\r\n    goBack = () => {\r\n        history.push(`/board/${this.props.match.params.id}`);\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board) return 'loading';\r\n        const tPerDevloper = this.getTasksPerDevloperData();\r\n        const taskPerPhaseDistribution = this.getTaskPerPhaseDistribution();\r\n        const tasksByLabels = this.getTaskByLables()\r\n        const sprintProgress = this.getSprintProgress();\r\n        return (\r\n\r\n            <div className=\"dashboard grow\">\r\n                <div className=\"btn-back flex space-between align-center\" onClick={this.goBack} >\r\n                    <ArrowBackIosOutlinedIcon />\r\n                    <span>Back</span>\r\n                </div>\r\n                <section className=\"chart-cont flex column justify-center align-center\">\r\n                    <article className=\"chart sprint-progress flex justify-center column align-center\">\r\n                        <h2>Sprint Progress</h2>\r\n                        <Pie className=\"chart-stats\" data={sprintProgress} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-per-devloper flex column justify-center align-center\">\r\n                        <h2>Tasks Per Developer</h2>\r\n                        <Bar className=\"chart-stats\" data={tPerDevloper} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                    <article className=\"chart tasks-per-phase flex column justify-center align-center\">\r\n                        <h2>Tasks Per Phase</h2>\r\n                        <Doughnut className=\"chart-stats\" data={taskPerPhaseDistribution} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-by-lables flex column justify-center align-center\">\r\n                        <h2>Tasks By Label</h2>\r\n                        <Bar className=\"chart-stats\" data={tasksByLabels} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                </section>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(_Dashboard)\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { history } from './history';\r\nimport { Board } from './pages/Board';\r\nimport { Home } from './pages/Home';\r\nimport { SignIn } from './pages/SignIn';\r\nimport { SignUp } from './pages/SignUp';\r\nimport { Card } from './cmps/Card';\r\nimport { MainNav } from './cmps/MainNav';\r\nimport { Boards } from './pages/Boards';\r\nimport { Dashboard } from './pages/Dashboard';\r\n\r\nexport function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router history={history}>\r\n        <MainNav />\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n          <Route path=\"/login\" component={SignIn} exact />\r\n          <Route path=\"/signup\" component={SignUp} exact />\r\n          <Route path=\"/board/:boardId/card/:cardId\" component={Card} exact />\r\n          <Route path=\"/board/:id/dashboard\" component={Dashboard} />\r\n          <Route path=\"/boards\" component={Boards} exact />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_BOARD, QUERY_BOARDS, REMOVE_BOARD, ADD_BOARD, LOAD_BOARD } from '../actions/boardActions';\r\nimport { socketService } from '../../services/socketService';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    boards: [],\r\n    board: null,\r\n    card: null\r\n}\r\n\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUERY_BOARDS:\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case LOAD_BOARD:\r\n\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            };\r\n        case ADD_BOARD:\r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            };\r\n        case UPDATE_BOARD:\r\n            socketService.emit('board updated', action.board._id)\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            }\r\n        case REMOVE_BOARD:\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            };\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                card: action.card\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\n","//import { UPDATE_USER, QUERY_USERS, SET_USER, USER_REMOVE, ADD_USER, LOAD_USER } from '../actions/userActions';\r\nlet localLoggedinUser = null;\r\nconst GUEST_USER = {\r\n    \"_id\": \"5eccd4e1cb39d7f54947fd7e\",\r\n    \"fullName\": \"Guest\",\r\n    \"email\": \"noemail@no.com\",\r\n    \"img\": \"https://img.icons8.com/plasticine/2x/user.png\"\r\n}\r\n\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\nelse localLoggedinUser = GUEST_USER;\r\n\r\nconst initialState = {\r\n    users: [],\r\n    user: localLoggedinUser\r\n}\r\n\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_USER': {\r\n            const logedInUser = (!action.user) ? localLoggedinUser : action.user\r\n            return { ...state, user: logedInUser };\r\n        }\r\n        case 'USER_REMOVE':\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(user => user._id !== action.userId)\r\n            };\r\n        case 'SET_USERS':\r\n            return { ...state, users: action.users };\r\n\r\n\r\n        case 'ADD_USER':\r\n            return {\r\n                ...state,\r\n                users: [...state.users, action.user]\r\n            };\r\n        case 'QUERY_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n\r\n}\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { boardReducer } from './boardReducer'\r\nimport { userReducer } from './userReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    trelloApp: boardReducer,\r\n    trelloUser: userReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './style/global.scss';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}