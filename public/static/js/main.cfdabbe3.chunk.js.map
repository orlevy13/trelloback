{"version":3,"sources":["services/unsplashService.js","style/img/collage.jpg","style/img/colors.jpg","history.js","services/httpService.js","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/AddCard.jsx","cmps/CardLabels.jsx","cmps/DueBadge.jsx","cmps/MemberInitials.jsx","cmps/LabelEdit.jsx","cmps/AddLabel.jsx","cmps/LabelsEdit.jsx","services/userService.js","store/actions/userActions.js","cmps/MemberEdit.jsx","cmps/MembersEdit.jsx","cmps/DueDateEdit.jsx","cmps/CardMenu.jsx","cmps/CardPreview.jsx","cmps/PhasePreview.jsx","cmps/PhaseList.jsx","cmps/Activity.jsx","cmps/Activities.jsx","cmps/boardMenu/BoardMenu.jsx","cmps/boardMenu/ColorMenu.jsx","cmps/boardMenu/PhotoMenu.jsx","cmps/boardMenu/BackgroundMenu.jsx","cmps/CardHeader.jsx","cmps/CardDesc.jsx","cmps/ChecklistItem.jsx","cmps/CardChecklist.jsx","services/cloudinaryService.js","cmps/CardImage.jsx","cmps/Card.jsx","cmps/BoardUserFilter.jsx","pages/Board.jsx","pages/Home.jsx","pages/SignIn.jsx","pages/SignUp.jsx","cmps/MainNav.jsx","pages/Boards.jsx","pages/Dashboard.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/userReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["global","fetch","unsplash","Unsplash","accessKey","unsplashService","getListPhotos","perPage","page","_getRandomInt","photos","listPhotos","then","res","json","min","max","Math","ceil","floor","random","module","exports","history","createBrowserHistory","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","console","dir","response","push","OPERETIONS","TYPES","CARD","PHASE","Board","filter","boards","id","board","addboard","updateboard","makeId","length","txt","possible","i","charAt","getPhaseIdxByCardId","cardId","phaseLists","findIndex","phase","cards","some","card","getCardIdxById","phaseIdx","socket","boardService","query","getById","remove","add","update","getBoardCopy","JSON","parse","stringify","getNewCard","partialCard","bgColor","desc","dueDate","createdAt","Date","now","labels","checkList","assignedTo","attachments","getNewPhase","name","getSortedPhase","sortBy","sort","card1","card2","title","localeCompare","addActivity","user","operation","type","object","activity","at","activities","unshift","createNewBoard","loggedInUser","creator","members","isLabelTxtShown","imgUrl","getNewLabel","color","getCardById","cardIdx","replaceCardInBoard","modifiedCard","getBoardStats","reduce","acc","forEach","cardsCount","unassigned","addedToday","socketService","setup","io","terminate","on","eventName","cb","off","emit","loadBoard","dispatch","updateBoard","updatedBoard","_id","setCard","_AddCard","state","handleChange","target","setState","value","onAddCard","ev","preventDefault","trim","boardCopy","props","phaseId","newCard","bottomCard","scrollIntoView","behavior","handleClick","addCardBtn","cardNameInput","form","dispatchEvent","Event","cancelable","toggleAddCardShown","this","isAddCardShown","addEventListener","submitOnEnter","window","removeEventListener","which","shiftKey","Fragment","className","onSubmit","required","autoFocus","autoComplete","onChange","spellCheck","ref","el","placeholder","onClick","Close","Component","mapDispatchToProps","AddCard","connect","trelloApp","trelloUser","_CardLabels","toggleIsLabelTxtShown","stopPropagation","getUpdatedLabels","label","foundLabel","find","boardLabel","labelClassName","map","style","backgroundColor","key","CardLabels","DueBadge","displayDate","moment","format","isDueClose","AccessTime","fontSize","MemberInitials","firstLastName","initials","member","fullName","split","str","join","slice","img","toUpperCase","LabelEdit","toggleEditMode","isLabelOnCard","lbl","toggleLabelOnCard","Check","CreateOutlined","AddLabel","handleChangeColor","handleSubmit","addLabel","toggleIsAddLabelShown","Clear","_LabelsEdit","editLabel","isAddLabelShown","hideLabelsEdit","code","toggleProperty","prevState","saveLabel","editedLabel","partialLabel","labelToSave","removeLabel","updatedLabels","Add","LabelsEdit","users","email","userCred","_handleLogin","sessionStorage","setItem","clear","updateuser","userService","signup","getUserCopy","getByEmail","login","logout","userCreds","setUser","addUser","MemberEdit","isMemberOnObject","toggleMember","activeObject","activeObjectName","mmbr","_MembersEdit","hideMembersEdit","queryUsers","membersToDisplay","toLowerCase","includes","MembersEdit","DueDateEdit","hideDueDateEdit","handleDateChange","date","_d","getTime","handleSave","changeDueDate","removeDueDate","DateTimePicker","disablePast","views","minDateMessage","_CardMenu","isLabelEditShown","isMembersEditShown","isDueDateEditShown","hideMenu","toggleIsMenuShown","onDelete","splice","onChangeTitle","upadtedBoard","newDate","property","titleInput","cardMenu","block","inline","onMouseDown","cols","rows","LabelOutlined","PersonOutlineOutlined","DeleteForeverOutlined","CardMenu","_CardPreview","isMenuShown","pageX","pageY","checklistDoneCount","item","isDone","checklistBgc","checklistColor","draggableId","index","provided","snapshot","draggableProps","onContextMenu","dragHandleProps","innerRef","alt","src","AttachmentOutlined","CheckBoxOutlined","React","CardPreview","_PhasePreview","isInputShown","isSortShown","newPhaseName","toggleInputShown","hideInput","toggleMenuShown","showAddCard","toggleIsSortShown","sortListBy","sortedPhase","onDeletePhase","isDropAnimating","onBlur","MoreHoriz","droppableId","droppableProps","opacity","PhasePreview","_PhaseList","newListName","phaseListToShow","removeEventListeners","addEventListeners","listNameInput","submitBtn","onAddPhase","newPhase","listForm","onDragEnd","result","destination","source","newPhasesOrder","movingPhase","srcPhase","dstPhase","movingCard","getFilteredPhaseLists","filteredByUser","prevProps","searchedName","cloneBoard","direction","PhaseList","_Activity","dynamicActivity","userElmemnt","elmentType","OpenByObjectType","fromNow","allowOpenCard","boardClone","currPhase","onCloseMenu","Activity","_Activities","onEnterDown","handleSaveBoard","showCommentBox","ListOutlined","onKeyDown","Activities","BoardMenu","shownClass","boardBg","CloseOutlined","onToggleMenu","_ColorMenu","changeBoardColor","clonedBoard","ArrowBackIosOutlined","ColorMenu","_PhotoMenu","imgs","changeBoardImg","thumbUrl","urls","thumb","regularUrl","regular","fullUrl","full","credit","links","html","userName","href","PhotoMenu","BackgroundMenu","require","_CardHeader","onPhase","isTitleOnEdit","toggleInput","autoGrow","elTextarea","height","scrollHeight","backToboard","e","keyCode","blur","onFocus","handleKeyPress","autoCorrect","CardHeader","_CardDesc","CardDesc","ChecklistItem","idx","todo","checked","_CardChecklist","todoText","onAdd","progress","checklistTitle","progressBarUpdate","doneTodos","currVal","addTodo","newTodo","clone","updatedCards","phaseIndex","toggleAdd","field","cloneChkList","handleFocus","select","progressBgc","PlaylistAddCheck","width","CardChecklist","UPLOAD_URL","formData","FormData","append","files","post","error","cloudinaryService","uploadImg","uploadRawAttachment","CardImage","isImgLoading","removeImgUrl","loadingMsg","msg","secondaryColor","_Card","cardActivities","hideCard","getActivities","limit","addCheckList","cloneCard","removeMemberFromCard","onUploadImg","removeCard","PermIdentity","Schedule","htmlFor","CropOriginal","Card","BoardUserFilter","list","event","onInputChanged","_Board","boardMenus","currentOpend","menusState","mainMenu","backgroundMenu","colorMenu","photoMenu","boardName","loadCardById","match","params","openSocket","getBoardById","toggleMenu","menuName","clonedMenus","handleKeyDown","handleNameChange","handleChangeBoardName","nameBeforeChange","BOARD","PersonAddOutlined","to","PieChartOutlined","MenuOutlined","_Home","Home","_SignIn","loginCred","password","loginHandleChange","doLogin","noValidate","TextField","variant","fullWidth","Button","SignIn","userReducer","_SignUp","signupCred","signupHandleChange","doSignup","signupCreds","log","SignUp","_MainNav","isCreateBoardMenuShown","newBoardName","newBoardColor","boardColor","toggleAddBoard","newBoard","addBoard","HomeOutlined","DashboardOutlined","AccountTreeOutlined","addedBoard","MainNav","_Boards","handleLoadBoard","queryBoards","backgroundImage","backgroundSize","Boards","bgColors","hovColors","_Dashboard","getSprintProgress","getSprintProgressMap","checkListItem","Object","keys","datasets","values","hoverBackgroundColor","getTaskPerPhaseDistribution","phaseTaskMap","getTaskByLables","devTaskMap","goBack","tPerDevloper","getTasksPerDevloperData","taskPerPhaseDistribution","tasksByLabels","sprintProgress","boardStats","options","scales","yAxes","ticks","beginAtZero","legend","display","Dashboard","App","path","component","exact","Boolean","location","hostname","initialState","localLoggedinUser","rootReducer","combineReducers","action","boardId","logedInUser","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","utils","MomentUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfdabbe3.chunk.js","sourcesContent":["import fetch from 'node-fetch';\r\nimport Unsplash from 'unsplash-js';\r\nglobal.fetch = fetch;\r\nconst unsplash = new Unsplash({ accessKey: \"8ZH8zzN8CDDrZJWGYhpPmzEreLvOZ6WRPVTgnEH_6Ac\" });\r\n\r\n\r\nfunction getListPhotos(perPage = 14) {\r\n    const page = _getRandomInt(1, 5)\r\n    return unsplash.photos.listPhotos(page, perPage, \"popular\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const unsplashService = {\r\n    getListPhotos\r\n}\r\nfunction _getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/collage.48948499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/colors.864f4df1.jpg\";","import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();\r\n","import { history } from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/';\r\n\r\nconst axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.dir(err);\r\n        // if (err.response && err.response.status === 401) {\r\n        if (err.response) {\r\n            history.push('/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","import { httpService } from './httpService';\r\nexport const OPERETIONS = {\r\n    ADD: 'added',\r\n    UPDATE: 'updated',\r\n    DELETE: 'deleted'\r\n}\r\nexport const TYPES = {\r\n    CARD: 'a card',\r\n    PHASE: 'a phase',\r\n    Board: 'a board'\r\n}\r\n\r\n\r\n\r\nasync function query(filter) {\r\n    var queryString = '';\r\n    // if (filter) {\r\n    //     if (filter.inStock !== '') queryString = `?inStock=${filter.inStock}`;\r\n    //     if (filter.type !== '') (queryString === '') ? queryString = `?type=${filter.type}` : queryString += `&type=${filter.type}`;\r\n    //     if (filter.name !== '') (queryString === '') ? queryString = `?q=${filter.name}` : queryString += `&q=${filter.name}`;\r\n    // }\r\n    const boards = await httpService.get(`board/${queryString}`);\r\n    return boards;\r\n}\r\n\r\nasync function getById(id) {\r\n    const board = await httpService.get(`board/${id}`);\r\n    return board\r\n}\r\n\r\nasync function add(addboard) {\r\n\r\n    const board = await httpService.post(`board`, addboard);\r\n    return board;\r\n}\r\n\r\nasync function update(updateboard) {\r\n    const board = await httpService.put('board', updateboard);\r\n    return board;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`board/${id}`);\r\n}\r\n\r\nfunction getBoardCopy(board) {\r\n    return JSON.parse(JSON.stringify(board));\r\n}\r\n\r\nfunction getNewCard(partialCard) {\r\n    return {\r\n        ...partialCard,//this currently has only a title\r\n        id: makeId(),\r\n        bgColor: '',\r\n        desc: '',\r\n        dueDate: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        checkList: [],\r\n        assignedTo: [],\r\n        attachments: []\r\n    }\r\n}\r\n\r\nfunction getNewPhase(name) {\r\n    return {\r\n        id: makeId(),\r\n        name,\r\n        desc: '',\r\n        cards: []\r\n    }\r\n}\r\n\r\nfunction addActivity(board, user, operation, type, object, desc = null) {\r\n    const activity = {\r\n        at: Date.now(),\r\n        operation,\r\n        user,\r\n        type,\r\n        object,\r\n        desc\r\n    }\r\n    board.activities.unshift(activity);\r\n}\r\n\r\nfunction getSortedPhase(sortBy, phase) {\r\n    if (sortBy === 'title') {\r\n        return phase.cards.sort((card1, card2) => card1.title.localeCompare(card2.title))\r\n    } else if (sortBy === 'firstCreated') {\r\n        return phase.cards.sort((card1, card2) => card1.createdAt - card2.createdAt);\r\n    } else return phase.cards.sort((card1, card2) => card2.createdAt - card1.createdAt);\r\n}\r\n\r\nfunction createNewBoard(name, bgColor, loggedInUser) {\r\n    const _board = {\r\n\r\n        name: name,\r\n        bgColor: bgColor,\r\n        createdAt: Date.now(),\r\n        creator: loggedInUser,\r\n        members: [loggedInUser],\r\n        desc: null,\r\n        activities: [],\r\n        phaseLists: [],\r\n        labels: [],\r\n        isLabelTxtShown: false,\r\n        imgUrl: null\r\n    }\r\n    return _board;\r\n}\r\n\r\nfunction getNewLabel({ txt, color }) {\r\n    return {\r\n        txt,\r\n        color,\r\n        id: makeId(),\r\n    }\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nfunction getPhaseIdxByCardId(board, cardId) {\r\n    return board.phaseLists.findIndex(phase => phase.cards.some(card => card.id === cardId))\r\n}\r\n\r\nfunction getCardIdxById(board, phaseIdx, cardId) {\r\n    return board.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n}\r\n\r\nfunction getCardById(board, cardId) {\r\n    const phaseIdx = getPhaseIdxByCardId(board, cardId);\r\n    const cardIdx = getCardIdxById(board, phaseIdx, cardId);\r\n    return board.phaseLists[phaseIdx].cards[cardIdx];\r\n}\r\n\r\nfunction replaceCardInBoard(board, modifiedCard) {\r\n    const phaseIdx = getPhaseIdxByCardId(board, modifiedCard.id);\r\n    const cardIdx = getCardIdxById(board, phaseIdx, modifiedCard.id);\r\n    board.phaseLists[phaseIdx].cards[cardIdx] = modifiedCard;\r\n    return board;\r\n}\r\n\r\nfunction getBoardStats(board) {\r\n    const ONE_DAY = 1000 * 60 * 60 * 24;\r\n    const stats = board.phaseLists.reduce((acc, phase) => {\r\n        if (phase.cards.length) {\r\n            phase.cards.forEach(card => {\r\n                if (acc.cardsCount) acc.cardsCount++;\r\n                else acc.cardsCount = 1;\r\n                if (!card.assignedTo.length) {\r\n                    if (acc.unassigned) acc.unassigned++;\r\n                    else acc.unassigned = 1;\r\n                }\r\n                if ((Date.now() - card.createdAt) < ONE_DAY) {\r\n                    if (acc.addedToday) acc.addedToday++;\r\n                    else acc.addedToday = 1;\r\n                }\r\n            })\r\n        }\r\n        return acc;\r\n    }, {})\r\n    return stats;\r\n}\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    add,\r\n    update,\r\n    makeId,\r\n    getBoardCopy,\r\n    getNewCard,\r\n    getNewPhase,\r\n    getSortedPhase,\r\n    addActivity,\r\n    createNewBoard,\r\n    getNewLabel,\r\n    getPhaseIdxByCardId,\r\n    getCardIdxById,\r\n    getCardById,\r\n    replaceCardInBoard,\r\n    getBoardStats\r\n\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport const socketService = {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import { boardService } from '../../services/boardService'\r\nimport { socketService } from '../../services/socketService'\r\nexport const LOAD_BOARD = 'LOAD_BOARD';\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const ADD_BOARD = 'ADD_BOARD';\r\nexport const REMOVE_BOARD = 'REMOVE_BOARD';\r\nexport const QUERY_BOARDS = 'QUERY_BOARDS'\r\nexport const CREATE_BOARD = 'CREATE_BOARD';\r\n\r\nexport function queryBoards(filter) {\r\n    return dispatch => {\r\n        boardService.query(filter)\r\n            .then(boards => dispatch({ type: QUERY_BOARDS, boards }));\r\n    }\r\n}\r\n\r\nexport function loadBoard(id) {\r\n    return async dispatch => {\r\n        const board = await boardService.getById(id);\r\n        dispatch({ type: LOAD_BOARD, board });\r\n    }\r\n}\r\n\r\nexport function addBoard(addedBoard) {\r\n    return async dispatch => {\r\n        const board = await boardService.add(addedBoard);\r\n        dispatch({ type: ADD_BOARD, board })\r\n    }\r\n}\r\n\r\nexport function updateBoard(updatedBoard) {\r\n    return async (dispatch) => {\r\n        dispatch({ type: UPDATE_BOARD, board: updatedBoard });\r\n\r\n        try {\r\n            await boardService.update(updatedBoard);\r\n        } catch (err) {\r\n            // dispatch({ type: UPDATE_BOARD, board: keepBoard });\r\n        }\r\n\r\n        socketService.emit('board updated', updatedBoard._id);\r\n    }\r\n}\r\n\r\nexport function removeBoard(boardId) {\r\n    return dispatch => {\r\n        boardService.remove(boardId)\r\n            .then(() => dispatch({ type: REMOVE_BOARD, boardId }));\r\n    }\r\n}\r\n\r\nexport function setCard(card) {\r\n    return dispatch => {\r\n        dispatch({ type: 'SET_CARD', card });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\nexport class _AddCard extends Component {\r\n    state = {\r\n        card: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAddCardShown) {\r\n            this.cardNameInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n            window.addEventListener(\"mouseup\", this.handleClick);\r\n            this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n        else window.removeEventListener(\"mouseup\", this.handleClick);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } })\r\n    }\r\n\r\n    onAddCard = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.card.title.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === this.props.phaseId);\r\n        const newCard = boardService.getNewCard(this.state.card);\r\n        boardCopy.phaseLists[phaseIdx].cards.push(newCard);\r\n        boardService.addActivity(boardCopy, this.props.user, OPERETIONS.ADD, TYPES.CARD, { id: newCard.id, title: newCard.title });\r\n\r\n        this.setState({ card: { title: '' } });\r\n        await this.props.updateBoard(boardCopy);//async await is for the scroll\r\n        this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleClick = (ev) => {\r\n        if (ev.target !== this.addCardBtn &&//If user clicked add button or the input\r\n            ev.target !== this.cardNameInput) {\r\n            if (this.state.card.title) {//If there's input- add the card\r\n                this.addCardBtn.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            }\r\n            this.props.toggleAddCardShown();\r\n        }//This rather than onBlur because it gives the user\r\n        // the experience of clicking the button himself\r\n    }\r\n\r\n    render() {\r\n        const { handleChange, onAddCard, state } = this;\r\n        const { toggleAddCardShown, isAddCardShown } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isAddCardShown && <form className=\"add-card\" onSubmit={onAddCard}>\r\n                    <textarea className=\"card-name-input\" required autoFocus type=\"text\"\r\n                        name=\"title\" autoComplete=\"off\" onChange={handleChange} spellCheck=\"false\"\r\n                        ref={el => this.cardNameInput = el} value={state.card.title}\r\n                        placeholder=\"Enter a title for this card..\" />\r\n                    <div className=\"form-btns flex align-end\">\r\n                        <button ref={(el) => this.addCardBtn = el} className=\"submit-btn\"\r\n                            type=\"submit\">Add Card</button>\r\n                        <button className=\"close-btn\" onClick={toggleAddCardShown}><Close /></button>\r\n                    </div>\r\n                </form>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const AddCard = connect(mapStateToProps, mapDispatchToProps)(_AddCard)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\n\r\nexport class _CardLabels extends Component {\r\n\r\n    toggleIsLabelTxtShown = (ev) => {\r\n        ev.stopPropagation();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.isLabelTxtShown = !boardCopy.isLabelTxtShown;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsLabelTxtShown } = this;\r\n        const { isLabelTxtShown } = this.props.board;\r\n        const labels = this.getUpdatedLabels();\r\n        const labelClassName = isLabelTxtShown ? 'shown' : '';\r\n        return (\r\n            <div className=\"labels-container flex wrap\">\r\n\r\n                {labels.map(label => <span title={label.txt} className={`label ${labelClassName}`}\r\n                    style={{ backgroundColor: label.color }}\r\n                    onClick={toggleIsLabelTxtShown} key={label.id}>\r\n                    <span className=\"label-txt\">\r\n                        {isLabelTxtShown && label.txt}</span>\r\n                </span>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const CardLabels = connect(mapStateToProps, mapDispatchToProps)(_CardLabels)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { AccessTime } from '@material-ui/icons';\r\n\r\nexport const DueBadge = ({ dueDate }) => {\r\n\r\n    const displayDate = dueDate ? moment(dueDate).format(\"MMM Do\") : null;\r\n    const isDueClose = ((dueDate - Date.now()) < 86400000) ? true : false;\r\n    const isDuePassed = Date.now() > dueDate ? true : false;\r\n    const backgroundColor = isDuePassed ? '#eb5a46' : isDueClose ? '#f2d600' : '';\r\n    const color = !backgroundColor ? '#5e6c84' : '#fff';\r\n\r\n    return (\r\n        <div style={{ backgroundColor, color }}\r\n            className=\"card-due flex align-center\"> <span className=\"due-icon\">\r\n                <AccessTime fontSize=\"small\" /></span>{displayDate}</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function MemberInitials(props) {\r\n\r\n\r\n    var firstLastName;\r\n    if (props.member) {\r\n        firstLastName = props.member.fullName.split(' ');\r\n    } else {\r\n        firstLastName = props.fullName.split(' ');\r\n    }\r\n\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n    const { member } = props;\r\n    return (\r\n        <div title={firstLastName.join(' ')} className=\"member-avatar\">\r\n            {(!member || !member.img) && <span className='member-initial'>{initials.toUpperCase()}</span>}\r\n            {member && member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-initial-img\" ></span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n// className=\"member-img\"","import React from 'react';\r\nimport { CreateOutlined, Check } from '@material-ui/icons';\r\n\r\nexport function LabelEdit(props) {\r\n\r\n    const { label, toggleEditMode } = props;\r\n    const isLabelOnCard = props.card.labels.some(lbl => lbl.id === label.id);\r\n    return (\r\n        <div className=\"label-edit flex align-center\">\r\n            <span onClick={() => { props.toggleLabelOnCard(label) }}\r\n                className=\"grow flex align-center\" style={{ backgroundColor: label.color }}>\r\n                {label.txt}{isLabelOnCard && <Check className=\"icon\" />}\r\n            </span>\r\n            <button onClick={() => { toggleEditMode(label) }}>\r\n                <CreateOutlined className=\"icon\" /></button>\r\n        </div >\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport class AddLabel extends Component {\r\n\r\n    state = {\r\n        txt: '',\r\n        color: '#b3bac5'\r\n    }\r\n\r\n    handleChangeColor = ({ target }) => {\r\n        this.setState({ color: target.value });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ txt: target.value });\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        this.props.addLabel(this.state);\r\n    }\r\n\r\n    render() {\r\n        const { txt, color } = this.state;\r\n        return (\r\n            <section className=\"add-label\">\r\n                <div className=\"add-label-header flex align-center\">\r\n                    <p className=\"grow\">Add a label</p>\r\n                    <button onClick={this.props.toggleIsAddLabelShown}>\r\n                        <Clear /></button>\r\n                </div>\r\n                <div className=\"add-label-gallery\">\r\n                    <p>Select a color</p>\r\n                    <label className={\"#61bd4f\" === color ? \"color-preview c-61bd4f selected\" : \"color-preview c-61bd4f\"}  >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#61bd4f\" /></label>\r\n\r\n                    <label className={\"#f2d600\" === color ? \"color-preview f2d600 selected\" : \"color-preview f2d600\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#f2d600\" /></label>\r\n\r\n                    <label className={\"#ff9f1a\" === color ? \"color-preview ff9f1a selected\" : \"color-preview ff9f1a\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff9f1a\" /></label>\r\n\r\n                    <label className={\"#eb5a46\" === color ? \"color-preview eb5a46 selected\" : \"color-preview eb5a46\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#eb5a46\" /></label>\r\n\r\n                    <label className={\"#0079bf\" === color ? \"color-preview c-0079bf selected\" : \"color-preview c-0079bf\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#0079bf\" /></label>\r\n\r\n                    <label className={\"#00c2e0\" === color ? \"color-preview c-00c2e0 selected\" : \"color-preview c-00c2e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#00c2e0\" /></label>\r\n\r\n                    <label className={\"#ff78cb\" === color ? \"color-preview ff78cb selected\" : \"color-preview ff78cb\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff78cb\" /></label>\r\n\r\n                    <label className={\"#344563\" === color ? \"color-preview c-344563 selected\" : \"color-preview c-344563\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#344563\" /></label>\r\n\r\n                    <label className={\"#b3bac5\" === color ? \"color-preview b3bac5 selected\" : \"color-preview b3bac5\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#b3bac5\" /></label>\r\n\r\n                    <label className={\"#c377e0\" === color ? \"color-preview c377e0 selected\" : \"color-preview c377e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#c377e0\" /></label>\r\n                    <form onSubmit={(ev) => {\r\n                        ev.preventDefault();\r\n                        this.props.addLabel(this.state);\r\n                    }}>\r\n                        <input type=\"text\" name=\"txt\" value={txt} autoFocus\r\n                            placeholder=\"Enter label name..\" required\r\n                            autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                        <button className=\"save-btn\">Save</button>\r\n                    </form>\r\n                    <button className=\"cancel-btn\" onClick={this.props.toggleIsAddLabelShown}>\r\n                        Cancel</button>\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { Clear, Add } from '@material-ui/icons';\r\nimport { boardService } from '../services/boardService';\r\nimport { LabelEdit } from './LabelEdit';\r\nimport { AddLabel } from './AddLabel';\r\n\r\nclass _LabelsEdit extends Component {\r\n\r\n    state = {\r\n        editLabel: null,\r\n        isAddLabelShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    hideLabelsEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isLabelEditShown');\r\n    }\r\n\r\n    toggleEditMode = (editLabel) => {\r\n        this.setState({ editLabel });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({\r\n            editLabel: {\r\n                ...prevState.editLabel,\r\n                txt: target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    saveLabel = (ev) => {\r\n        ev.preventDefault();\r\n        const editedLabel = this.state.editLabel;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n\r\n        boardCopy.labels = boardCopy.labels.map(label => {\r\n            if (label.id === editedLabel.id) return editedLabel;\r\n            return label;\r\n        })\r\n        this.toggleEditMode();\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleLabelOnCard = (label) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n\r\n        //Checking if the card has the label or not and flip it\r\n        if (card.labels.some(lbl => lbl.id === label.id)) {\r\n            card.labels = card.labels.filter(lbl => lbl.id !== label.id);\r\n        } else card.labels.push(label);\r\n        \r\n        const updatedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(updatedBoard);//Updated the board\r\n    }\r\n\r\n    toggleIsAddLabelShown = () => {\r\n        this.setState(prevState => ({ isAddLabelShown: !prevState.isAddLabelShown }));\r\n    }\r\n\r\n    addLabel = (partialLabel) => {\r\n        const labelToSave = boardService.getNewLabel(partialLabel);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.labels.push(labelToSave);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsAddLabelShown();\r\n    }\r\n\r\n    removeLabel = (id) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = boardCopy.labels.filter(label => label.id !== id);\r\n        boardCopy.labels = updatedLabels;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleEditMode(null);\r\n    }\r\n\r\n    render() {\r\n        const { toggleEditMode, saveLabel, toggleLabelOnCard, removeLabel } = this;\r\n        const { editLabel, isAddLabelShown } = this.state;\r\n        const { labels } = this.props.board;\r\n        return (\r\n            <React.Fragment>\r\n                {!isAddLabelShown && <section className=\"edit-labels flex column\">\r\n                    <div className=\"edit-labels-header flex align-center\">\r\n                        <p className=\"grow\">Labels</p>\r\n                        <button onClick={() => { this.props.toggleProperty('isLabelEditShown') }}>\r\n                            <Clear /></button>\r\n                    </div>\r\n                    <div className=\"labels-gallery grow\">\r\n                        {!editLabel && labels.map(label => <LabelEdit toggleLabelOnCard={toggleLabelOnCard}\r\n                            card={this.props.card} saveLabel={saveLabel} key={label.id} label={label}\r\n                            toggleEditMode={toggleEditMode} />)}\r\n\r\n                        {editLabel && <div>\r\n                            <form onSubmit={saveLabel}>\r\n                                <input type=\"text\" name=\"txt\" value={editLabel.txt} autoFocus\r\n                                    autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                                <button className=\"save-btn\">Save</button>\r\n                            </form>\r\n                            <button className=\"cancel-btn\" onClick={() => { removeLabel(editLabel.id) }}>\r\n                                Delete</button>\r\n                        </div>}\r\n\r\n                    </div>\r\n                    <button className=\"add-label-btn flex align-center justify-center\"\r\n                        onClick={this.toggleIsAddLabelShown}\r\n                    ><Add className=\"add-icon\" />Add Label</button>\r\n                </section>}\r\n\r\n                {isAddLabelShown &&\r\n                    <AddLabel addLabel={this.addLabel}\r\n                        toggleIsAddLabelShown={this.toggleIsAddLabelShown} />}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const LabelsEdit = connect(mapStateToProps, mapDispatchToProps)(_LabelsEdit)","import { httpService } from './httpService'\r\nexport const OPERETIONS = {\r\n    ADD: 'Add',\r\n    UPDATE: 'Updated',\r\n    DELETE: 'Delete'\r\n}\r\nexport const TYPES = {\r\n    User: 'User'\r\n}\r\n\r\nasync function query() {\r\n    const users = await httpService.get(`user`);\r\n    return users;\r\n}\r\n\r\nasync function getById(id) {\r\n    const user = await httpService.get(`user/${id}`);\r\n    return user\r\n}\r\n\r\nasync function getByEmail(email) {\r\n    const user = await httpService.get(`user/${email}`);\r\n    return user\r\n}\r\n\r\nasync function login(userCred) {\r\n    const user = await httpService.post('auth/login', userCred)\r\n    return _handleLogin(user)\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n    sessionStorage.setItem('user', JSON.stringify(user))\r\n    return user;\r\n}\r\nasync function logout() {\r\n    await httpService.post('auth/logout');\r\n    sessionStorage.clear();\r\n}\r\n\r\nasync function signup(userCred) {\r\n\r\n    const user = await httpService.post('auth/signup', userCred);\r\n    return user;\r\n\r\n\r\n}\r\n\r\nasync function update(updateuser) {\r\n    const user = await httpService.put('user', updateuser);\r\n    return user;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`user/${id}`);\r\n}\r\n\r\nfunction getUserCopy(user) {\r\n    return JSON.parse(JSON.stringify(user));\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const userService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    signup,\r\n    update,\r\n    makeId,\r\n    getUserCopy,\r\n    getByEmail,\r\n    login,\r\n    logout\r\n}","import { userService } from '../../services/userService';\r\nexport const LOAD_USER = 'LOAD_USER';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\nexport const QUERY_USERS = 'QUERY_USERS'\r\nexport const CREATE_USER = 'CREATE_USER';\r\n\r\nexport function login(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.login(userCreds);\r\n        dispatch(setUser(user));\r\n    };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n    return async dispatch => {\r\n        const user = await userService.signup(userCreds);\r\n        dispatch(setUser(null)); // since login is not a part of sihnup we put null user redirect to login page\r\n        dispatch(addUser(user));\r\n    };\r\n}\r\n\r\nexport function logout(userCreds) {\r\n    return async dispatch => {\r\n        await userService.logout(userCreds);\r\n        dispatch(setUser(null));\r\n    };\r\n}\r\nexport function setUser(user) {\r\n    return {\r\n        type: 'SET_USER',\r\n        user\r\n    };\r\n}\r\n\r\nexport function addUser(user) {\r\n    return {\r\n        type: 'ADD_USER',\r\n        user\r\n    };\r\n}\r\n\r\nexport function removeUser(userId) {\r\n    return dispatch => {\r\n        userService.remove(userId)\r\n            .then(() => dispatch({ type: REMOVE_USER, userId }));\r\n    }\r\n}\r\n\r\nexport function queryUsers() {\r\n    return async dispatch => {\r\n        const users = await userService.query();\r\n        dispatch({ type: QUERY_USERS, users });\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Check } from '@material-ui/icons';\r\n\r\nexport function MemberEdit(props) {\r\n    const { member, toggleMember, activeObject, activeObjectName } = props;\r\n    var isMemberOnObject;\r\n    if (activeObjectName === 'card') {\r\n        isMemberOnObject = activeObject.assignedTo.some(mmbr => mmbr._id === member._id);\r\n    }\r\n    else {\r\n        isMemberOnObject = activeObject.members.some(mmbr => mmbr._id === member._id);\r\n    }\r\n\r\n    const firstLastName = member.fullName.toUpperCase().split(' ');\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n\r\n    return (\r\n        <div onClick={(ev) => toggleMember(member, ev)}\r\n            className=\"member-item flex align-center\">\r\n            {!member.img && <div className=\"initials\"><span>{initials}</span></div>}\r\n            {member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-img\"></span>}\r\n            {member.fullName}{isMemberOnObject && <Check className=\"icon\" />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { queryUsers } from '../store/actions/userActions'\r\nimport { MemberEdit } from './MemberEdit';\r\nimport { boardService } from '../services/boardService';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\n\r\nexport class _MembersEdit extends Component {\r\n\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    async componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMembersEdit);\r\n        if (!this.props.members) {\r\n            await this.props.queryUsers();\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    hideMembersEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isMembersEditShown', ev);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ name: target.value });\r\n    }\r\n\r\n    toggleMember = (member, ev) => {\r\n        ev.stopPropagation();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        if (this.props.members) {\r\n            const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n            if (card.assignedTo.some(mmbr => mmbr._id === member._id)) {\r\n                card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n            } else card.assignedTo.push(member);\r\n            const updatedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n            this.props.updateBoard(updatedBoard);\r\n        } else {\r\n            if (boardCopy.members.some(mmbr => mmbr._id === member._id)) {\r\n                boardCopy.members = boardCopy.members.filter(mmbr => mmbr._id !== member._id)\r\n            } else (boardCopy.members.push(member));\r\n            this.props.updateBoard(boardCopy);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { members, toggleProperty, card, board } = this.props;\r\n        const { name } = this.state;\r\n        var membersToDisplay;\r\n        var activeObject, activeObjectName;\r\n\r\n        if (members) {\r\n            //from card and exists in board\r\n            activeObject = card;\r\n            activeObjectName = 'card'\r\n            membersToDisplay = members.filter(mmbr =>\r\n                mmbr.fullName.toLowerCase().includes(name.toLowerCase()));\r\n        }\r\n        else {\r\n            //from borard\r\n            activeObject = board;\r\n            activeObjectName = 'board'\r\n            membersToDisplay = this.props.users.filter(mmbr =>\r\n                mmbr.fullName.toLowerCase().includes(name.toLowerCase()));\r\n\r\n\r\n        }\r\n        if (!membersToDisplay) return ' '\r\n\r\n\r\n\r\n        return (\r\n            <section className=\"edit-members\"  >\r\n                <div className=\"edit-members-header flex align-center\">\r\n                    <p className=\"grow\">Members</p>\r\n                    <button onClick={(ev) => { toggleProperty('isMembersEditShown', ev) }}><Clear /></button>\r\n                </div>\r\n                <input className=\"search-name\" onChange={this.handleChange} autoComplete=\"off\"\r\n                    type=\"search\" name=\"name\" value={name} placeholder=\"Search members\" />\r\n                <div className=\"members-gallery\">\r\n                    {membersToDisplay && membersToDisplay.map(member =>\r\n                        <MemberEdit toggleMember={this.toggleMember} activeObject={activeObject}\r\n                            activeObjectName={activeObjectName} key={member._id} member={member} />)}\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        users: state.trelloUser.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    queryUsers\r\n\r\n}\r\n\r\nexport const MembersEdit = connect(mapStateToProps, mapDispatchToProps)(_MembersEdit)","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\n\r\nexport class DueDateEdit extends Component {\r\n\r\n    state = {\r\n        dueDate: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideDueDateEdit);\r\n        this.setState({ dueDate: Date.now() })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideDueDateEdit);\r\n    }\r\n\r\n    hideDueDateEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    handleDateChange = date => {\r\n        this.setState({ dueDate: date._d.getTime() })\r\n    }\r\n\r\n    handleSave = () => {\r\n        this.props.changeDueDate(this.state.dueDate);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        this.props.changeDueDate(null);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    render() {\r\n        const { toggleProperty } = this.props;\r\n        const { dueDate } = this.state;\r\n        return (\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker-header flex align-center\">\r\n                    <p className=\"grow\">Change Due Date</p>\r\n                    <button onClick={() => { toggleProperty('isDueDateEditShown') }}>\r\n                        <Clear className=\"icon\" /></button>\r\n                </div>\r\n                <div className=\"date-picker-content flex column justify-center\">\r\n                    <DateTimePicker className=\"picker-input\"\r\n                        disablePast=\"true\"\r\n                        views={[\"date\", \"month\", \"hours\", \"minutes\"]}\r\n                        minDateMessage=\"\"\r\n                        value={dueDate} onChange={this.handleDateChange} />\r\n                    <div className=\"flex space-between\">\r\n                        <button onClick={this.removeDueDate}\r\n                            className=\"remove-btn\">Remove</button>\r\n                        <button onClick={this.handleSave} className=\"save-btn\">Save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport {\r\n    DeleteForeverOutlined, AccessTime,\r\n    PersonOutlineOutlined, LabelOutlined\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { DueDateEdit } from './DueDateEdit';\r\n\r\nexport class _CardMenu extends Component {\r\n\r\n    state = {\r\n        card: {\r\n            title: '',\r\n            dueDate: 0,\r\n            labels: [],\r\n            assignedTo: []\r\n        },\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        isDueDateEditShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMenu);\r\n        this.titleInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n        const { title, dueDate, labels, assignedTo } = this.props.card;\r\n        this.setState({ card: { title, dueDate, labels, assignedTo } });\r\n        this.cardMenu.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'end' })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMenu);\r\n        this.titleInput.removeEventListener(\"keypress\", this.submitOnEnter);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    hideMenu = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.toggleIsMenuShown();\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n    onDelete = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(this.props.card.id);\r\n        const cardIdx = boardService.getCardIdxById(boardCopy, phaseIdx, this.props.card.id);\r\n        boardCopy.phaseLists[phaseIdx].cards.splice(cardIdx, 1);\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    onChangeTitle = () => {\r\n        if (!this.state.card.title.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.title = this.state.card.title;//Changed the card\r\n        const upadtedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(upadtedBoard);\r\n        this.props.toggleIsMenuShown();//Saving card, closing menu\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.dueDate = newDate;//Changed the card\r\n        const updatedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(updatedBoard);\r\n    }\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { onDelete, handleChange, onChangeTitle, toggleProperty, changeDueDate } = this;\r\n        const { isLabelEditShown, card, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        const { title } = card;\r\n        return (\r\n            <section>\r\n                <div onMouseDown={this.props.toggleIsMenuShown} className=\"screen\"></div>\r\n                <section className=\"menu-container flex\">\r\n\r\n                    <form onSubmit={onChangeTitle} className=\"edit-card-form flex column\">\r\n                        <textarea onChange={handleChange} name=\"title\" value={title} cols=\"30\" rows=\"5\"\r\n                            ref={el => this.titleInput = el} spellCheck=\"false\" autoComplete=\"off\" autoFocus />\r\n                        <button onClick={onChangeTitle} className=\"save-btn\">Save</button>\r\n                    </form>\r\n\r\n                    <div ref={(el) => this.cardMenu = el} className=\"card-menu flex column\">\r\n                        <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"flex align-center\">\r\n                            <LabelOutlined className=\"icon\" />Edit Labels</button>\r\n                        {isLabelEditShown &&\r\n                            <LabelsEdit card={this.props.card} toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isMembersEditShown') }} className=\"flex align-center\">\r\n                            <PersonOutlineOutlined className=\"icon\" />Change Members</button>\r\n                        {isMembersEditShown && <MembersEdit card={this.props.card}\r\n                            members={this.props.board.members}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                            className=\"flex align-center\">\r\n                            <AccessTime className=\"icon\" />Change Due Date</button>\r\n                        {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={onDelete} className=\"flex align-center\">\r\n                            <DeleteForeverOutlined className=\"icon\" />Delete</button>\r\n                    </div>\r\n\r\n                </section>\r\n            </section >\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const CardMenu = connect(mapStateToProps, mapDispatchToProps)(_CardMenu)","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { CardLabels } from './CardLabels';\r\nimport { AttachmentOutlined, CheckBoxOutlined, CreateOutlined } from '@material-ui/icons';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\nimport { loadBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { DueBadge } from './DueBadge';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { CardMenu } from './CardMenu';\r\nimport { boardService } from '../services/boardService';\r\nimport { history } from '../history';\r\n\r\n\r\nclass _CardPreview extends React.Component {\r\n\r\n    state = {\r\n        isMenuShown: false,\r\n        pageX: 0,\r\n        pageY: 0\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    toggleIsMenuShown = (ev) => {\r\n        if (ev) {\r\n            ev.preventDefault();//This prevents context menu\r\n            ev.stopPropagation();//This prevents card from opening\r\n        }\r\n        this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsMenuShown, state } = this;\r\n        const { isMenuShown } = state;\r\n        const { title, imgUrl, dueDate, checkList, assignedTo, attachments } = this.props.card;\r\n        const checklistDoneCount = checkList.filter(item => item.isDone).length;\r\n        const checklistBgc = checklistDoneCount === checkList.length ? '#61bd4f' : '';\r\n        const checklistColor = checklistBgc ? '#fff' : '';\r\n        const labels = this.getUpdatedLabels();\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {isMenuShown && <CardMenu card={this.props.card} toggleIsMenuShown={toggleIsMenuShown} />}\r\n\r\n                <Draggable draggableId={this.props.card.id} index={this.props.index}>\r\n                    {(provided, snapshot) => (\r\n                        <NaturalDragAnimation style={provided.draggableProps.style} snapshot={snapshot}>\r\n                            {style => (\r\n                                <section onContextMenu={toggleIsMenuShown}\r\n                                    onClick={() => {\r\n                                        history.push(`/board/${this.props.board._id}/${this.props.card.id}`)\r\n                                    }}\r\n                                    // onClick={() => { this.props.setCard(this.props.card) }}\r\n                                    className=\"card-preview flex column\"\r\n                                    {...provided.draggableProps} {...provided.dragHandleProps}\r\n                                    ref={provided.innerRef} style={style}>\r\n\r\n                                    <button onClick={toggleIsMenuShown}\r\n                                        className=\"show-menu-btn\">\r\n                                        <CreateOutlined className=\"show-menu-icon\" />\r\n                                    </button>\r\n\r\n                                    {imgUrl && <div className=\"card-img flex justify-center\">\r\n                                        <img alt=\"Card\" src={imgUrl} /></div>}\r\n                                    {labels && <CardLabels labels={labels} />}\r\n\r\n                                    <p>{title}</p>\r\n\r\n                                    <div className=\"card-badges flex wrap\">\r\n                                        {dueDate && <DueBadge dueDate={dueDate} />}\r\n\r\n                                        {attachments.length > 0 &&\r\n                                            <div className=\"attach-badge flex align-center\">\r\n                                                <AttachmentOutlined className=\"attach-icon\" />\r\n                                                <span>{attachments.length}</span>\r\n                                            </div>}\r\n\r\n                                        {checkList.length > 0 &&\r\n                                            <div style={{ backgroundColor: checklistBgc, color: checklistColor }}\r\n                                                className=\"checklist-badge flex align-center\">\r\n                                                <span><CheckBoxOutlined className=\"checklist-icon\" />\r\n                                                </span>\r\n                                                <span>{checklistDoneCount}/{checkList.length}</span>\r\n                                            </div>}\r\n                                    </div>\r\n                                    <div className=\"members-badge flex align-center\">\r\n                                        {assignedTo.length > 0 &&\r\n                                            assignedTo.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                                    </div>\r\n                                </section>\r\n                            )}\r\n                        </NaturalDragAnimation>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    setCard\r\n}\r\n\r\nexport const CardPreview = connect(mapStateToProps, mapDispatchToProps)(_CardPreview)","import React, { Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { MoreHoriz, Close, Add } from '@material-ui/icons';\r\nimport { AddCard } from './AddCard';\r\nimport { CardPreview } from './CardPreview';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nexport class _PhasePreview extends Component {\r\n\r\n    state = {\r\n        isInputShown: false,\r\n        isMenuShown: false,\r\n        isSortShown: false,\r\n        newPhaseName: '',\r\n        isAddCardShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ newPhaseName: this.props.phase.name })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) window.addEventListener('keydown', this.hideInput);\r\n        else window.removeEventListener('keydown', this.hideInput);\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        if (ev.code === 'Escape' || ev.type === 'onblur') {\r\n            this.setState({ isInputShown: false });\r\n            window.removeEventListener('keydown', this.hideInput);\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ newPhaseName: target.value })\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newPhaseName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === this.props.phase.id);\r\n        boardCopy.phaseLists[phaseIdx].name = this.state.newPhaseName;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleInputShown();\r\n    }\r\n\r\n    toggleMenuShown = () => {\r\n        if (this.state.isSortShown) {\r\n            //making sure menu returns to default \"state\"\r\n            this.setState({ isMenuShown: false, isSortShown: false });\r\n        } else this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    showAddCard = () => {\r\n        this.setState({ isAddCardShown: true });\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    toggleAddCardShown = () => {\r\n        this.setState(prevState => ({ isAddCardShown: !prevState.isAddCardShown }));\r\n    }\r\n\r\n    toggleIsSortShown = () => {\r\n        this.setState(prevState => ({ isSortShown: !prevState.isSortShown }));\r\n    }\r\n\r\n    sortListBy = (sortBy) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phase = boardCopy.phaseLists.find(phase => phase.id === id);\r\n        const sortedPhase = boardService.getSortedPhase(sortBy, phase);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id ===\r\n            sortedPhase.id ? sortedPhase : phase);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsSortShown();//to close the menu\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    onDeletePhase = () => {\r\n        this.toggleMenuShown();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id !== this.props.phase.id);\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { name, id, cards } = this.props.phase;\r\n        const { newPhaseName, isInputShown, isMenuShown, isSortShown, isAddCardShown } = this.state;\r\n\r\n        return (\r\n            <Draggable draggableId={id} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <NaturalDragAnimation\r\n                        style={provided.draggableProps.style}\r\n                        snapshot={snapshot}\r\n                    >\r\n                        {style => (\r\n                            <article className=\"phase flex column\"\r\n                                {...provided.draggableProps}\r\n                                ref={provided.innerRef}\r\n                                {...snapshot.isDropAnimating = true} style={style}\r\n                            >\r\n                                <div {...provided.dragHandleProps} className=\"phase-header flex space-between\">\r\n\r\n                                    {!isInputShown && <h5 className=\"phase-title grow\"\r\n                                        onClick={this.toggleInputShown}>{name}</h5>}\r\n                                    {isInputShown && <form className=\"flex grow\" onSubmit={this.handleSubmit}>\r\n                                        <input className=\"phase-name-input grow\" type=\"text\" name=\"newPhaseName\"\r\n                                            value={newPhaseName} autoFocus autoComplete=\"off\" spellCheck=\"false\"\r\n                                            onBlur={this.toggleInputShown} onChange={this.handleChange} />\r\n                                    </form>}\r\n\r\n                                    <MoreHoriz className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                    {isMenuShown && <div className=\"phase-menu flex column\">\r\n                                        <div className=\"menu-header flex align-center\">\r\n\r\n                                            <h5 className=\"grow\">List Actions</h5>\r\n                                            <Close className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                        </div>\r\n                                        <div className=\"menu-btns flex column\">\r\n                                            <button onClick={this.showAddCard} >Add A Card</button>\r\n                                            <button onClick={this.toggleIsSortShown}>Sort By..</button>\r\n                                            {isSortShown && <div className=\"sort-options flex column\">\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('title')\r\n                                                }}>Title</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('firstCreated')\r\n                                                }}>First Created</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('lastCreated')\r\n                                                }}>Last Created</button>\r\n                                            </div>}\r\n                                            <button onClick={this.onDeletePhase}>Delete List</button>\r\n\r\n                                        </div>\r\n                                    </div>}\r\n                                </div>\r\n                                <Droppable droppableId={id}>\r\n                                    {(provided) => (\r\n                                        <div className=\"cards-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                            {cards.map((card, index) => <CardPreview key={card.id} card={card} index={index} />)}\r\n                                            {provided.placeholder}\r\n                                            <AddCard isAddCardShown={isAddCardShown} bottomCard={this.bottomCard}\r\n                                                toggleAddCardShown={this.toggleAddCardShown} phaseId={this.props.phase.id} />\r\n                                            <div style={{ opacity: 0 }} ref={el => this.bottomCard = el}></div>\r\n                                        </div>\r\n                                    )}\r\n                                </Droppable>\r\n                                {!isAddCardShown && <button onClick={this.toggleAddCardShown}\r\n                                    className=\"add-card-btn flex align-center\">\r\n                                    <Add className=\"add-icon\" fontSize=\"large\" />Add a card</button>}\r\n                            </article>\r\n                        )}\r\n                    </NaturalDragAnimation>\r\n                )}\r\n\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhasePreview = connect(mapStateToProps, mapDispatchToProps)(_PhasePreview)","import React, { Component } from 'react';\r\nimport { PhasePreview } from './PhasePreview';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { Add, Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\n\r\nexport class _PhaseList extends Component {\r\n    state = {\r\n        board: null,\r\n        isInputShown: false,\r\n        newListName: '',\r\n        phaseListToShow: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ board: this.props.board }, () => {\r\n\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ board: this.props.board, phaseListToShow });\r\n        }\r\n        if (JSON.stringify(prevProps.filteredByUser) !== JSON.stringify(this.props.filteredByUser)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeEventListeners();\r\n    }\r\n\r\n    getFilteredPhaseLists(searchedName) {\r\n        if (!searchedName) return this.props.board.phaseLists;\r\n        const cloneBoard = boardService.getBoardCopy(this.props.board);\r\n\r\n        cloneBoard.phaseLists.map(phase => {\r\n            return phase.cards = phase.cards.filter(card => {\r\n                return card.assignedTo.find(user => user.fullName.toLowerCase().includes(searchedName.trim().toLowerCase()))\r\n            })\r\n        })\r\n        return cloneBoard.phaseLists;\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) this.addEventListeners();\r\n        else this.removeEventListeners();\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        //To allow closing the input through Escape/click on something else\r\n        // Cannot use 'onBlur', in order to allow adding lists in a row(Try at trello)\r\n        if ((ev.code === 'Escape' || ev.target !== this.listNameInput)\r\n            && ev.target !== this.submitBtn) {\r\n            this.setState({ isInputShown: false });\r\n            this.removeEventListeners();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({ ...prevState, newListName: target.value }));\r\n    }\r\n\r\n    addEventListeners = () => {\r\n        window.addEventListener('keydown', this.hideInput);\r\n        window.addEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    removeEventListeners = () => {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n        window.removeEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    onAddPhase = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newListName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const newPhase = boardService.getNewPhase(this.state.newListName);\r\n        boardCopy.phaseLists.push(newPhase);\r\n        this.setState({ newListName: '' })\r\n        await this.props.updateBoard(boardCopy);\r\n        this.listForm.scrollIntoView({ inline: 'end', behavior: 'smooth' });\r\n    }\r\n\r\n    onDragEnd = result => {\r\n\r\n        const { destination, source, type } = result;\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        if (type === 'PhasePreview') {\r\n            const newPhasesOrder = boardCopy.phaseLists;\r\n            const movingPhase = newPhasesOrder.splice(source.index, 1)[0];\r\n            newPhasesOrder.splice(destination.index, 0, movingPhase);\r\n        } else {\r\n            const { phaseLists } = boardCopy;\r\n            const srcPhase = phaseLists.find(phase => phase.id === source.droppableId);\r\n            const dstPhase = phaseLists.find(phase => phase.id === destination.droppableId);\r\n\r\n            if (srcPhase.id === dstPhase.id) {\r\n                const movingCard = srcPhase.cards.splice(source.index, 1)[0];\r\n                srcPhase.cards.splice(destination.index, 0, movingCard);\r\n            } else {\r\n                const srcCards = srcPhase.cards;\r\n                const movingCard = srcCards.splice(source.index, 1)[0];\r\n                const dstCards = dstPhase.cards;\r\n                dstCards.splice(destination.index, 0, movingCard);\r\n                boardService.addActivity(boardCopy,\r\n                    this.props.user,\r\n                    OPERETIONS.UPDATE,\r\n                    TYPES.CARD, {\r\n                    id: movingCard.id,\r\n                    title: movingCard.title\r\n                },\r\n                    `moved card from ${srcPhase.name} to ${dstPhase.name} -Card:`);\r\n            }\r\n        }\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.board || !this.state.phaseListToShow) return 'loading..'\r\n\r\n\r\n        const { toggleInputShown, onAddPhase, handleChange, hideInput } = this;\r\n        const { isInputShown, newListName, phaseListToShow } = this.state;\r\n\r\n        return (\r\n\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"PhasePreview\">\r\n                    {(provided, snapshot) => (\r\n                        <section className=\"phase-list flex\"  {...provided.droppableProps} ref={provided.innerRef} >\r\n                            {phaseListToShow && phaseListToShow.map((phase, index) => <PhasePreview key={phase.id} index={index}\r\n                                phase={phase} />)}\r\n\r\n                            {!isInputShown && <button className=\"add-list-btn flex align-center\"\r\n                                onClick={toggleInputShown}> <Add fontSize=\"small\" />Add new list</button>}\r\n\r\n                            {isInputShown && <form ref={el => this.listForm = el} className=\"add-list-form\"\r\n                                onSubmit={onAddPhase}>\r\n                                <input ref={el => this.listNameInput = el} type=\"text\" autoFocus spellCheck=\"false\"\r\n                                    name=\"newListName\" onChange={handleChange} required autoComplete=\"off\"\r\n                                    placeholder=\"Enter list title..\" value={newListName} />\r\n                                <div className=\"flex align-center\">\r\n                                    <button ref={el => this.submitBtn = el} className=\"submit-btn\"\r\n                                        type=\"submit\">Add List</button>\r\n                                    <Close className=\"cancel-btn pointer\" onClick={hideInput} />\r\n                                </div>\r\n                            </form>}\r\n                            {provided.placeholder}\r\n                        </section>\r\n\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhaseList = connect(mapStateToProps, mapDispatchToProps)(_PhaseList)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { history } from '../history';\r\nclass _Activity extends React.Component {\r\n\r\n    dynamicActivity = (activity) => {\r\n\r\n        const { at, user, type, object, operation, desc } = activity;\r\n\r\n        var userElmemnt = null;\r\n        var elmentType = null;\r\n        if (desc) {\r\n            userElmemnt = <span className=\"activity-object\">{user.fullName}</span>;\r\n\r\n            return (\r\n                <div className=\"activity flex\">\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${desc}`}</span>\r\n                        <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            if (!user) return <div style={{ \"display\": \"none\" }}>stam</div>\r\n\r\n            userElmemnt = <span className=\"activity-object\" >{user.fullName}</span>;\r\n\r\n            elmentType = <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>;\r\n\r\n            return (\r\n\r\n                < div className=\"activity flex\" >\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${operation} ${type}`} {elmentType}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n    OpenByObjectType = () => {\r\n        const { type, object, } = this.props.activity;\r\n        if (!type || !object) return;\r\n        // parent is menu and not card and type is card\r\n        if (type.toLowerCase() === 'card' && this.props.allowOpenCard) {\r\n            const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = object.id;\r\n            const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n            if (!currPhase) return;\r\n            const card = currPhase.cards.find(card => card.id === cardId);\r\n            if (!card) return;\r\n            this.props.onCloseMenu(null);\r\n            this.props.setCard(card);\r\n            history.push(`/board/${this.props.board._id}/${card.id}`);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { activity } = this.props\r\n        return (\r\n            this.dynamicActivity(activity)\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Activity = connect(mapStateToProps, mapDispatchToProps)(_Activity)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { Activity } from './Activity';\r\nimport { ListOutlined } from '@material-ui/icons';\r\n\r\nclass _Activities extends React.Component {\r\n\r\n    state = {\r\n        txt: '',\r\n\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n    onEnterDown = (ev) => {\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            this.handleSaveBoard();\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const card = this.props.card;\r\n        if (!this.state.txt.trim()) return;\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.ADD, TYPES.CARD, { id: card.id, title: card.title },\r\n            `commented \"${this.state.txt}\"`);\r\n        this.setState({ txt: '' });\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        const { activities, showCommentBox } = this.props;\r\n        const { txt } = this.state\r\n        return (\r\n\r\n            <div className=\"activity-container\">\r\n                <div className=\"activity-header flex align-center\">\r\n                    <ListOutlined className=\"activity-icon\" />\r\n                    <span className=\"activity-header-text\">Activity</span>\r\n                </div>\r\n\r\n                {showCommentBox &&\r\n                    <div className=\"flex column\">\r\n                        <div className=\"flex\">\r\n                            <MemberInitials fullName={this.props.user.fullName} />\r\n                            <input type=\"text\" className=\"comment-input\" ref={el => this.cardNameInput = el}\r\n                                placeholder=\"Write a comment...\" onChange={this.handleChange}\r\n                                spellCheck=\"false\"\r\n                                onBlur={this.handleSaveBoard} onKeyDown={this.onEnterDown} value={this.state.txt}></input>\r\n\r\n                        </div>\r\n                        {txt.length > 0 && <button onClick={this.handleSaveBoard} className=\"add-comment-btn\" type=\"submit\">Save</button>}\r\n                    </div>\r\n                }\r\n\r\n                {activities.map((activity, index) => {\r\n                    return <Activity allowOpenCard={!showCommentBox} onCloseMenu={this.props.onCloseMenu} key={index} activity={activity}>\r\n\r\n                    </Activity>\r\n                })}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const Activities = connect(mapStateToProps, mapDispatchToProps)(_Activities)","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons';\r\nimport { Activities } from '../Activities'\r\n\r\nexport class BoardMenu extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        const shownClass = !this.props.isMenuShown ? '' : 'shown';\r\n        const board = this.props.board;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"board-menu-header flex\">\r\n                    <div className=\"board-menu-header-content flex align-center grow\">\r\n                        <h3 className=\"menu-header-title\">Menu</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-content flex column\">\r\n                        <div className=\"board-menu-item flex align-center\" onClick={() => this.props.onToggleMenu('backgroundMenu')}>\r\n                            <div className=\"board-menu-icon\" style={boardBg}></div>\r\n                            <span className=\"board-menu-text\">Change Background</span>\r\n                        </div>\r\n                        <span className=\"board-menu-header-divider\"></span>\r\n                        <Activities onCloseMenu={this.props.onToggleMenu} activities={board.activities} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _ColorMenu extends Component {\r\n\r\n    changeBoardColor = (color) => {\r\n\r\n        if (!color) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.bgColor = color;\r\n        clonedBoard.imgUrl = null;\r\n        boardService.addActivity(clonedBoard, this.props.user, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `changed board background color`);\r\n        this.props.updateBoard(clonedBoard);\r\n\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Change Background</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 121, 191)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 121, 191)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(210, 144, 52)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(210, 144, 52)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(81, 152, 57)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(81, 152, 57)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(176, 70, 50)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(176, 70, 50)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(137, 96, 158)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(137, 96, 158)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(205, 90, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(205, 90, 145)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(75, 191, 107)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(75, 191, 107)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 174, 204)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 174, 204)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(131, 140, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(131, 140, 145)\")} >\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const ColorMenu = connect(mapStateToProps, mapDispatchToProps)(_ColorMenu)\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService';\r\nimport { unsplashService } from '../../services/unsplashService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _PhotoMenu extends Component {\r\n\r\n    state = {\r\n        imgs: null\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.imgs) {\r\n            unsplashService.getListPhotos()\r\n                .then(json => {\r\n                    const imgs = json.map(img => {\r\n                        return {\r\n                            thumbUrl: img.urls.thumb,\r\n                            regularUrl: img.urls.regular,\r\n                            fullUrl: img.urls.full,\r\n                            credit: `${img.user.links.html}?utm_source=Flowz&utm_medium=referral`,\r\n                            userName: `${img.user.name}`\r\n                        }\r\n                    })\r\n                    this.setState({ imgs }, () => {\r\n                    });\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    changeBoardImg = (img) => {\r\n\r\n        if (!img) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.imgUrl = img;\r\n        clonedBoard.bgColor = null;\r\n        boardService.addActivity(clonedBoard, this.props.user, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background image`);\r\n        this.props.updateBoard(clonedBoard);\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        const { imgs } = this.state;\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Photos by<a className=\"unsplash\"\r\n                                href=\"https://unsplash.com/?utm_source=Flowz&utm_medium=referral&utm_campaign=api-credit\" >Unsplash</a></h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            {imgs && imgs.map((img, index) =>\r\n\r\n                                <div className='btn-photo flex column align-center flex-end '\r\n                                    style={{ \"backgroundImage\": `url(\"${img.thumbUrl}\")` }} key={index}\r\n                                    onClick={() => this.changeBoardImg(img.regularUrl)} >\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const PhotoMenu = connect(mapStateToProps, mapDispatchToProps)(_PhotoMenu)\r\n","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class BackgroundMenu extends Component {\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"mainMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Colors</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between\">\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"photoMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/collage.jpg\")} alt=\"\" />\r\n                                <span>Photos</span>\r\n                            </div>\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"colorMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/colors.jpg\")} alt=\"\" />\r\n                                <span>Colors</span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NoteOutlinedIcon from '@material-ui/icons/NoteOutlined';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nclass _CardHeader extends Component {\r\n    state = {\r\n        txt: '',\r\n        onPhase: '',\r\n        isTitleOnEdit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const cardId = this.props.card.id;\r\n        let currPhase = this.props.board.phaseLists.filter(phase =>\r\n            phase.cards.find(card => card.id === cardId));\r\n        this.setState({ txt: this.props.card.title, onPhase: currPhase[0].name })\r\n    }\r\n\r\n    toggleInput = () => {\r\n        this.setState(prevState => ({ isTitleOnEdit: !prevState.isTitleOnEdit }))\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        if (!this.state.txt.trim()) return this.toggleInput();\r\n        if (this.state.isTitleOnEdit) {\r\n            let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = this.props.card.id;\r\n            let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n            currPhase[0].cards.forEach(card => {\r\n                if (card.id === this.props.card.id) {\r\n                    card.title = this.state.txt;\r\n                }\r\n            })\r\n            this.props.updateBoard(boardClone)\r\n            this.toggleInput();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    autoGrow = (el) => {\r\n        el.style.height = (el.scrollHeight) + \"px\";\r\n    }\r\n\r\n    backToboard = () => {\r\n        this.props.setCard(null);\r\n        history.push(`/board/${this.props.board._id}`);\r\n    }\r\n\r\n    render() {\r\n        if (!this.state) return 'loading';\r\n        const { txt, isTitleOnEdit, onPhase } = this.state;\r\n\r\n        return (<div className=\"card-header\">\r\n            <div className=\"card-header-container flex align-center\">\r\n                <NoteOutlinedIcon className=\"icon\" />\r\n                {!isTitleOnEdit && <h3 onClick={this.toggleInput} className=\"card-title grow\">{txt}</h3>}\r\n                {isTitleOnEdit && <textarea ref={el => this.elTextarea = el} spellCheck=\"false\"\r\n                    onFocus={(ev) => { this.autoGrow(ev.target) }} onKeyDown={(e) => this.handleKeyPress(e)}\r\n                    className=\"card-title-input\" autoFocus\r\n                    onBlur={this.handleSaveBoard} placeholder=\"Title...\" autoCorrect=\"false\"\r\n                    onChange={this.handleChange} value={txt} />}\r\n            </div>\r\n            <button className=\"close-btn\" onClick={this.backToboard}>\r\n                <Clear className=\"close-icon\" /></button>\r\n            <p className=\"card-link\">in list <span\r\n                onClick={this.backToboard}>{onPhase}</span></p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\n\r\nexport const CardHeader = connect(mapStateToProps, mapDispatchToProps)(_CardHeader)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\n\r\nclass _CardDesc extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ txt: this.props.card.desc })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n\r\n    handleSaveBoard = () => {\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n\r\n        currPhase[0].cards.forEach(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.desc = this.state.txt;\r\n            }\r\n        })\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div className=\"desc-header-container flex\">\r\n                    <DescriptionIcon className=\"icon\" />\r\n                    <span className=\"desc-header\">Description</span>\r\n                </div>\r\n                <textarea className=\"card-desc-input\"\r\n                    placeholder=\"Add a more detailed description...\" onChange={this.handleChange}\r\n                    spellCheck=\"false\"\r\n                    onBlur={this.handleSaveBoard} value={this.state.txt}></textarea>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\n\r\nexport const CardDesc = connect(mapStateToProps, mapDispatchToProps)(_CardDesc)\r\n\r\n\r\n","import React from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport function ChecklistItem(props) {\r\n    const { idx, todo, onDelete, handleChange, handleSaveBoard, handleKeyPress } = props;\r\n    return (\r\n        <div className=\"checklist-item flex align-center\" key={idx} >\r\n            <input className=\"checkbox\" type=\"checkbox\" name=\"isDone\"\r\n                onChange={(e) => { handleChange(e, idx) }}\r\n                onBlur={handleSaveBoard} checked={todo.isDone} />\r\n                \r\n            <input className=\"checklist-item-txt grow\" type=\"text\" name=\"txt\"\r\n                onChange={(e) => handleChange(e, idx)} spellCheck=\"false\"\r\n                placeholder=\"Add a todo...\"\r\n                onBlur={handleSaveBoard} value={todo.txt} onKeyDown={handleKeyPress} />\r\n            <button onClick={() => { onDelete(idx) }}><Clear className=\"icon\" /></button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { PlaylistAddCheck } from '@material-ui/icons';\r\nimport { ChecklistItem } from './ChecklistItem';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService'\r\n\r\nclass _CardChecklist extends Component {\r\n    state = {\r\n        checkList: null,\r\n        todoText: '',\r\n        onAdd: false,\r\n        progress: 0,\r\n        checklistTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let checklistTitle = this.props.card.checklistTitle\r\n            ? this.props.card.checklistTitle : 'My Checklist';\r\n        this.setState({ checkList: this.props.card.checkList, onAdd: false, checklistTitle },\r\n            () => this.progressBarUpdate());\r\n    }\r\n\r\n    progressBarUpdate = () => {\r\n        const doneTodos = this.state.checkList.reduce((acc, currVal) => {\r\n            if (currVal.isDone) acc++\r\n            return acc\r\n        }, 0)\r\n        this.setState({ progress: Math.floor((doneTodos / this.state.checkList.length) * 100) });\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (!this.state.todoText) return\r\n\r\n        let newTodo = { txt: this.state.todoText, isDone: false }\r\n        let clone = this.state.checkList.slice();\r\n        clone.push(newTodo);\r\n        this.setState({ checkList: clone, todoText: '' }, () => {\r\n            this.handleSaveBoard();\r\n        });\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n\r\n        const updatedCards = currPhase.cards.map(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.checkList = this.state.checkList;\r\n                card.checklistTitle = this.state.checklistTitle;\r\n            }\r\n            return card;\r\n        })\r\n        const phaseIndex = boardClone.phaseLists.findIndex(phase => phase.id === currPhase.id)\r\n        currPhase.cards = updatedCards;\r\n        boardClone.phaseLists[phaseIndex] = currPhase;\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.UPDATE, TYPES.CARD,\r\n            { id: this.props.card.id, title: this.props.card.title },\r\n            'update checklist on card');\r\n\r\n        this.props.updateBoard(boardClone)\r\n            .then(() => {\r\n                this.progressBarUpdate();\r\n            })\r\n    }\r\n\r\n\r\n    toggleAdd = () => {\r\n        if (this.state.todoText) this.addTodo();\r\n        this.setState(prevState => ({ onAdd: !prevState.onAdd }));\r\n    }\r\n\r\n\r\n    onDelete = (idx) => {\r\n        let clone = this.state.checkList.slice();\r\n        clone.splice(idx, 1);\r\n        const checklistTitle = this.state.checkList.length === 1 ? '' : this.state.checklistTitle;\r\n        this.setState({ checkList: clone, checklistTitle }, () => {\r\n            this.handleSaveBoard();\r\n        })\r\n    }\r\n\r\n    handleChange = ({ target }, idx = -1) => {\r\n        const field = target.name;\r\n        const value = (field === 'isDone') ? target.checked : target.value;\r\n        let cloneChkList = this.state.checkList.slice();\r\n        if (field === 'isDone') {\r\n            cloneChkList[idx].isDone = value;\r\n            this.setState({ checkList: cloneChkList }, () => {\r\n                this.handleSaveBoard();\r\n            });\r\n        }\r\n        else {\r\n            if (idx === -1)\r\n                (this.state.onAdd ? this.setState({ todoText: value }) : this.setState({ checklistTitle: value }))\r\n\r\n            else {\r\n\r\n                cloneChkList[idx].txt = value;\r\n            }\r\n        }\r\n        this.setState({ checkList: cloneChkList });\r\n    }\r\n\r\n    handleFocus = (ev) => ev.target.select();\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { todoText, onAdd, checklistTitle, progress, checkList } = this.state;\r\n        if (!checkList || !checkList.length) return null;\r\n        const progressBgc = this.state.progress === 100 ? '#61bd4f' : '#2196f3';\r\n\r\n        return (\r\n            <div className=\"card-check-list\">\r\n                <div className=\"checklist-title-container flex align-center\">\r\n                    <PlaylistAddCheck className=\"checklist-icon\" />\r\n                    <input className=\"checklist-title\" type=\"text\" name=\"txt\" placeholder=\"Checklist name...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} spellCheck=\"false\"\r\n                        onFocus={this.handleFocus} onBlur={this.handleSaveBoard}\r\n                        value={checklistTitle} /></div>\r\n                {checkList && checkList.length > 0 && < div className=\"progress-bar-container\">\r\n                    <div className=\"progress-bar\"\r\n                        style={{ width: `${progress}%`, backgroundColor: progressBgc }}></div>\r\n                </div>}\r\n                {\r\n                    checkList && checkList.length > 0 && this.state.checkList.map((todo, idx) => <ChecklistItem todo={todo} key={idx}\r\n                        onDelete={this.onDelete} handleChange={this.handleChange}\r\n                        handleSaveBoard={this.handleSaveBoard} idx={idx}\r\n                        handleKeyPress={this.handleKeyPress} />)\r\n                }\r\n\r\n                {!onAdd && <button className=\"add-btn\" onClick={this.toggleAdd}>Add Todo</button>}\r\n                {\r\n                    onAdd && <div className=\"add-item flex align-center\">\r\n                        <input type=\"text\" onChange={this.handleChange}\r\n                            onKeyDown={this.handleKeyPress} autoFocus onBlur={this.toggleAdd} value={todoText} />\r\n                        <button className=\"save-checklist-item-btn\">Save</button>\r\n                    </div>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user:  state.trelloUser.user\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const CardChecklist = connect(mapStateToProps, mapDispatchToProps)(_CardChecklist)\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nasync function uploadImg({ target }) {\r\n    const CLOUD_NAME = 'marmelada';\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', target.files[0]);\r\n    formData.append('upload_preset', 'balulu');\r\n    try {\r\n        const res = await axios.post(UPLOAD_URL, formData);\r\n        return res.data.url\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n\r\n}\r\n\r\nasync function uploadRawAttachment({ target }) {\r\n    const CLOUD_NAME = 'marmelada';\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/raw/upload`;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', target.files[0]);\r\n    formData.append('upload_preset', 'balulu');\r\n    try {\r\n        const res = await axios.post(UPLOAD_URL, formData);\r\n        return res.data.url\r\n    } catch (err) {\r\n        console.error(err);\r\n        throw err;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const cloudinaryService = {\r\n    uploadImg,\r\n    uploadRawAttachment\r\n}","import React from 'react';\r\nimport { DeleteForeverOutlined } from '@material-ui/icons';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const CardImage = (props) => {\r\n    const { isImgLoading, imgUrl, title, removeImgUrl, loadingMsg } = props;\r\n    const msg = !(loadingMsg) ? 'Loading your image..' : loadingMsg\r\n    return (\r\n        <React.Fragment>\r\n            {isImgLoading && <div className=\"loading-field flex column align-center\">\r\n                <Loader secondaryColor=\"#2196f3d9\" type=\"Circles\" color=\"#2196F3\"\r\n                    className=\"loader\" height={60} width={60} />\r\n                <p>{msg}</p>\r\n            </div>}\r\n            {\r\n                imgUrl && <React.Fragment>\r\n                    <img className=\"card-img\" src={imgUrl} alt={title} />\r\n                    <button className=\"remove-btn flex align-center\"\r\n                        title=\"Remove cover image\" onClick={removeImgUrl}>\r\n                        <DeleteForeverOutlined className=\"icon\" /></button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, setCard, updateBoard } from '../store/actions/boardActions';\r\nimport { CardHeader } from './CardHeader';\r\nimport { CardDesc } from './CardDesc';\r\nimport { CardChecklist } from './CardChecklist';\r\nimport { Activities } from '../cmps/Activities'\r\nimport {PermIdentity, LabelOutlined, PlaylistAddCheck,Schedule, CropOriginal, DeleteForeverOutlined }  from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { boardService } from '../services/boardService';\r\nimport { DueDateEdit } from './DueDateEdit';\r\nimport moment from 'moment';\r\nimport { cloudinaryService } from '../services/cloudinaryService';\r\nimport { CardImage } from './CardImage';\r\nimport { history } from '../history';\r\n\r\nclass _Card extends Component {\r\n    state = {\r\n        card: null,\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        cardActivities: [],\r\n        isDueDateEditShown: false,\r\n        isImgLoading: false,\r\n        loadingMsg: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideCard);\r\n        var card;\r\n        this.props.board.phaseLists.forEach(phase => {\r\n            const res = phase.cards.find(card => card.id === this.props.cardId);\r\n            if (res) card = res;\r\n        });\r\n        const cardActivities = this.getActivities(card.id);\r\n        this.setState({ card, cardActivities });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideCard);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            var card;\r\n            this.props.board.phaseLists.forEach(phase => {\r\n                const res = phase.cards.find(card => card.id === this.props.cardId);\r\n                if (res) card = res;\r\n            });\r\n            const cardActivities = this.getActivities(card.id);\r\n            this.setState({ card, cardActivities });\r\n        }\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.state.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    hideCard = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) {\r\n            this.props.setCard(null);\r\n            history.push(`/board/${this.props.board._id}`);\r\n        }\r\n    }\r\n\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    getActivities = (cardId, limit = 10) => {\r\n        const cardActivities = this.props.board.activities.filter(activity => activity.object.id === cardId);\r\n        if (cardActivities.length > 10) return cardActivities.slice(0, limit);\r\n        return cardActivities\r\n\r\n\r\n    }\r\n\r\n    addCheckList = () => {\r\n        const cloneCard = JSON.parse(JSON.stringify(this.state.card));\r\n        if (!cloneCard.checkList.length) {\r\n            cloneCard.checkList.push({ txt: '', isDone: false });\r\n            this.setState({ card: cloneCard })\r\n        }\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n\r\n    removeMemberFromCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        //Changed the card\r\n        const updatedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(updatedBoard);//Updated the board\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.dueDate = newDate;//Changed the card\r\n        const updatedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(updatedBoard);\r\n    }\r\n\r\n    removeImgUrl = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.imgUrl = null;\r\n        const upadtedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(upadtedBoard);\r\n    }\r\n\r\n    onUploadImg = async (ev) => {\r\n        this.setState({ isImgLoading: true });\r\n        const imgUrl = await cloudinaryService.uploadImg(ev);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const card = boardService.getCardById(boardCopy, this.props.card.id);\r\n        card.imgUrl = imgUrl;\r\n        const upadtedBoard = boardService.replaceCardInBoard(boardCopy, card);\r\n        this.props.updateBoard(upadtedBoard);\r\n        this.setState({ isImgLoading: false });\r\n    }\r\n\r\n    removeCard = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(this.props.card.id);\r\n        const cardIdx = boardService.getCardIdxById(boardCopy, phaseIdx, this.props.card.id);\r\n        //Getting access to the card inside the board\r\n        boardCopy.phaseLists[phaseIdx].cards.splice(cardIdx, 1);\r\n        this.props.setCard(null);\r\n        history.push(`/board/${this.props.board._id}`);\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board || !this.state.card) return 'Loading';\r\n        const { card, isLabelEditShown, isMembersEditShown, cardActivities, isDueDateEditShown, isImgLoading } = this.state;\r\n        const { assignedTo, dueDate, imgUrl, title } = card;\r\n        const { toggleProperty, changeDueDate, removeImgUrl } = this;\r\n        const labels = this.getUpdatedLabels();\r\n\r\n        return (\r\n            <section>\r\n                <div onClick={() => {\r\n                    history.push(`/board/${this.props.board._id}`);\r\n                    this.props.setCard(null);\r\n                }} className=\"card-modal\" >\r\n                    <div onClick={(ev) => ev.stopPropagation()} className=\"card-container\" >\r\n                        <div className=\"card-img-container flex justify-center\">\r\n                            <CardImage isImgLoading={isImgLoading} loadingMsg={this.state.loadingMsg} imgUrl={imgUrl}\r\n                                title={title} removeImgUrl={removeImgUrl} />\r\n                        </div>\r\n                        < CardHeader card={card} />\r\n                        <div className=\"card-content flex\">\r\n                            <div className=\"card-details flex column grow\">\r\n                                {assignedTo.length > 0 && <div className=\"card-details-members\">\r\n                                    <h3>Members</h3>\r\n                                    <div className=\"flex align-center\">\r\n                                        {assignedTo.map((member) => <span key={member._id}\r\n                                            onClick={() => { this.removeMemberFromCard(member) }}>\r\n                                            <MemberInitials member={member} />\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {labels.length > 0 && <div className=\"card-details-labels\">\r\n                                    <h3>Labels</h3>\r\n                                    <div className=\"labels-gallery flex wrap align-center\">\r\n                                        {labels.map(label => <span title={label.txt} className=\"label\"\r\n                                            onClick={() => { toggleProperty('isLabelEditShown') }}\r\n                                            style={{ backgroundColor: label.color }}\r\n                                            key={label.id}> <span className=\"label-txt\">{label.txt}</span>\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {dueDate && <div className=\"card-details-date\">\r\n                                    <h3>Due Date</h3>\r\n                                    <div onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                        className=\"date flex align-center\">\r\n                                        <span className=\"date-str\">{`${moment(dueDate).format(\"MMM Do\")}\r\n                                     at ${moment(dueDate).format(\"HH:mm\")}`}</span>\r\n                                    </div>\r\n                                </div>}\r\n                                < CardDesc card={card} />                               \r\n                                {(card.checkList.length > 0) && < CardChecklist card={card} />}\r\n                                <Activities card={card} showCommentBox={true} activities={cardActivities} />\r\n                            </div>\r\n                            <div className=\"card-sidebar\">\r\n                                <button onClick={() => { toggleProperty('isMembersEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <PermIdentity className=\"icon\" /></span>Members</button>\r\n                                {isMembersEditShown &&\r\n                                    <MembersEdit members={this.props.board.members} card={card}\r\n                                        toggleProperty={toggleProperty} />}\r\n\r\n                                <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"card-sidebar-btn\">\r\n                                    <span ><LabelOutlined className=\"icon\" /></span>Labels</button>\r\n\r\n                                {isLabelEditShown &&\r\n                                    <LabelsEdit card={card} toggleProperty={toggleProperty} />}\r\n\r\n                                {(card.checkList.length < 1) && <button className=\"card-sidebar-btn\"\r\n                                    onClick={this.addCheckList}><span>\r\n                                        <PlaylistAddCheck className=\"icon\" /></span>Checklist</button>}\r\n\r\n                                <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <Schedule className=\"icon\" /></span>Due Date</button>\r\n                                {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                                    toggleProperty={toggleProperty} />}\r\n                                {!imgUrl && <React.Fragment>\r\n                                    <label htmlFor=\"imgUrl\" className=\"card-sidebar-btn pointer\"><span>\r\n                                        <CropOriginal className=\"icon\" /></span>Cover</label>\r\n                                    <input className=\"display-none\" type=\"file\" id=\"imgUrl\"\r\n                                        onChange={this.onUploadImg} />\r\n                                </React.Fragment>}\r\n                                <button onClick={this.removeCard} className=\"card-sidebar-btn\"><span>\r\n                                    <DeleteForeverOutlined className=\"icon\"\r\n                                    /></span>Delete</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Card = connect(mapStateToProps, mapDispatchToProps)(_Card)","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport function BoardUserFilter(props) {\r\n\r\n    return (\r\n        <form className=\"search-input-container flex\" >\r\n            <input className=\"board-filter-input\" placeholder=\"Filter by user...\"\r\n                type=\"text\" list=\"users\" name=\"user\"\r\n                onChange={(event) => props.onInputChanged(event.target.value)} />\r\n            <SearchIcon className=\"search-icon\" />\r\n        </form >\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { loadBoard, updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { PhaseList } from '../cmps/PhaseList';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { BoardMenu } from '../cmps/boardMenu/BoardMenu';\r\nimport { ColorMenu } from '../cmps/boardMenu/ColorMenu';\r\nimport { PhotoMenu } from '../cmps/boardMenu/PhotoMenu';\r\nimport { MenuOutlined, PieChartOutlined, PersonAddOutlined } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { BackgroundMenu } from '../cmps/boardMenu/BackgroundMenu';\r\nimport { Card } from '../cmps/Card';\r\nimport { BoardUserFilter } from '../cmps/BoardUserFilter'\r\nimport { socketService } from '../services/socketService';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService.js';\r\nimport { MembersEdit } from '../cmps/MembersEdit'\r\n\r\n\r\nclass _Board extends Component {\r\n\r\n    state = {\r\n        boardMenus: {\r\n            currentOpend: null,\r\n            menusState: {\r\n                mainMenu: false,\r\n                backgroundMenu: false,\r\n                colorMenu: false,\r\n                photoMenu: false\r\n            }\r\n        },\r\n        filteredByUser: null,\r\n        boardName: '',\r\n        isTitleOnEdit: false,\r\n        isMembersEditShown: false\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getBoardById();\r\n        this.openSocket();\r\n        if (this.props.match.params.cardId && this.props.board) {\r\n            const cardId = this.props.match.params.cardId;\r\n            const card = boardService.getCardById(this.props.board, cardId);\r\n            this.props.setCard(card);\r\n        } else this.props.setCard(null);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ((JSON.stringify(prevProps.match.params) !== JSON.stringify(this.props.match.params))\r\n            && this.props.board) {\r\n            if (this.props.match.params.cardId) {\r\n                this.loadCardById(this.props.match.params.cardId);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socketService.off('board updated', this.getBoardById);\r\n        socketService.terminate();\r\n    }\r\n\r\n    loadCardById = () => {\r\n        const cardId = this.props.match.params.cardId;\r\n        const card = boardService.getCardById(this.props.board, cardId);\r\n        this.props.setCard(card);\r\n    }\r\n\r\n    openSocket = () => {\r\n        socketService.setup();\r\n        const id = this.props.match.params.id;\r\n        socketService.emit('open board socket', id);\r\n        socketService.on('board updated', this.getBoardById)\r\n\r\n    }\r\n\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n        this.setState({ boardName: this.props.board.name })\r\n    }\r\n\r\n    toggleMenu = (menuName) => {\r\n        const { boardMenus } = this.state;\r\n        const clonedMenus = JSON.parse(JSON.stringify(boardMenus));\r\n        //close open menu if their is\r\n        if (!menuName) { //menuName===null mean no menu should be open\r\n            clonedMenus.menusState[clonedMenus.currentOpend] = false;\r\n            clonedMenus.currentOpend = null;\r\n        } else {\r\n            if (clonedMenus.currentOpend != null)\r\n                clonedMenus.menusState[clonedMenus.currentOpend] = !clonedMenus.menusState[clonedMenus.currentOpend];\r\n            //open menu new menu\r\n            clonedMenus.menusState[menuName] = !clonedMenus.menusState[menuName];\r\n            //set currentOpend \r\n            clonedMenus.currentOpend = menuName;\r\n        }\r\n        this.setState({ boardMenus: clonedMenus }, () => {\r\n            if (this.state.boardMenus.currentOpend) window.addEventListener('keydown', this.handleKeyDown);\r\n            else window.removeEventListener('keydown', this.handleKeyDown)\r\n        });\r\n    }\r\n\r\n    handleNameChange = ({ target }) => {\r\n        const value = target.value;\r\n        this.setState({ boardName: value });\r\n    }\r\n\r\n\r\n    handleChangeBoardName = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const nameBeforeChange = this.state.boardName;\r\n        if (!this.state.boardName.trim()) return this.toggleProperty('isTitleOnEdit');\r\n        boardService.addActivity(boardClone, this.props.user, OPERETIONS.UPDATE, TYPES.BOARD, { id: this.props.board._id, title: this.props.board.name },\r\n            `the name of the board from ${nameBeforeChange} to ${this.state.boardName}`);\r\n        boardClone.name = this.state.boardName;\r\n        this.props.updateBoard(boardClone);\r\n        this.toggleProperty('isTitleOnEdit');\r\n    }\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    handleKeyDown = (ev) => {\r\n        if (ev.code === 'Escape') this.toggleMenu(null);\r\n    }\r\n    onInputChanged = async (name) => {\r\n        await this.setState({ filteredByUser: name })\r\n    }\r\n\r\n    toggleProperty = (property, ev) => {\r\n        if (ev) ev.stopPropagation();\r\n        if (ev.target.className === 'search-name') return;\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { filteredByUser, isTitleOnEdit } = this.state;\r\n        const { isMembersEditShown } = this.state;\r\n        const { board } = this.props;\r\n        if ((!board) || (!this.state)) return '';\r\n\r\n        const { mainMenu, backgroundMenu, colorMenu, photoMenu } = this.state.boardMenus.menusState;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n\r\n        return (\r\n            (!board) ? 'loading' : <main style={boardBg} className=\"board flex column grow\">\r\n                <section className=\"board-nav flex space-between align-center\">\r\n                    <div className=\"board-nav-controls flex align-center wrap\">\r\n                        {!isTitleOnEdit && <h4 onClick={() => { this.toggleProperty('isTitleOnEdit') }}\r\n                            className=\"board-title\">{board.name}</h4>}\r\n                        {isTitleOnEdit && <input className=\"board-title grow\" type=\"text\" name=\"txt\"\r\n                            onChange={(e) => this.handleNameChange(e)} spellCheck=\"false\" autoFocus\r\n                            onBlur={this.handleChangeBoardName} value={this.state.boardName}\r\n                            onKeyDown={this.handleKeyPress} />}\r\n                        <span className=\"board-nav-divider\"></span>\r\n                        <div className=\"board-members flex align-center\">\r\n                            {board.members && board.members.map((member) =>\r\n                                <MemberInitials key={member._id} member={member} />)}\r\n                        </div>\r\n                        <div className=\"add-member\" onClick={(ev) => this.toggleProperty(\"isMembersEditShown\", ev)}>\r\n                            <PersonAddOutlined className=\"icon\" />\r\n\r\n                            {isMembersEditShown && <MembersEdit board={this.props.board}\r\n                                toggleProperty={this.toggleProperty} />}\r\n                        </div>\r\n\r\n                        <BoardUserFilter users={board.members} onInputChanged={this.onInputChanged} />\r\n                        <Link to={`/board/${board._id}/dashboard`}>\r\n                            <div className=\"nav-btn  flex align-center\">\r\n                                <PieChartOutlined className=\"nav-icon\" />\r\n                                <span className=\"btn-text\">Statistics</span>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"nav-btn flex align-center\" onClick={() => this.toggleMenu(\"mainMenu\")}>\r\n                        <MenuOutlined />\r\n                    </div>\r\n                    <BoardMenu isMenuShown={mainMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <BackgroundMenu isMenuShown={backgroundMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <ColorMenu isMenuShown={colorMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <PhotoMenu isMenuShown={photoMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                </section>\r\n                <section className=\"board-content flex grow\">\r\n                    <PhaseList filteredByUser={filteredByUser} />\r\n                </section>\r\n                {this.props.card && <Card cardId={this.props.card.id} />}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card,\r\n        user: state.trelloUser.user,\r\n        users: state.trelloUser.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nclass _Home extends Component {\r\n    render() {\r\n        return (\r\n            <main className=\"home-container flex\">\r\n                <div className=\"text-area flex column align-start\">\r\n                    <h1>Don't Waste Papers</h1>\r\n                    <h3><span className=\"logo\">Flowz</span>\r\n                     the project managment software that keep teams going and Collaborate</h3>\r\n\r\n                    <Link to=\"/board/5ecbc8edcb39d7f5494f8d40\"> <span className=\"btn-home\">Get Started</span></Link>\r\n                </div>\r\n\r\n\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(_Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../store/actions/userActions'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass _SignIn extends Component {\r\n    state = {\r\n\r\n        loginCred: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        msg: '',\r\n        error: ''\r\n    }\r\n\r\n    loginHandleChange = ev => {\r\n        const { name, value } = ev.target;\r\n        this.setState(prevState => ({\r\n            loginCred: {\r\n                ...prevState.loginCred,\r\n                [name]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n\r\n    doLogin = async ev => {\r\n        ev.preventDefault();\r\n        const { email, password } = this.state.loginCred;\r\n        if (!email || !password) {\r\n            this.setState({ msg: 'Please enter correct user/password' });\r\n        } else {\r\n            const userCreds = { email, password };\r\n            try {\r\n                this.setState({error: ''})\r\n                this.props.login(userCreds);\r\n            }\r\n            catch (error) {\r\n                this.setState({ error });\r\n\r\n            }\r\n            this.setState({ loginCred: { email: '', password: '' }, msg: '' }, () => { this.props.history.push('/boards') });\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"sign-in\">\r\n                <p>{this.state.msg}</p>\r\n                <form className=\"sign-in-form\" onSubmit={this.doLogin} noValidate>\r\n\r\n\r\n                    <TextField onChange={this.loginHandleChange}\r\n                        className=\"signin-email\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n\r\n                    <TextField onChange={this.loginHandleChange}\r\n                        className=\"signin-password\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"sign-in-submit-btn\"\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n\r\n\r\n                </form>\r\n                {this.state.error &&<span className=\"error-login\">{this.state.error}</span>}\r\n\r\n                <a href=\"/signUp\" className=\"sign-in-link\">\r\n                    Dont have an account? Sign Up\r\n                    </a>\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.trelloUser.userReducer\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    login\r\n}\r\n\r\nexport const SignIn = connect(mapStateToProps, mapDispatchToProps)(_SignIn);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../store/actions/userActions'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nclass _SignUp extends Component {\r\n    state = {\r\n        msg: '',\r\n        error: '',\r\n        signupCred: {\r\n            email: '',\r\n            password: '',\r\n            fullName: ''\r\n        }\r\n    }\r\n\r\n    signupHandleChange = ev => {\r\n        const { name, value } = ev.target;\r\n        this.setState(prevState => ({\r\n            signupCred: {\r\n                ...prevState.signupCred,\r\n                [name]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n    doSignup = async ev => {\r\n        ev.preventDefault();\r\n        const { email, password, fullName } = this.state.signupCred;\r\n        if (!email || !password || !fullName) {\r\n            return this.setState({ msg: 'All inputs are required!' });\r\n        }\r\n        const signupCreds = { email, password, fullName };\r\n        try {\r\n            this.setState({ error: '' })\r\n            await this.props.signup(signupCreds);\r\n            this.setState({ signupCred: { email: '', password: '', fullName: '' } });\r\n            this.props.history.push('/login');\r\n        } catch (error) {\r\n            console.log('error: ', error);\r\n            this.setState({ error });\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"sign-up\">\r\n\r\n                <p>{this.state.msg}</p>\r\n\r\n                <form className=\"sign-up-form\" onSubmit={this.doSignup} noValidate>\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-full-name\"\r\n                        autoComplete=\"fname\"\r\n                        name=\"fullName\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"fullName\"\r\n                        label=\"Full Name\"\r\n                        autoFocus\r\n                    />\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-email\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n\r\n                    <TextField onChange={this.signupHandleChange}\r\n                        className=\"signup-password\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n\r\n                    <Button\r\n\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"sign-up-submit-btn\"\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                </form>\r\n                {this.state.error && <span className=\"error-login\">{this.state.error}</span>}\r\n\r\n\r\n\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.trelloUser.userReducer\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n    signup\r\n}\r\n\r\nexport const SignUp = connect(mapStateToProps, mapDispatchToProps)(_SignUp);\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { boardService } from '../services/boardService'\r\nimport { HomeOutlined, DashboardOutlined, AccountTreeOutlined, Add, Close } from '@material-ui/icons';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, addBoard } from '../store/actions/boardActions';\r\nimport { logout, login } from '../store/actions/userActions'\r\nconst DEFAULT_USER_ID = \"5ed4fd7181471d4e7041dcbe\"\r\n\r\nclass _MainNav extends Component {\r\n\r\n\r\n    state = {\r\n        isCreateBoardMenuShown: false,\r\n        newBoardName: '',\r\n        newBoardColor: '#61acca'\r\n    }\r\n\r\n\r\n    handleChangeColor = async ({ target }) => {\r\n\r\n        const boardColor = target.value;\r\n        await this.setState({ newBoardColor: boardColor });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ newBoardName: value })\r\n    }\r\n\r\n    toggleAddBoard = () => {\r\n        this.setState(prevState => ({ isCreateBoardMenuShown: !prevState.isCreateBoardMenuShown }))\r\n    }\r\n\r\n    createNewBoard = async () => {\r\n        let boardName;\r\n        if (!this.state.newBoardName.trim()) boardName = 'New Board';\r\n        else boardName = this.state.newBoardName;\r\n        const newBoard = boardService.createNewBoard(boardName, this.state.newBoardColor, this.props.user);\r\n        await this.props.addBoard(newBoard);\r\n        history.push(`/board/${this.props.board._id}`)\r\n        this.setState({ isCreateBoardMenuShown: false, newBoardName: '' })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isCreateBoardMenuShown, newBoardName, newBoardColor } = this.state\r\n        const { user } = this.props;\r\n        if (!this.state) return ''\r\n        return (\r\n            <header className=\"main-header flex space-between\">\r\n                <nav className=\"flex align-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <HomeOutlined className=\"btn-icon\" />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/boards\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <DashboardOutlined className=\"btn-icon\" />\r\n                            <span className=\"btn-text\">Boards</span>\r\n                        </div>\r\n                    </Link>\r\n                </nav>\r\n\r\n                <div className=\"nav-center flex align-center justify-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"logo flex align-center\">\r\n                            <AccountTreeOutlined className=\"btn-icon\" />\r\n                            <span className=\"logo-text\">Flowz</span>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <nav className=\"right-nav flex flex-end align-center\">\r\n                    <div className=\"btn-main-nav flex align-center\" onClick={this.toggleAddBoard}>\r\n                        <Add className=\"btn-icon\" />\r\n                    </div>\r\n                    {isCreateBoardMenuShown && <div className=\"create-board-menu  flex column\">\r\n                        <div className=\"create-board-header flex align-center\">\r\n                            <h5 className=\"grow\">New Board</h5>\r\n                            <Close className=\"close-create-board-menu\" onClick={this.toggleAddBoard} />\r\n                        </div>\r\n                        <div className=\"create-board-btns flex column\">\r\n                            <div className=\"color-container\">\r\n\r\n                                <label className={\"rgb(81, 152, 57)\" === newBoardColor ? \"color-preview green selected\" : \"color-preview green\"}  >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"green\" value=\"rgb(81, 152, 57)\" /></label>\r\n\r\n                                <label className={\"#d29034\" === newBoardColor ? \"color-preview orange selected\" : \"color-preview orange\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"orange\" value=\"#d29034\" /></label>\r\n\r\n                                <label className={\"rgb(0, 121, 191)\" === newBoardColor ? \"color-preview blue selected\" : \"color-preview blue\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"blue\" value=\"rgb(0, 121, 191)\" /></label>\r\n\r\n                                <label className={\"rgb(176, 70, 50)\" === newBoardColor ? \"color-preview red selected\" : \"color-preview red\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"red\" value=\"rgb(176, 70, 50)\" /></label>\r\n\r\n                                <label className={\"rgb(137, 96, 158)\" === newBoardColor ? \"color-preview purple selected\" : \"color-preview purple\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"purple\" value=\"rgb(137, 96, 158)\" /></label>\r\n\r\n                                <label className={\"rgb(205, 90, 145)\" === newBoardColor ? \"color-preview pink selected\" : \"color-preview pink\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"pink\" value=\"rgb(205, 90, 145)\" /></label>\r\n\r\n                                <label className={\"rgb(75, 191, 107)\" === newBoardColor ? \"color-preview light-green selected\" : \"color-preview light-green\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"light-green\" value=\"rgb(75, 191, 107)\" /></label>\r\n\r\n                                <label className={\"rgb(73, 169, 215)\" === newBoardColor ? \"color-preview turquise selected\" : \"color-preview turquise\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"turquise\" value=\"rgb(73, 169, 215)\" /></label>\r\n                            </div>\r\n                            <input className=\"board-name-input\" type=\"text\" onChange={this.handleChange} placeholder=\"Your Board's name...\" value={newBoardName} />\r\n                            <button className=\"create-board-btn\" onClick={this.createNewBoard} >Create a new Board</button>\r\n                        </div>\r\n                    </div>}\r\n                    {(user && user._id !== DEFAULT_USER_ID) &&\r\n                        <div className=\"logout-btn btn-main-nav flex align-center\">\r\n                            <span className=\"btn-text\" onClick={this.props.logout}>Logout</span>\r\n                        </div>}\r\n                    {(user) && <span className=\"logged-in flex align-center\"><MemberInitials member={user} /></span>}\r\n\r\n                    {user && user._id === DEFAULT_USER_ID && <div className=\"login-btn btn-main-nav flex align-center\">\r\n                        <Link to=\"/login\"> <span className=\"btn-text\">Login</span></Link>\r\n                    </div>}\r\n                </nav>\r\n            </header >\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        user: state.trelloUser.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    addBoard,\r\n    logout,\r\n    login\r\n}\r\n\r\n\r\nexport const MainNav = connect(mapStateToProps, mapDispatchToProps)(_MainNav)\r\n\r\n","import React, { Component } from 'react'\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, queryBoards } from '../store/actions/boardActions';\r\n\r\nclass _Boards extends Component {\r\n    componentDidMount() {\r\n\r\n        this.props.queryBoards();\r\n    }\r\n\r\n    handleLoadBoard = (id) => {\r\n        this.props.loadBoard(id)\r\n        history.push(`/board/${id}`)\r\n    }\r\n\r\n    render() {\r\n\r\n        const { boards } = this.props\r\n        return (\r\n            <section className=\"boards-page\">\r\n                <div className='boards' >\r\n                    <h1 className=\"boards-title flex\">Boards</h1>\r\n                    <div className=\"boards-container\">\r\n                        {!boards && <p>Your boards will appear here</p>}\r\n                        {boards && boards.map((board, idx) =>\r\n                            <div className={`board-item board-item${idx}`} key={idx}\r\n                                onClick={() => this.handleLoadBoard(board._id)}\r\n                                style={board.imgUrl ?\r\n                                    { backgroundImage: `url(${board.imgUrl})`, backgroundSize: 'cover' } : { backgroundColor: board.bgColor }} >\r\n                                {<h3>{board.name}</h3>}\r\n                            </div>)}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        boards: state.trelloApp.boards,\r\n        user: state.trelloApp.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    queryBoards\r\n}\r\n\r\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport { connect } from 'react-redux';\r\nimport { history } from '../history'\r\nimport { loadBoard, } from '../store/actions/boardActions';\r\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport { boardService } from '../services/boardService';\r\n\r\nconst bgColors =\r\n    [\r\n        '#273d5d',\r\n        '#C492B1',\r\n        '#00ca78',\r\n        '#a8eb12',\r\n\r\n        '#ee6352',\r\n        '#DA4167',\r\n        '#ffb5d7',\r\n        '#72709e',\r\n\r\n        '#F6AE2D',\r\n        '#C9E3AC',\r\n        '#9580b0',\r\n        '#b991bf',\r\n        '#dda2cc',\r\n\r\n\r\n    ];\r\nconst hovColors =\r\n    [\r\n\r\n        '#273d5dc2',\r\n        '#C492B1c2',\r\n        '#00ca78c2',\r\n        '#a8eb12c2',\r\n\r\n        '#ee6352c2',\r\n        '#DA4167c2',\r\n        '#ffb5d7c2',\r\n        '#72709ec2',\r\n\r\n        '#F6AE2Dc2',\r\n        '#C9E3ACc2',\r\n        '#9580b0c2',\r\n        '#b991bfc2',\r\n        '#dda2ccc2',\r\n\r\n    ];\r\n\r\n\r\nclass _Dashboard extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n    }\r\n\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    getSprintProgress = () => {\r\n\r\n        const { board } = this.props;\r\n        var getSprintProgressMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.checkList.forEach(checkListItem => {\r\n                    if (checkListItem.isDone) {\r\n                        (!getSprintProgressMap[\"Completed\"]) ? getSprintProgressMap[\"Completed\"] = 1 : getSprintProgressMap[\"Completed\"] += 1;\r\n                    } else {\r\n                        (!getSprintProgressMap[\"In Progress\"]) ? getSprintProgressMap[\"In Progress\"] = 1 : getSprintProgressMap[\"In Progress\"] += 1;\r\n                    }\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(getSprintProgressMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Sprint Progress\",\r\n                data: [...Object.values(getSprintProgressMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTaskPerPhaseDistribution = () => {\r\n        const { board } = this.props;\r\n        var phaseTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n\r\n                (!phaseTaskMap[phase.name]) ? phaseTaskMap[phase.name] = 1 : phaseTaskMap[phase.name] += 1;\r\n\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n\r\n                ...Object.keys(phaseTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks Per Phase Distribution\",\r\n                data: [...Object.values(phaseTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n    getTaskByLables = () => {\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.labels.forEach(label => {\r\n                    (!devTaskMap[label.txt]) ? devTaskMap[label.txt] = 1 : devTaskMap[label.txt] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks by Label\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTasksPerDevloperData() {\r\n\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.assignedTo.forEach(member => {\r\n                    (!devTaskMap[member.fullName]) ? devTaskMap[member.fullName] = 1 : devTaskMap[member.fullName] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks Per Developer\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    goBack = () => {\r\n        history.push(`/board/${this.props.match.params.id}`);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board) return 'loading';\r\n        const tPerDevloper = this.getTasksPerDevloperData();\r\n        const taskPerPhaseDistribution = this.getTaskPerPhaseDistribution();\r\n        const tasksByLabels = this.getTaskByLables();\r\n        const sprintProgress = this.getSprintProgress();\r\n        const boardStats = boardService.getBoardStats(this.props.board);\r\n        return (\r\n\r\n            <div className=\"dashboard grow\">\r\n                <div className=\"btn-back flex space-between align-center\" onClick={this.goBack} >\r\n                    <ArrowBackIosOutlinedIcon className=\"icon\" />\r\n                    <span>Back</span>\r\n                </div>\r\n                <div className=\"dashboard-stats flex justify-center\">\r\n                    <div className=\"data-preview flex column justify-center\">\r\n                        <span className=\"number\">{boardStats.cardsCount ? boardStats.cardsCount : 0}</span>\r\n                        <span className=\"data-desc\">Total Cards</span></div>\r\n                    <div className=\"data-preview flex column justify-center\">\r\n                        <span className=\"number\">{boardStats.unassigned ? boardStats.unassigned : 0}</span>\r\n                        <span className=\"data-desc\">Unassigned Cards</span>\r\n                    </div>\r\n                    <div className=\"data-preview flex column justify-center\">\r\n                        <span className=\"number\">{boardStats.addedToday ? boardStats.addedToday : 0}</span>\r\n                        <span className=\"data-desc\">Added Today</span>\r\n                    </div>\r\n                </div>\r\n                <section className=\"chart-cont flex column justify-center align-center\">\r\n                    <article className=\"chart sprint-progress flex justify-center column align-center\">\r\n                        <h2>Sprint Progress</h2>\r\n                        <Pie className=\"chart-stats\" data={sprintProgress} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-per-devloper flex column justify-center align-center\">\r\n                        <h2>Tasks Per Developer</h2>\r\n                        <Bar className=\"chart-stats\" data={tPerDevloper} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            },\r\n                            legend: {\r\n                                display: false\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                    <article className=\"chart tasks-per-phase flex column justify-center align-center\">\r\n                        <h2>Tasks Per Phase</h2>\r\n                        <Doughnut className=\"chart-stats\" data={taskPerPhaseDistribution} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-by-lables flex column justify-center align-center\">\r\n                        <h2>Tasks By Label</h2>\r\n                        <Bar className=\"chart-stats\" data={tasksByLabels} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            },\r\n                            legend: {\r\n                                display: false\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                </section>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(_Dashboard)\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { history } from './history';\r\nimport { Board } from './pages/Board';\r\nimport { Home } from './pages/Home';\r\nimport { SignIn } from './pages/SignIn';\r\nimport { SignUp } from './pages/SignUp';\r\nimport { MainNav } from './cmps/MainNav';\r\nimport { Boards } from './pages/Boards';\r\nimport { Dashboard } from './pages/Dashboard';\r\n\r\nexport function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router history={history}>\r\n        <MainNav />\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id/dashboard\" component={Dashboard} exact/>\r\n          <Route path=\"/board/:id/:cardId?\" component={Board} exact />\r\n          <Route path=\"/login\" component={SignIn} exact />\r\n          <Route path=\"/signup\" component={SignUp} exact />\r\n          <Route path=\"/boards\" component={Boards} exact />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_BOARD, QUERY_BOARDS, REMOVE_BOARD, ADD_BOARD, LOAD_BOARD } from '../actions/boardActions';\r\nimport { socketService } from '../../services/socketService';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    boards: [],\r\n    board: null,\r\n    card: null\r\n}\r\n\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUERY_BOARDS:\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case LOAD_BOARD:            \r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            };\r\n        case ADD_BOARD:\r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            };\r\n        case UPDATE_BOARD:            \r\n            socketService.emit('board updated', action.board._id)\r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            }\r\n        case REMOVE_BOARD:\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            };\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                card: action.card\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\n","let localLoggedinUser = null;\r\nconst GUEST_USER = {\r\n    \"_id\": \"5ed4fd7181471d4e7041dcbe\",\r\n    \"email\": \"guest@guest.co.il\",\r\n    \"fullName\": \"Guest Guest\",\r\n    \"img\": \"https://img.icons8.com/plasticine/2x/user.png\"\r\n}\r\n\r\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\nelse localLoggedinUser = GUEST_USER;\r\n\r\nconst initialState = {\r\n    users: [],\r\n    user: localLoggedinUser\r\n}\r\n\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_USER': {\r\n            const logedInUser = (!action.user) ? localLoggedinUser : action.user\r\n            return { ...state, user: logedInUser };\r\n        }\r\n        case 'USER_REMOVE':\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(user => user._id !== action.userId)\r\n            };\r\n        case 'SET_USERS':\r\n            return { ...state, users: action.users };\r\n        case 'ADD_USER':\r\n            return {\r\n                ...state,\r\n                users: [...state.users, action.user]\r\n            };\r\n        case 'QUERY_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n\r\n}\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { boardReducer } from './boardReducer'\r\nimport { userReducer } from './userReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    trelloApp: boardReducer,\r\n    trelloUser: userReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './style/global.scss';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}