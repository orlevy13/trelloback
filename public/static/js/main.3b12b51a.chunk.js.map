{"version":3,"sources":["services/unsplashService.js","style/img/collage.jpg","style/img/colors.jpg","history.js","services/httpService.js","services/boardService.js","services/socketService.js","store/actions/boardActions.js","cmps/AddCard.jsx","cmps/CardLabels.jsx","cmps/DueBadge.jsx","cmps/MemberInitials.jsx","cmps/LabelEdit.jsx","cmps/AddLabel.jsx","cmps/LabelsEdit.jsx","cmps/MemberEdit.jsx","cmps/MembersEdit.jsx","cmps/DueDateEdit.jsx","cmps/CardMenu.jsx","cmps/CardPreview.jsx","cmps/PhasePreview.jsx","cmps/PhaseList.jsx","cmps/Activity.jsx","cmps/Activities.jsx","cmps/boardMenu/BoardMenu.jsx","cmps/boardMenu/ColorMenu.jsx","cmps/boardMenu/PhotoMenu.jsx","cmps/boardMenu/BackgroundMenu.jsx","cmps/CardHeader.jsx","cmps/CardDesc.jsx","cmps/ChecklistItem.jsx","cmps/CardChecklist.jsx","services/cloudinaryService.js","cmps/CardImage.jsx","cmps/Card.jsx","cmps/BoardUserFilter.jsx","pages/Board.jsx","pages/Home.jsx","pages/SignIn.jsx","services/userService.js","pages/SignUp.jsx","store/actions/userActions.js","cmps/MainNav.jsx","pages/Boards.jsx","pages/Dashboard.jsx","App.jsx","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/userReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["global","fetch","unsplash","Unsplash","accessKey","unsplashService","getListPhotos","perPage","page","_getRandomInt","photos","listPhotos","then","res","json","min","max","Math","ceil","floor","random","module","exports","history","createBrowserHistory","httpService","endpoint","data","ajax","a","method","axios","url","console","dir","response","status","push","OPERETIONS","TYPES","filter","boards","id","board","addboard","updateboard","makeId","length","txt","possible","i","charAt","socket","boardService","query","getById","remove","add","update","getBoardCopy","JSON","parse","stringify","getNewCard","partialCard","bgColor","desc","dueDate","createdAt","Date","now","labels","checkList","assignedTo","attachments","getNewPhase","name","cards","getSortedPhase","sortBy","phase","sort","card1","card2","title","localeCompare","addActivity","user","operation","type","object","activity","at","activities","unshift","createNewBoard","loggedInUser","creator","members","phaseLists","isLabelTxtShown","imgUrl","getNewLabel","color","socketService","setup","io","terminate","on","eventName","cb","off","emit","LOGGED_IN_USER","loadBoard","dispatch","updateBoard","updatedBoard","state","_id","setCard","card","_AddCard","handleChange","target","setState","value","onAddCard","ev","preventDefault","trim","boardCopy","props","phaseIdx","findIndex","phaseId","newCard","bottomCard","scrollIntoView","behavior","handleClick","addCardBtn","cardNameInput","form","dispatchEvent","Event","cancelable","toggleAddCardShown","this","isAddCardShown","addEventListener","submitOnEnter","window","removeEventListener","which","shiftKey","Fragment","className","onSubmit","required","autoFocus","autoComplete","onChange","spellCheck","ref","el","placeholder","onClick","Close","Component","mapDispatchToProps","AddCard","connect","trelloApp","_CardLabels","toggleIsLabelTxtShown","stopPropagation","getUpdatedLabels","reduce","acc","label","foundLabel","find","boardLabel","labelClassName","map","style","backgroundColor","key","CardLabels","DueBadge","displayDate","moment","format","isDueClose","AccessTime","fontSize","MemberInitials","firstLastName","initials","member","fullName","split","str","join","slice","img","toUpperCase","LabelEdit","toggleEditMode","isLabelOnCard","some","lbl","toggleLabelOnCard","Check","CreateOutlined","AddLabel","handleChangeColor","handleSubmit","addLabel","toggleIsAddLabelShown","Clear","_LabelsEdit","editLabel","isAddLabelShown","hideLabelsEdit","code","toggleProperty","prevState","saveLabel","editedLabel","cardId","cardIdx","partialLabel","labelToSave","removeLabel","updatedLabels","Add","LabelsEdit","MemberEdit","toggleMemberOnCard","isMemberOnCard","mmbr","_MembersEdit","hideMembersEdit","membersToDisplay","toLowerCase","includes","MembersEdit","DueDateEdit","hideDueDateEdit","handleDateChange","date","_d","getTime","handleSave","changeDueDate","removeDueDate","DateTimePicker","disablePast","views","minDateMessage","_CardMenu","isLabelEditShown","isMembersEditShown","isDueDateEditShown","hideMenu","toggleIsMenuShown","getPhaseIdxByCardId","onDelete","onChangeTitle","newDate","property","titleInput","onMouseDown","cols","rows","LabelOutlined","PersonOutlineOutlined","DeleteForeverOutlined","CardMenu","_CardPreview","isMenuShown","checklistDoneCount","item","isDone","checklistBgc","checklistColor","draggableId","index","provided","snapshot","draggableProps","onContextMenu","dragHandleProps","innerRef","alt","src","AttachmentOutlined","CheckBoxOutlined","React","CardPreview","_PhasePreview","isInputShown","isSortShown","newPhaseName","toggleInputShown","hideInput","toggleMenuShown","showAddCard","toggleIsSortShown","sortListBy","sortedPhase","onDeletePhase","isDropAnimating","onBlur","MoreHoriz","droppableId","droppableProps","opacity","PhasePreview","_PhaseList","newListName","phaseListToShow","removeEventListeners","addEventListeners","listNameInput","submitBtn","onAddPhase","newPhase","listForm","inline","onDragEnd","result","destination","source","newPhasesOrder","movingPhase","splice","srcPhase","dstPhase","movingCard","getFilteredPhaseLists","filteredByUser","prevProps","searchedName","cloneBoard","direction","PhaseList","_Activity","dynamicActivity","userElmemnt","elmentType","href","rel","OpenByObjectType","fromNow","allowOpenCard","boardClone","onCloseMenu","Activity","_Activities","onEnterDown","handleSaveBoard","showCommentBox","ListOutlined","onKeyDown","Activities","BoardMenu","shownClass","boardBg","CloseOutlined","onToggleMenu","_ColorMenu","changeBoardColor","clonedBoard","ArrowBackIosOutlined","ColorMenu","_PhotoMenu","imgs","changeBoardImg","thumbUrl","urls","thumb","regularUrl","regular","fullUrl","full","credit","links","html","userName","PhotoMenu","BackgroundMenu","require","_CardHeader","onPhase","isTitleOnEdit","toggleInput","forEach","autoGrow","elTextarea","height","scrollHeight","backToboard","currPhase","e","keyCode","blur","onFocus","handleKeyPress","autoCorrect","CardHeader","_CardDesc","CardDesc","ChecklistItem","idx","todo","checked","_CardChecklist","todoText","onAdd","progress","checklistTitle","progressBarUpdate","doneTodos","currVal","addTodo","newTodo","clone","updatedCards","phaseIndex","toggleAdd","field","cloneChkList","handleFocus","select","progressBgc","PlaylistAddCheck","width","CardChecklist","UPLOAD_URL","formData","FormData","append","files","post","error","cloudinaryService","uploadImg","CardImage","isImgLoading","removeImgUrl","secondaryColor","_Card","cardActivities","hideCard","getActivities","limit","addCheckList","cloneCard","removeMemberFromCard","onUploadImg","PermIdentity","Schedule","Attachment","htmlFor","CropOriginal","Card","BoardUserFilter","list","event","onInputChanged","_Board","boardMenus","currentOpend","menusState","mainMenu","backgroundMenu","colorMenu","photoMenu","openSocket","match","params","getBoardById","toggleMenu","menuName","clonedMenus","handleKeyDown","users","to","PieChartOutlined","MenuOutlined","Board","_Home","Home","Copyright","Typography","variant","align","Link","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","palette","secondary","main","submit","SignIn","classes","Container","component","maxWidth","CssBaseline","Avatar","noValidate","TextField","fullWidth","FormControlLabel","control","Checkbox","Button","Grid","container","xs","Box","mt","addeduser","newUser","createfullName","fName","lName","password","email","updateuser","userService","getUserCopy","_SignUp","firstName","lastName","log","submitForm","addUser","onsubmit","addedUser","SignUp","trelloUser","userReducer","_MainNav","isCreateBoardMenuShown","newBoardName","newBoardColor","boardColor","toggleAddBoard","boardName","newBoard","addBoard","HomeOutlined","DashboardOutlined","AccountTreeOutlined","addedBoard","MainNav","_Boards","handleLoadBoard","queryBoards","backgroundImage","backgroundSize","Boards","bgColors","hovColors","_Dashboard","getSprintProgress","getSprintProgressMap","checkListItem","Object","keys","datasets","values","hoverBackgroundColor","getTaskPerPhaseDistribution","phaseTaskMap","getTaskByLables","devTaskMap","goBack","tPerDevloper","getTasksPerDevloperData","taskPerPhaseDistribution","tasksByLabels","sprintProgress","options","scales","yAxes","ticks","beginAtZero","Dashboard","App","path","exact","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","boardId","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","utils","MomentUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3b12b51a.chunk.js","sourcesContent":["import fetch from 'node-fetch';\r\nimport Unsplash from 'unsplash-js';\r\nglobal.fetch = fetch;\r\nconst unsplash = new Unsplash({ accessKey: \"8ZH8zzN8CDDrZJWGYhpPmzEreLvOZ6WRPVTgnEH_6Ac\" });\r\n\r\n\r\nfunction getListPhotos(perPage = 14) {\r\n    const page = _getRandomInt(1, 5)\r\n    return unsplash.photos.listPhotos(page, perPage, \"popular\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const unsplashService = {\r\n    getListPhotos\r\n}\r\nfunction _getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/collage.48948499.jpg\";","module.exports = __webpack_public_path__ + \"static/media/colors.864f4df1.jpg\";","import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();\r\n","import { history } from '../history';\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import { httpService } from './httpService';\r\nexport const OPERETIONS = {\r\n    ADD: 'Add',\r\n    UPDATE: 'Updated',\r\n    DELETE: 'Delete'\r\n}\r\nexport const TYPES = {\r\n    CARD: 'Card',\r\n    PHASE: 'Phase',\r\n    Board: 'Board'\r\n}\r\n\r\n\r\nasync function query(filter) {\r\n    var queryString = '';\r\n    // if (filter) {\r\n    //     if (filter.inStock !== '') queryString = `?inStock=${filter.inStock}`;\r\n    //     if (filter.type !== '') (queryString === '') ? queryString = `?type=${filter.type}` : queryString += `&type=${filter.type}`;\r\n    //     if (filter.name !== '') (queryString === '') ? queryString = `?q=${filter.name}` : queryString += `&q=${filter.name}`;\r\n    // }\r\n    const boards = await httpService.get(`board/${queryString}`);\r\n    return boards;\r\n}\r\n\r\nasync function getById(id) {\r\n    const board = await httpService.get(`board/${id}`);\r\n    return board\r\n}\r\n\r\nasync function add(addboard) {\r\n\r\n    const board = await httpService.post(`board`, addboard);\r\n    return board;\r\n}\r\n\r\nasync function update(updateboard) {\r\n    const board = await httpService.put('board', updateboard);\r\n    return board;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`board/${id}`);\r\n}\r\n\r\nfunction getBoardCopy(board) {\r\n    return JSON.parse(JSON.stringify(board));\r\n}\r\n\r\nfunction getNewCard(partialCard) {\r\n    return {\r\n        ...partialCard,//this currently has only a title\r\n        id: makeId(),\r\n        bgColor: '',\r\n        desc: '',\r\n        dueDate: null,\r\n        createdAt: Date.now(),\r\n        labels: [],\r\n        checkList: [],\r\n        assignedTo: [],\r\n        attachments: []\r\n    }\r\n}\r\n\r\nfunction getNewPhase(name) {\r\n    return {\r\n        id: makeId(),\r\n        name,\r\n        desc: '',\r\n        cards: []\r\n    }\r\n}\r\n\r\nfunction addActivity(board, user, operation, type, object, desc = null) {\r\n    const activity = {\r\n        at: Date.now(),\r\n        operation,\r\n        user,\r\n        type,\r\n        object,\r\n        desc\r\n    }\r\n    board.activities.unshift(activity);\r\n}\r\n\r\nfunction getSortedPhase(sortBy, phase) {\r\n    if (sortBy === 'title') {\r\n        return phase.cards.sort((card1, card2) => card1.title.localeCompare(card2.title))\r\n    } else if (sortBy === 'firstCreated') {\r\n        return phase.cards.sort((card1, card2) => card1.createdAt - card2.createdAt);\r\n    } else return phase.cards.sort((card1, card2) => card2.createdAt - card1.createdAt);\r\n}\r\n\r\nfunction createNewBoard(name, bgColor, loggedInUser) {\r\n    const _board = {\r\n\r\n        name: name,\r\n        bgColor: bgColor,\r\n        createdAt: Date.now(),\r\n        creator: loggedInUser,\r\n        members: [loggedInUser],\r\n        desc: null,\r\n        activities: [],\r\n        phaseLists: [],\r\n        labels: [],\r\n        isLabelTxtShown: false,\r\n        imgUrl: null\r\n    }\r\n    return _board;\r\n}\r\n\r\nfunction getNewLabel({ txt, color }) {\r\n    return {\r\n        txt,\r\n        color,\r\n        id: makeId(),\r\n    }\r\n}\r\n\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    add,\r\n    update,\r\n    makeId,\r\n    getBoardCopy,\r\n    getNewCard,\r\n    getNewPhase,\r\n    getSortedPhase,\r\n    addActivity,\r\n    createNewBoard,\r\n    getNewLabel\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport const socketService = {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import { boardService } from '../../services/boardService'\r\nimport { socketService } from '../../services/socketService'\r\nexport const LOAD_BOARD = 'LOAD_BOARD';\r\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\r\nexport const ADD_BOARD = 'ADD_BOARD';\r\nexport const REMOVE_BOARD = 'REMOVE_BOARD';\r\nexport const QUERY_BOARDS = 'QUERY_BOARDS'\r\nexport const CREATE_BOARD = 'CREATE_BOARD';\r\n\r\nexport const LOGGED_IN_USER = {\r\n    \"_id\": \"5eccd4e1cb39d7f54947fd7e\",\r\n    \"fullName\": \"Guest\",\r\n    \"email\": \"noemail@no.com\",\r\n    \"password\": \"123456\",\r\n    \"img\": \"https://img.icons8.com/plasticine/2x/user.png\"\r\n}\r\n\r\nexport function queryBoards(filter) {\r\n    return dispatch => {\r\n        boardService.query(filter)\r\n            .then(boards => dispatch({ type: QUERY_BOARDS, boards }));\r\n    }\r\n}\r\n\r\nexport function loadBoard(id) {\r\n    return async dispatch => {\r\n        const board = await boardService.getById(id);\r\n        dispatch({ type: LOAD_BOARD, board });\r\n    }\r\n}\r\n\r\nexport function addBoard(addedBoard) {\r\n    return async dispatch => {\r\n        const board = await boardService.add(addedBoard);\r\n        dispatch({ type: ADD_BOARD, board })\r\n    }\r\n}\r\n\r\nexport function updateBoard(updatedBoard) {\r\n\r\n    return async (dispatch, state) => {\r\n        //const keepBoard = boardService.getBoardCopy(state.board); not working right now the state.board is undifined; wierd!!!\r\n        dispatch({ type: UPDATE_BOARD, board: updatedBoard });\r\n\r\n        try {\r\n            await boardService.update(updatedBoard);\r\n        } catch (err) {\r\n            // dispatch({ type: UPDATE_BOARD, board: keepBoard });\r\n        }\r\n\r\n        socketService.emit('board updated', updatedBoard._id);\r\n    }\r\n}\r\n\r\nexport function removeBoard(boardId) {\r\n    return dispatch => {\r\n        boardService.remove(boardId)\r\n            .then(() => dispatch({ type: REMOVE_BOARD, boardId }));\r\n    }\r\n}\r\n\r\nexport function setCard(card) {\r\n    return dispatch => {\r\n        dispatch({ type: 'SET_CARD', card });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\nexport class _AddCard extends Component {\r\n    state = {\r\n        card: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.isAddCardShown) {\r\n            this.cardNameInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n            window.addEventListener(\"mouseup\", this.handleClick);\r\n            this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n        else window.removeEventListener(\"mouseup\", this.handleClick);\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } })\r\n    }\r\n\r\n    onAddCard = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.card.title.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === this.props.phaseId);\r\n        const newCard = boardService.getNewCard(this.state.card);\r\n        boardCopy.phaseLists[phaseIdx].cards.push(newCard);\r\n        boardService.addActivity(boardCopy, LOGGED_IN_USER, OPERETIONS.ADD, TYPES.CARD, { id: newCard.id, title: newCard.title });\r\n\r\n        await this.props.updateBoard(boardCopy);//async await is for the scroll\r\n        this.setState({ card: { title: '' } });\r\n        this.props.bottomCard.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleClick = (ev) => {\r\n        if (ev.target !== this.addCardBtn &&//If user clicked add button or the input\r\n            ev.target !== this.cardNameInput) {\r\n            if (this.state.card.title) {//If there's input- add the card\r\n                this.addCardBtn.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            }\r\n            this.props.toggleAddCardShown();\r\n        }//This rather than onBlur because it gives the user\r\n        // the experience of clicking the button himself\r\n    }\r\n\r\n    render() {\r\n        const { handleChange, onAddCard, state } = this;\r\n        const { toggleAddCardShown, isAddCardShown } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isAddCardShown && <form className=\"add-card\" onSubmit={onAddCard}>\r\n                    <textarea className=\"card-name-input\" required autoFocus type=\"text\"\r\n                        name=\"title\" autoComplete=\"off\" onChange={handleChange} spellCheck=\"false\"\r\n                        ref={el => this.cardNameInput = el} value={state.card.title}\r\n                        placeholder=\"Enter a title for this card..\" />\r\n                    <div className=\"form-btns flex align-end\">\r\n                        <button ref={(el) => this.addCardBtn = el} className=\"submit-btn\"\r\n                            type=\"submit\">Add Card</button>\r\n                        <button className=\"close-btn\" onClick={toggleAddCardShown}><Close /></button>\r\n                    </div>\r\n                </form>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const AddCard = connect(mapStateToProps, mapDispatchToProps)(_AddCard)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\n\r\nexport class _CardLabels extends Component {\r\n\r\n    toggleIsLabelTxtShown = (ev) => {\r\n        ev.stopPropagation();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.isLabelTxtShown = !boardCopy.isLabelTxtShown;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsLabelTxtShown } = this;\r\n        const { isLabelTxtShown } = this.props.board;\r\n        const labels = this.getUpdatedLabels();\r\n        const labelClassName = isLabelTxtShown ? 'shown' : '';\r\n        return (\r\n            <div className=\"labels-container flex wrap\">\r\n\r\n                {labels.map(label => <span title={label.txt} className={`label ${labelClassName}`}\r\n                    style={{ backgroundColor: label.color }}\r\n                    onClick={toggleIsLabelTxtShown} key={label.id}>\r\n                    <span className=\"label-txt\">\r\n                        {isLabelTxtShown && label.txt}</span>\r\n                </span>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const CardLabels = connect(mapStateToProps, mapDispatchToProps)(_CardLabels)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { AccessTime } from '@material-ui/icons';\r\n\r\nexport const DueBadge = ({ dueDate }) => {\r\n\r\n    const displayDate = dueDate ? moment(dueDate).format(\"MMM Do\") : null;\r\n    const isDueClose = ((dueDate - Date.now()) < 86400000) ? true : false;\r\n    const isDuePassed = Date.now() > dueDate ? true : false;\r\n    const backgroundColor = isDuePassed ? '#eb5a46' : isDueClose ? '#f2d600' : '';\r\n    const color = !backgroundColor ? '#5e6c84' : '#fff';\r\n\r\n    return (\r\n        <div style={{ backgroundColor, color }}\r\n            className=\"card-due flex align-center\"> <span className=\"due-icon\">\r\n                <AccessTime fontSize=\"small\" /></span>{displayDate}</div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function MemberInitials(props) {\r\n\r\n\r\n    var firstLastName;\r\n    if (props.member) {\r\n        firstLastName = props.member.fullName.split(' ');\r\n    } else {\r\n        firstLastName = props.fullName.split(' ');\r\n    }\r\n\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n    const { member } = props;\r\n    return (\r\n        <div title={firstLastName.join(' ')} className=\"member-avatar\">\r\n            {(!member || !member.img) && <span className='member-initial'>{initials.toUpperCase()}</span>}\r\n            {member && member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-initial-img\" ></span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n// className=\"member-img\"","import React from 'react';\r\nimport { CreateOutlined, Check } from '@material-ui/icons';\r\n\r\nexport function LabelEdit(props) {\r\n\r\n    const { label, toggleEditMode } = props;\r\n    const isLabelOnCard = props.card.labels.some(lbl => lbl.id === label.id);\r\n    return (\r\n        <div className=\"label-edit flex align-center\">\r\n            <span onClick={() => { props.toggleLabelOnCard(label) }}\r\n                className=\"grow flex align-center\" style={{ backgroundColor: label.color }}>\r\n                {label.txt}{isLabelOnCard && <Check className=\"icon\" />}\r\n            </span>\r\n            <button onClick={() => { toggleEditMode(label) }}>\r\n                <CreateOutlined className=\"icon\" /></button>\r\n        </div >\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport class AddLabel extends Component {\r\n\r\n    state = {\r\n        txt: '',\r\n        color: '#b3bac5'\r\n    }\r\n\r\n    handleChangeColor = ({ target }) => {\r\n        this.setState({ color: target.value });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ txt: target.value });\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        this.props.addLabel(this.state);\r\n    }\r\n\r\n    render() {\r\n        const { txt, color } = this.state;\r\n        return (\r\n            <section className=\"add-label\">\r\n                <div className=\"add-label-header flex align-center\">\r\n                    <p className=\"grow\">Add a label</p>\r\n                    <button onClick={this.props.toggleIsAddLabelShown}>\r\n                        <Clear /></button>\r\n                </div>\r\n                <div className=\"add-label-gallery\">\r\n                    <p>Select a color</p>\r\n                    <label className={\"#61bd4f\" === color ? \"color-preview c-61bd4f selected\" : \"color-preview c-61bd4f\"}  >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#61bd4f\" /></label>\r\n\r\n                    <label className={\"#f2d600\" === color ? \"color-preview f2d600 selected\" : \"color-preview f2d600\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#f2d600\" /></label>\r\n\r\n                    <label className={\"#ff9f1a\" === color ? \"color-preview ff9f1a selected\" : \"color-preview ff9f1a\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff9f1a\" /></label>\r\n\r\n                    <label className={\"#eb5a46\" === color ? \"color-preview eb5a46 selected\" : \"color-preview eb5a46\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#eb5a46\" /></label>\r\n\r\n                    <label className={\"#0079bf\" === color ? \"color-preview c-0079bf selected\" : \"color-preview c-0079bf\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#0079bf\" /></label>\r\n\r\n                    <label className={\"#00c2e0\" === color ? \"color-preview c-00c2e0 selected\" : \"color-preview c-00c2e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#00c2e0\" /></label>\r\n\r\n                    <label className={\"#ff78cb\" === color ? \"color-preview ff78cb selected\" : \"color-preview ff78cb\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#ff78cb\" /></label>\r\n\r\n                    <label className={\"#344563\" === color ? \"color-preview c-344563 selected\" : \"color-preview c-344563\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#344563\" /></label>\r\n\r\n                    <label className={\"#b3bac5\" === color ? \"color-preview b3bac5 selected\" : \"color-preview b3bac5\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#b3bac5\" /></label>\r\n\r\n                    <label className={\"#c377e0\" === color ? \"color-preview c377e0 selected\" : \"color-preview c377e0\"} >\r\n                        <input onClick={this.handleChangeColor} className=\"display-none\" type=\"radio\"\r\n                            value=\"#c377e0\" /></label>\r\n                    <form onSubmit={(ev) => {\r\n                        ev.preventDefault();\r\n                        this.props.addLabel(this.state);\r\n                    }}>\r\n                        <input type=\"text\" name=\"txt\" value={txt} autoFocus\r\n                            placeholder=\"Enter label name..\" required\r\n                            autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                        <button className=\"save-btn\">Save</button>\r\n                    </form>\r\n                    <button className=\"cancel-btn\" onClick={this.props.toggleIsAddLabelShown}>\r\n                        Cancel</button>\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { Clear, Add } from '@material-ui/icons';\r\nimport { boardService } from '../services/boardService';\r\nimport { LabelEdit } from './LabelEdit';\r\nimport { AddLabel } from './AddLabel';\r\n\r\nclass _LabelsEdit extends Component {\r\n\r\n    state = {\r\n        editLabel: null,\r\n        isAddLabelShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideLabelsEdit);\r\n    }\r\n\r\n    hideLabelsEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isLabelEditShown');\r\n    }\r\n\r\n    toggleEditMode = (editLabel) => {\r\n        this.setState({ editLabel });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({\r\n            editLabel: {\r\n                ...prevState.editLabel,\r\n                txt: target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    saveLabel = async (ev) => {\r\n        ev.preventDefault();\r\n        const editedLabel = this.state.editLabel;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n\r\n        boardCopy.labels = boardCopy.labels.map(label => {\r\n            if (label.id === editedLabel.id) return editedLabel;\r\n            return label;\r\n        })\r\n        await this.props.updateBoard(boardCopy);// The await might be neccessary when working with DB\r\n        this.toggleEditMode();\r\n    }\r\n\r\n    toggleLabelOnCard = (label) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card labels inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the card has the label or not and flip it\r\n        if (card.labels.some(lbl => lbl.id === label.id)) {\r\n            card.labels = card.labels.filter(lbl => lbl.id !== label.id);\r\n        } else {\r\n            card.labels.push(label);\r\n        }\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleIsAddLabelShown = () => {\r\n        this.setState(prevState => ({ isAddLabelShown: !prevState.isAddLabelShown }));\r\n    }\r\n\r\n    addLabel = (partialLabel) => {\r\n        const labelToSave = boardService.getNewLabel(partialLabel);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.labels.push(labelToSave);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsAddLabelShown();\r\n    }\r\n\r\n    removeLabel = (id) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = boardCopy.labels.filter(label => label.id !== id);\r\n        boardCopy.labels = updatedLabels;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleEditMode(null);\r\n    }\r\n\r\n    render() {\r\n        const { toggleEditMode, saveLabel, toggleLabelOnCard, removeLabel } = this;\r\n        const { editLabel, isAddLabelShown } = this.state;\r\n        const { labels } = this.props.board;\r\n        return (\r\n            <React.Fragment>\r\n                {!isAddLabelShown && <section className=\"edit-labels flex column\">\r\n                    <div className=\"edit-labels-header flex align-center\">\r\n                        <p className=\"grow\">Labels</p>\r\n                        <button onClick={() => { this.props.toggleProperty('isLabelEditShown') }}>\r\n                            <Clear /></button>\r\n                    </div>\r\n                    <div className=\"labels-gallery grow\">\r\n                        {!editLabel && labels.map(label => <LabelEdit toggleLabelOnCard={toggleLabelOnCard}\r\n                            card={this.props.card} saveLabel={saveLabel} key={label.id} label={label}\r\n                            toggleEditMode={toggleEditMode} />)}\r\n\r\n                        {editLabel && <div>\r\n                            <form onSubmit={saveLabel}>\r\n                                <input type=\"text\" name=\"txt\" value={editLabel.txt} autoFocus\r\n                                    autoComplete=\"off\" spellCheck=\"false\" onChange={this.handleChange} />\r\n                                <button className=\"save-btn\">Save</button>\r\n                            </form>\r\n                            <button className=\"cancel-btn\" onClick={() => { removeLabel(editLabel.id) }}>\r\n                                Delete</button>\r\n                        </div>}\r\n\r\n                    </div>\r\n                    <button className=\"add-label-btn flex align-center justify-center\"\r\n                        onClick={this.toggleIsAddLabelShown}\r\n                    ><Add className=\"add-icon\" />Add Label</button>\r\n                </section>}\r\n\r\n                {isAddLabelShown &&\r\n                    <AddLabel addLabel={this.addLabel}\r\n                        toggleIsAddLabelShown={this.toggleIsAddLabelShown} />}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const LabelsEdit = connect(mapStateToProps, mapDispatchToProps)(_LabelsEdit)","import React from 'react'\r\nimport { Check } from '@material-ui/icons';\r\n\r\nexport function MemberEdit(props) {\r\n    const { member, toggleMemberOnCard } = props;\r\n    const isMemberOnCard = props.card.assignedTo.some(mmbr => mmbr._id === member._id);\r\n    const firstLastName = member.fullName.toUpperCase().split(' ');\r\n    const initials = firstLastName.map(str => str.charAt(0)).join('').slice(0, 2);\r\n\r\n    return (\r\n        <div onClick={() => { toggleMemberOnCard(member) }}\r\n            className=\"member-item flex align-center\">\r\n            {!member.img && <div className=\"initials\"><span>{initials}</span></div>}\r\n            {member.img && <span style={{ \"backgroundImage\": \"url(\" + member.img + \")\" }}\r\n                className=\"member-img\"></span>}\r\n            {member.fullName}{isMemberOnCard && <Check className=\"icon\" />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { MemberEdit } from './MemberEdit';\r\nimport { boardService } from '../services/boardService';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\n\r\nexport class _MembersEdit extends Component {\r\n\r\n    state = {\r\n        name: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMembersEdit);\r\n    }\r\n\r\n    hideMembersEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isMembersEditShown');\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ name: target.value });\r\n    }\r\n\r\n    toggleMemberOnCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId)\r\n        )\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Checking if the member is assigned or not and flip it\r\n        if (card.assignedTo.some(mmbr => mmbr._id === member._id)) {\r\n            card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        } else card.assignedTo.push(member);\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { members, toggleProperty, card } = this.props;\r\n        const { name } = this.state;\r\n        const membersToDisplay = members.filter(mmbr =>\r\n            mmbr.fullName.toLowerCase().includes(name.toLowerCase()));\r\n        return (\r\n            <section className=\"edit-members\">\r\n                <div className=\"edit-members-header flex align-center\">\r\n                    <p className=\"grow\">Members</p>\r\n                    <button onClick={() => { toggleProperty('isMembersEditShown') }}><Clear /></button>\r\n                </div>\r\n                <input className=\"search-name\" onChange={this.handleChange} autoComplete=\"off\"\r\n                    type=\"search\" name=\"name\" value={name} placeholder=\"Search members\" />\r\n                <div className=\"members-gallery\">\r\n                    {members && membersToDisplay.map(member =>\r\n                        <MemberEdit toggleMemberOnCard={this.toggleMemberOnCard} card={card}\r\n                            key={member._id} member={member} />)}\r\n                </div>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const MembersEdit = connect(mapStateToProps, mapDispatchToProps)(_MembersEdit)","import React, { Component } from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\n\r\nexport class DueDateEdit extends Component {\r\n\r\n    state = {\r\n        dueDate: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideDueDateEdit);\r\n        this.setState({ dueDate: Date.now() })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideDueDateEdit);\r\n    }\r\n\r\n    hideDueDateEdit = (ev) => {\r\n        if (ev.code === 'Escape') this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    handleDateChange = date => {\r\n        this.setState({ dueDate: date._d.getTime() })\r\n    }\r\n\r\n    handleSave = () => {\r\n        this.props.changeDueDate(this.state.dueDate);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    removeDueDate = () => {\r\n        this.props.changeDueDate(null);\r\n        this.props.toggleProperty('isDueDateEditShown');\r\n    }\r\n\r\n    render() {\r\n        const { toggleProperty } = this.props;\r\n        const { dueDate } = this.state;\r\n        return (\r\n            <div className=\"date-picker\">\r\n                <div className=\"date-picker-header flex align-center\">\r\n                    <p className=\"grow\">Change Due Date</p>\r\n                    <button onClick={() => { toggleProperty('isDueDateEditShown') }}>\r\n                        <Clear className=\"icon\" /></button>\r\n                </div>\r\n                <div className=\"date-picker-content flex column justify-center\">\r\n                    <DateTimePicker className=\"picker-input\"\r\n                        disablePast=\"true\"\r\n                        views={[\"date\", \"month\", \"hours\", \"minutes\"]}\r\n                        minDateMessage=\"\"\r\n                        value={dueDate} onChange={this.handleDateChange} />\r\n                    <div className=\"flex space-between\">\r\n                        <button onClick={this.removeDueDate}\r\n                            className=\"remove-btn\">Remove</button>\r\n                        <button onClick={this.handleSave} className=\"save-btn\">Save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport {\r\n    DeleteForeverOutlined, AccessTime,\r\n    PersonOutlineOutlined, LabelOutlined\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { DueDateEdit } from './DueDateEdit';\r\n\r\nexport class _CardMenu extends Component {\r\n\r\n    state = {\r\n        card: {\r\n            title: '',\r\n            dueDate: 0,\r\n            labels: [],\r\n            assignedTo: []\r\n        },\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        isDueDateEditShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideMenu);\r\n        this.titleInput.addEventListener(\"keypress\", this.submitOnEnter);\r\n        const { title, dueDate, labels, assignedTo } = this.props.card;\r\n        this.setState({ card: { title, dueDate, labels, assignedTo } });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideMenu);\r\n        this.titleInput.removeEventListener(\"keypress\", this.submitOnEnter);\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ card: { title: target.value } });\r\n    }\r\n\r\n    submitOnEnter(ev) {\r\n        // this allows Shift+Enter = new line, Enter = submit form\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            ev.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    hideMenu = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.toggleIsMenuShown();\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n    onDelete = () => {\r\n        const { id } = this.props.card;//getting the id and boardCopy\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //getting the phaseIdx to edit his cards\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards =\r\n            boardCopy.phaseLists[phaseIdx].cards.filter(card => card.id !== id);\r\n        //filtering out the deleted card\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    onChangeTitle = () => {\r\n        if (!this.state.card.title.trim()) return;\r\n        const { id } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const phaseIdx = this.getPhaseIdxByCardId(id);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards.filter(card => {\r\n            if (card.id !== id) return card;\r\n            else {\r\n                card.title = this.state.card.title;\r\n                return card;\r\n            }\r\n        });\r\n        this.props.updateBoard(boardCopy);\r\n        this.props.toggleIsMenuShown();//Closing the menu\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    render() {\r\n        const { onDelete, handleChange, onChangeTitle, toggleProperty, changeDueDate } = this;\r\n        const { isLabelEditShown, card, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        const { title } = card;\r\n        return (\r\n            <section>\r\n                <div onMouseDown={this.props.toggleIsMenuShown} className=\"screen\"></div>\r\n                <section className=\"menu-container flex\">\r\n\r\n                    <form onSubmit={onChangeTitle} className=\"edit-card-form flex column\">\r\n                        <textarea onChange={handleChange} name=\"title\" value={title} cols=\"30\" rows=\"5\"\r\n                            ref={el => this.titleInput = el} spellCheck=\"false\" autoComplete=\"off\" autoFocus />\r\n                        <button onClick={onChangeTitle} className=\"save-btn\">Save</button>\r\n                    </form>\r\n\r\n                    <div className=\"card-menu flex column\">\r\n                        <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"flex align-center\">\r\n                            <LabelOutlined className=\"icon\" />Edit Labels</button>\r\n                        {isLabelEditShown &&\r\n                            <LabelsEdit card={this.props.card} toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isMembersEditShown') }} className=\"flex align-center\">\r\n                            <PersonOutlineOutlined className=\"icon\" />Change Members</button>\r\n                        {isMembersEditShown && <MembersEdit card={this.props.card}\r\n                            members={this.props.board.members}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                            className=\"flex align-center\">\r\n                            <AccessTime className=\"icon\" />Change Due Date</button>\r\n                        {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                            toggleProperty={toggleProperty} />}\r\n\r\n                        <button onClick={onDelete} className=\"flex align-center\">\r\n                            <DeleteForeverOutlined className=\"icon\" />Delete</button>\r\n                    </div>\r\n\r\n                </section>\r\n            </section >\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const CardMenu = connect(mapStateToProps, mapDispatchToProps)(_CardMenu)","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { CardLabels } from './CardLabels';\r\nimport { AttachmentOutlined, CheckBoxOutlined, CreateOutlined } from '@material-ui/icons';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\nimport { loadBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { DueBadge } from './DueBadge';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { CardMenu } from './CardMenu';\r\nimport { boardService } from '../services/boardService';\r\n\r\n\r\nclass _CardPreview extends React.Component {\r\n\r\n    state = {\r\n        isMenuShown: false\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.props.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    toggleIsMenuShown = (ev) => {\r\n        if (ev) {\r\n            ev.preventDefault();//This prevents context menu\r\n            ev.stopPropagation();//This prevents card from opening\r\n        }\r\n        this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    render() {\r\n        const { toggleIsMenuShown, state } = this;\r\n        const { isMenuShown } = state;\r\n        const { title, imgUrl, dueDate, checkList, assignedTo, attachments } = this.props.card;\r\n        const checklistDoneCount = checkList.filter(item => item.isDone).length;\r\n        const checklistBgc = checklistDoneCount === checkList.length ? '#61bd4f' : '';\r\n        const checklistColor = checklistBgc ? '#fff' : '';\r\n        const labels = this.getUpdatedLabels();\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {isMenuShown && <CardMenu card={this.props.card} toggleIsMenuShown={toggleIsMenuShown} />}\r\n\r\n                <Draggable draggableId={this.props.card.id} index={this.props.index}>\r\n                    {(provided, snapshot) => (\r\n                        <NaturalDragAnimation style={provided.draggableProps.style} snapshot={snapshot}>\r\n                            {style => (\r\n                                <section onContextMenu={toggleIsMenuShown}\r\n                                    onClick={() => { this.props.setCard(this.props.card) }}\r\n                                    className=\"card-preview flex column\"\r\n                                    {...provided.draggableProps} {...provided.dragHandleProps}\r\n                                    ref={provided.innerRef} style={style}>\r\n\r\n                                    <button onClick={toggleIsMenuShown}\r\n                                        className=\"show-menu-btn\">\r\n                                        <CreateOutlined className=\"show-menu-icon\" />\r\n                                    </button>\r\n\r\n                                    {imgUrl && <div className=\"card-img\"><img alt=\"Card\" src={imgUrl} /></div>}\r\n                                    {labels && <CardLabels labels={labels} />}\r\n\r\n                                    <p>{title}</p>\r\n\r\n                                    <div className=\"card-badges flex wrap\">\r\n                                        {dueDate && <DueBadge dueDate={dueDate} />}\r\n\r\n                                        {attachments.length > 0 &&\r\n                                            <div className=\"attach-badge flex align-center\">\r\n                                                <AttachmentOutlined className=\"attach-icon\" />\r\n                                                <span>{attachments.length}</span>\r\n                                            </div>}\r\n\r\n                                        {checkList.length > 0 &&\r\n                                            <div style={{ backgroundColor: checklistBgc, color: checklistColor }}\r\n                                                className=\"checklist-badge flex align-center\">\r\n                                                <span><CheckBoxOutlined className=\"checklist-icon\" />\r\n                                                </span>\r\n                                                <span>{checklistDoneCount}/{checkList.length}</span>\r\n                                            </div>}\r\n                                    </div>\r\n                                    <div className=\"members-badge flex align-center\">\r\n                                        {assignedTo.length > 0 &&\r\n                                            assignedTo.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                                    </div>\r\n                                </section>\r\n                            )}\r\n                        </NaturalDragAnimation>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    setCard\r\n}\r\n\r\nexport const CardPreview = connect(mapStateToProps, mapDispatchToProps)(_CardPreview)","import React, { Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { MoreHoriz, Close, Add } from '@material-ui/icons';\r\nimport { AddCard } from './AddCard';\r\nimport { CardPreview } from './CardPreview';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard } from '../store/actions/boardActions';\r\nimport { boardService } from '../services/boardService';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nexport class _PhasePreview extends Component {\r\n\r\n    state = {\r\n        isInputShown: false,\r\n        isMenuShown: false,\r\n        isSortShown: false,\r\n        newPhaseName: '',\r\n        isAddCardShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ newPhaseName: this.props.phase.name })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) window.addEventListener('keydown', this.hideInput);\r\n        else window.removeEventListener('keydown', this.hideInput);\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        if (ev.code === 'Escape' || ev.type === 'onblur') {\r\n            this.setState({ isInputShown: false });\r\n            window.removeEventListener('keydown', this.hideInput);\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ newPhaseName: target.value })\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newPhaseName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phaseIdx = boardCopy.phaseLists.findIndex(phase => phase.id === id);\r\n        boardCopy.phaseLists[phaseIdx].name = this.state.newPhaseName;\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleInputShown();\r\n    }\r\n\r\n    toggleMenuShown = () => {\r\n        if (this.state.isSortShown) {\r\n            //making sure menu returns to default \"state\"\r\n            this.setState({ isMenuShown: false, isSortShown: false });\r\n        } else this.setState(prevState => ({ isMenuShown: !prevState.isMenuShown }));\r\n    }\r\n\r\n    showAddCard = () => {\r\n        this.setState({ isAddCardShown: true });\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    toggleAddCardShown = () => {\r\n        this.setState(prevState => ({ isAddCardShown: !prevState.isAddCardShown }));\r\n    }\r\n\r\n    toggleIsSortShown = () => {\r\n        this.setState(prevState => ({ isSortShown: !prevState.isSortShown }));\r\n    }\r\n\r\n    sortListBy = (sortBy) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const { id } = this.props.phase;\r\n        const phase = boardCopy.phaseLists.find(phase => phase.id === id);\r\n        const sortedPhase = boardService.getSortedPhase(sortBy, phase);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id ===\r\n            sortedPhase.id ? sortedPhase : phase);\r\n        this.props.updateBoard(boardCopy);\r\n        this.toggleIsSortShown();//to close the menu\r\n        this.toggleMenuShown();\r\n    }\r\n\r\n    onDeletePhase = () => {\r\n        this.toggleMenuShown();\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        boardCopy.phaseLists = boardCopy.phaseLists.filter(phase => phase.id !== this.props.phase.id);\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    render() {\r\n        const { name, id, cards } = this.props.phase;\r\n        const { newPhaseName, isInputShown, isMenuShown, isSortShown, isAddCardShown } = this.state;\r\n\r\n        return (\r\n            <Draggable draggableId={id} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <NaturalDragAnimation\r\n                        style={provided.draggableProps.style}\r\n                        snapshot={snapshot}\r\n                    >\r\n                        {style => (\r\n                            <article className=\"phase flex column\"\r\n                                {...provided.draggableProps}\r\n                                ref={provided.innerRef}\r\n                                {...snapshot.isDropAnimating = true} style={style}\r\n                            >\r\n                                <div {...provided.dragHandleProps} className=\"phase-header flex space-between\">\r\n\r\n                                    {!isInputShown && <h5 className=\"phase-title grow\"\r\n                                        onClick={this.toggleInputShown}>{name}</h5>}\r\n                                    {isInputShown && <form className=\"flex grow\" onSubmit={this.handleSubmit}>\r\n                                        <input className=\"phase-name-input grow\" type=\"text\" name=\"newPhaseName\"\r\n                                            value={newPhaseName} autoFocus autoComplete=\"off\" spellCheck=\"false\"\r\n                                            onBlur={this.toggleInputShown} onChange={this.handleChange} />\r\n                                    </form>}\r\n\r\n                                    <MoreHoriz className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                    {isMenuShown && <div className=\"phase-menu flex column\">\r\n                                        <div className=\"menu-header flex align-center\">\r\n\r\n                                            <h5 className=\"grow\">List Actions</h5>\r\n                                            <Close className=\"pointer\" onClick={this.toggleMenuShown} />\r\n                                        </div>\r\n                                        <div className=\"menu-btns flex column\">\r\n                                            <button onClick={this.showAddCard} >Add A Card</button>\r\n                                            <button onClick={this.toggleIsSortShown}>Sort By..</button>\r\n                                            {isSortShown && <div className=\"sort-options flex column\">\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('title')\r\n                                                }}>Title</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('firstCreated')\r\n                                                }}>First Created</button>\r\n                                                <button onClick={() => {\r\n                                                    this.sortListBy('lastCreated')\r\n                                                }}>Last Created</button>\r\n                                            </div>}\r\n                                            <button onClick={this.onDeletePhase}>Delete List</button>\r\n\r\n                                        </div>\r\n                                    </div>}\r\n                                </div>\r\n                                <Droppable droppableId={id}>\r\n                                    {(provided) => (\r\n                                        <div className=\"cards-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                            {cards.map((card, index) => <CardPreview key={card.id} card={card} index={index} />)}\r\n                                            {provided.placeholder}\r\n                                            <AddCard isAddCardShown={isAddCardShown} bottomCard={this.bottomCard}\r\n                                                toggleAddCardShown={this.toggleAddCardShown} phaseId={this.props.phase.id} />\r\n                                            <div style={{ opacity: 0 }} ref={el => this.bottomCard = el}></div>\r\n                                        </div>\r\n                                    )}\r\n                                </Droppable>\r\n                                {!isAddCardShown && <button onClick={this.toggleAddCardShown}\r\n                                    className=\"add-card-btn flex align-center\">\r\n                                    <Add className=\"add-icon\" fontSize=\"large\" />Add a card</button>}\r\n                            </article>\r\n                        )}\r\n                    </NaturalDragAnimation>\r\n                )}\r\n\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhasePreview = connect(mapStateToProps, mapDispatchToProps)(_PhasePreview)","import React, { Component } from 'react';\r\nimport { PhasePreview } from './PhasePreview';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { Add, Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport { updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\n\r\n\r\nexport class _PhaseList extends Component {\r\n    state = {\r\n        board: null,\r\n        isInputShown: false,\r\n        newListName: '',\r\n        phaseListToShow: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ board: this.props.board }, () => {\r\n\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ board: this.props.board, phaseListToShow });\r\n        }\r\n        if (JSON.stringify(prevProps.filteredByUser) !== JSON.stringify(this.props.filteredByUser)) {\r\n            const phaseListToShow = this.getFilteredPhaseLists(this.props.filteredByUser);\r\n            this.setState({ phaseListToShow })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeEventListeners();\r\n    }\r\n\r\n    getFilteredPhaseLists(searchedName) {\r\n        if (!searchedName) return this.props.board.phaseLists;\r\n        const cloneBoard = boardService.getBoardCopy(this.props.board);\r\n\r\n        cloneBoard.phaseLists.map(phase => {\r\n            return phase.cards = phase.cards.filter(card => {\r\n                return card.assignedTo.find(user => user.fullName.toLowerCase().includes(searchedName.trim().toLowerCase()))\r\n            })\r\n        })\r\n        return cloneBoard.phaseLists;\r\n    }\r\n\r\n    toggleInputShown = () => {\r\n        if (!this.state.isInputShown) this.addEventListeners();\r\n        else this.removeEventListeners();\r\n        this.setState(prevState => ({ isInputShown: !prevState.isInputShown }))\r\n    }\r\n\r\n    hideInput = (ev) => {\r\n        //To allow closing the input through Escape/click on something else\r\n        // Cannot use 'onBlur', in order to allow adding lists in a row(Try at trello)\r\n        if ((ev.code === 'Escape' || ev.target !== this.listNameInput)\r\n            && ev.target !== this.submitBtn) {\r\n            this.setState({ isInputShown: false });\r\n            this.removeEventListeners();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState(prevState => ({ ...prevState, newListName: target.value }));\r\n    }\r\n\r\n    addEventListeners = () => {\r\n        window.addEventListener('keydown', this.hideInput);\r\n        window.addEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    removeEventListeners = () => {\r\n        window.removeEventListener('keydown', this.hideInput);\r\n        window.removeEventListener('mousedown', this.hideInput);\r\n    }\r\n\r\n    onAddPhase = async (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.newListName.trim()) return;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const newPhase = boardService.getNewPhase(this.state.newListName);\r\n        boardCopy.phaseLists.push(newPhase);\r\n        await this.props.updateBoard(boardCopy);\r\n        this.setState({ newListName: '' }, () => {\r\n            this.listForm.scrollIntoView({ inline: 'end', behavior: 'smooth' });\r\n        });\r\n    }\r\n\r\n    onDragEnd = result => {\r\n\r\n        const { destination, source, type } = result;\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        if (type === 'PhasePreview') {\r\n\r\n            const newPhasesOrder = boardCopy.phaseLists;\r\n            const movingPhase = newPhasesOrder.splice(source.index, 1)[0];\r\n            newPhasesOrder.splice(destination.index, 0, movingPhase);\r\n\r\n        } else {\r\n            const { phaseLists } = boardCopy;\r\n            const srcPhase = phaseLists.find(phase => phase.id === source.droppableId);\r\n            const dstPhase = phaseLists.find(phase => phase.id === destination.droppableId);\r\n\r\n\r\n            if (srcPhase.id === dstPhase.id) {\r\n                const movingCard = srcPhase.cards.splice(source.index, 1)[0];\r\n                srcPhase.cards.splice(destination.index, 0, movingCard);\r\n\r\n\r\n            } else {\r\n                const srcCards = srcPhase.cards;\r\n                const movingCard = srcCards.splice(source.index, 1)[0];\r\n                const dstCards = dstPhase.cards;\r\n                dstCards.splice(destination.index, 0, movingCard);\r\n                boardService.addActivity(boardCopy,\r\n                    LOGGED_IN_USER,\r\n                    OPERETIONS.UPDATE,\r\n                    TYPES.CARD, {\r\n                    id: movingCard.id,\r\n                    title: movingCard.title\r\n                },\r\n                    `moved card from ${srcPhase.name} to ${dstPhase.name} -Card:`);\r\n            }\r\n        }\r\n\r\n        this.props.updateBoard(boardCopy);\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.state.board || !this.state.phaseListToShow) return 'loading..'\r\n\r\n\r\n        const { toggleInputShown, onAddPhase, handleChange, hideInput } = this;\r\n        const { isInputShown, newListName, phaseListToShow } = this.state;\r\n\r\n        return (\r\n\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"PhasePreview\">\r\n                    {(provided, snapshot) => (\r\n                        <section className=\"phase-list flex\"  {...provided.droppableProps} ref={provided.innerRef} >\r\n                            {phaseListToShow && phaseListToShow.map((phase, index) => <PhasePreview key={phase.id} index={index}\r\n                                phase={phase} />)}\r\n\r\n                            {!isInputShown && <button className=\"add-list-btn flex align-center\"\r\n                                onClick={toggleInputShown}> <Add fontSize=\"small\" />Add new list</button>}\r\n\r\n                            {isInputShown && <form ref={el => this.listForm = el} className=\"add-list-form\"\r\n                                onSubmit={onAddPhase}>\r\n                                <input ref={el => this.listNameInput = el} type=\"text\" autoFocus spellCheck=\"false\"\r\n                                    name=\"newListName\" onChange={handleChange} required autoComplete=\"off\"\r\n                                    placeholder=\"Enter list title..\" value={newListName} />\r\n                                <div className=\"flex align-center\">\r\n                                    <button ref={el => this.submitBtn = el} className=\"submit-btn\"\r\n                                        type=\"submit\">Add List</button>\r\n                                    <Close className=\"cancel-btn pointer\" onClick={hideInput} />\r\n                                </div>\r\n                            </form>}\r\n                            {provided.placeholder}\r\n                        </section>\r\n\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const PhaseList = connect(mapStateToProps, mapDispatchToProps)(_PhaseList)","import React from 'react';\r\nimport moment from 'moment';\r\nimport { updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nclass _Activity extends React.Component {\r\n\r\n    dynamicActivity = (activity) => {\r\n\r\n        const { at, user, type, object, operation, desc } = activity;\r\n\r\n        var userElmemnt = null;\r\n        var elmentType = null;\r\n        if (desc) {\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            return (\r\n                <div className=\"activity flex\">\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${desc}`}</span>\r\n                        <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            if (!user) return <div style={{ \"display\": \"none\" }}>stam</div>\r\n\r\n            userElmemnt = <a className=\"activity-user\" href={`/user/${user._id}`} target=\"_blank\" rel=\"noopener noreferrer\">{user.fullName}</a>;\r\n\r\n            elmentType = <span onClick={this.OpenByObjectType} className=\"activity-object\" >{object.title}</span>;\r\n\r\n            return (\r\n\r\n                < div className=\"activity flex\" >\r\n                    <MemberInitials fullName={user.fullName} />\r\n                    <div className=\"activity-content flex column\">\r\n                        <span>{userElmemnt} {` ${operation} ${type}`} {elmentType}</span>\r\n                        <div className=\"activity-time\">{moment(at).fromNow()}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n    OpenByObjectType = () => {\r\n        const { type, object, } = this.props.activity;\r\n        // parent is menu and not card and type is card\r\n        if (type.toLowerCase() === 'card' && this.props.allowOpenCard) {\r\n            const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = object.id;\r\n            const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n            const card = currPhase.cards.find(card => card.id === cardId);\r\n            this.props.onCloseMenu(null);\r\n            this.props.setCard(card);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { activity } = this.props\r\n        return (\r\n            this.dynamicActivity(activity)\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Activity = connect(mapStateToProps, mapDispatchToProps)(_Activity)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { LOGGED_IN_USER, updateBoard } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { Activity } from './Activity';\r\nimport { ListOutlined } from '@material-ui/icons';\r\n\r\nclass _Activities extends React.Component {\r\n\r\n    state = {\r\n        txt: '',\r\n\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n    onEnterDown = (ev) => {\r\n        if (ev.which === 13 && !ev.shiftKey) {\r\n            this.handleSaveBoard();\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const card = this.props.card;\r\n        if (!this.state.txt.trim()) return;\r\n        boardService.addActivity(boardClone, LOGGED_IN_USER, OPERETIONS.ADD, TYPES.CARD, { id: card.id, title: card.title },\r\n            `commented \"${this.state.txt}\"`);\r\n        this.setState({ txt: '' });\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        const { activities, showCommentBox } = this.props;\r\n        const { txt } = this.state\r\n        return (\r\n\r\n            <div className=\"activity-container\">\r\n                <div className=\"activity-header flex align-center\">\r\n                    <ListOutlined className=\"activity-icon\" />\r\n                    <span className=\"activity-header-text\">Activity</span>\r\n                </div>\r\n\r\n                {showCommentBox &&\r\n                    <div className=\"flex column\">\r\n                        <div className=\"flex\">\r\n                            <MemberInitials fullName={LOGGED_IN_USER.fullName} />\r\n                            <input type=\"text\" className=\"comment-input\" ref={el => this.cardNameInput = el}\r\n                                placeholder=\"Write a comment...\" onChange={this.handleChange}\r\n                                spellCheck=\"false\"\r\n                                onBlur={this.handleSaveBoard} onKeyDown={this.onEnterDown} value={this.state.txt}></input>\r\n\r\n                        </div>\r\n                        {txt.length > 0 && <button onClick={this.handleSaveBoard} className=\"add-comment-btn\" type=\"submit\">Save</button>}\r\n                    </div>\r\n                }\r\n\r\n                {activities.map((activity, index) => {\r\n                    return <Activity allowOpenCard={!showCommentBox} onCloseMenu={this.props.onCloseMenu} key={index} activity={activity}>\r\n\r\n                    </Activity>\r\n                })}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const Activities = connect(mapStateToProps, mapDispatchToProps)(_Activities)","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons';\r\nimport { Activities } from '../Activities'\r\n\r\nexport class BoardMenu extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        const shownClass = !this.props.isMenuShown ? '' : 'shown';\r\n        const board = this.props.board;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"board-menu-header flex\">\r\n                    <div className=\"board-menu-header-content flex align-center grow\">\r\n                        <h3 className=\"menu-header-title\">Menu</h3>\r\n                        <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-content flex column\">\r\n                        <div className=\"board-menu-item flex align-center\" onClick={() => this.props.onToggleMenu('backgroundMenu')}>\r\n                            <div className=\"board-menu-icon\" style={boardBg}></div>\r\n                            <span className=\"board-menu-text\">Change Background</span>\r\n                        </div>\r\n                        <span className=\"board-menu-header-divider\"></span>\r\n                        <Activities onCloseMenu={this.props.onToggleMenu} activities={board.activities} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _ColorMenu extends Component {\r\n\r\n    changeBoardColor = (color) => {\r\n\r\n        if (!color) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.bgColor = color;\r\n        clonedBoard.imgUrl = null;\r\n        boardService.addActivity(clonedBoard, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background color`);\r\n        this.props.updateBoard(clonedBoard);\r\n\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Change Background</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 121, 191)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 121, 191)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(210, 144, 52)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(210, 144, 52)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(81, 152, 57)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(81, 152, 57)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(176, 70, 50)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(176, 70, 50)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(137, 96, 158)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(137, 96, 158)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(205, 90, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(205, 90, 145)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(75, 191, 107)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(75, 191, 107)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(0, 174, 204)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(0, 174, 204)\")} >\r\n                            </div>\r\n                            <div className='btn-color'\r\n                                style={{ \"backgroundColor\": \"rgb(131, 140, 145)\" }}\r\n                                onClick={() => this.changeBoardColor(\"rgb(131, 140, 145)\")} >\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const ColorMenu = connect(mapStateToProps, mapDispatchToProps)(_ColorMenu)\r\n","import React, { Component } from 'react'\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../../store/actions/boardActions'\r\nimport { boardService, OPERETIONS, TYPES } from '../../services/boardService';\r\nimport { unsplashService } from '../../services/unsplashService'\r\nimport { connect } from 'react-redux';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class _PhotoMenu extends Component {\r\n\r\n    state = {\r\n        imgs: null\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.imgs) {\r\n            unsplashService.getListPhotos()\r\n                .then(json => {\r\n                    const imgs = json.map(img => {\r\n                        return {\r\n                            thumbUrl: img.urls.thumb,\r\n                            regularUrl: img.urls.regular,\r\n                            fullUrl: img.urls.full,\r\n                            credit: `${img.user.links.html}?utm_source=Flowz&utm_medium=referral`,\r\n                            userName: `${img.user.name}`\r\n                        }\r\n                    })\r\n                    this.setState({ imgs }, () => {\r\n                    });\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    changeBoardImg = (img) => {\r\n\r\n        if (!img) return;\r\n        const clonedBoard = boardService.getBoardCopy(this.props.board);\r\n        clonedBoard.imgUrl = img;\r\n        clonedBoard.bgColor = null;\r\n        boardService.addActivity(clonedBoard, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.Board,\r\n            { id: clonedBoard._id, title: clonedBoard.name },\r\n            `change board background image`);\r\n        this.props.updateBoard(clonedBoard);\r\n    }\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        const { imgs } = this.state;\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content  flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"backgroundMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Photos by<a className=\"unsplash\"\r\n                                href=\"https://unsplash.com/?utm_source=Flowz&utm_medium=referral&utm_campaign=api-credit\" >Unsplash</a></h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between wrap\">\r\n                            {imgs && imgs.map((img, index) =>\r\n\r\n                                <div className='btn-photo flex column align-center flex-end '\r\n                                    style={{ \"backgroundImage\": `url(\"${img.thumbUrl}\")` }} key={index}\r\n                                    onClick={() => this.changeBoardImg(img.regularUrl)} >\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const PhotoMenu = connect(mapStateToProps, mapDispatchToProps)(_PhotoMenu)\r\n","import React, { Component } from 'react';\r\nimport { CloseOutlined } from '@material-ui/icons/';\r\nimport { ArrowBackIosOutlined } from '@material-ui/icons';\r\n\r\nexport class BackgroundMenu extends Component {\r\n\r\n    render() {\r\n        const shownClass = !this.props.isMenuShown ? 'display-none' : 'shown';\r\n        return (\r\n            <div className={`board-menu ${shownClass}`}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"board-menu-header\">\r\n                        <div className=\"board-menu-header-content flex justify-center\">\r\n                            <ArrowBackIosOutlined onClick={() => this.props.onToggleMenu(\"mainMenu\")} className=\"btn-header-menu\" />\r\n                            <h3 className=\"menu-header-title\">Colors</h3>\r\n                            <CloseOutlined onClick={() => this.props.onToggleMenu(null)} className=\"btn-header-menu\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board-menu-content\">\r\n                        <div className=\"flex space-between\">\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"photoMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/collage.jpg\")} alt=\"\" />\r\n                                <span>Photos</span>\r\n                            </div>\r\n                            <div className=\"bg-btn flex column align-center\" onClick={() => this.props.onToggleMenu(\"colorMenu\")}>\r\n                                <img className=\"bg-btn-img\" src={require(\"../../style/img/colors.jpg\")} alt=\"\" />\r\n                                <span>Colors</span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport NoteOutlinedIcon from '@material-ui/icons/NoteOutlined';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, setCard } from '../store/actions/boardActions';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nclass _CardHeader extends Component {\r\n    state = {\r\n        txt: '',\r\n        onPhase: '',\r\n        isTitleOnEdit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const cardId = this.props.card.id;\r\n        let currPhase = this.props.board.phaseLists.filter(phase =>\r\n            phase.cards.find(card => card.id === cardId));\r\n        this.setState({ txt: this.props.card.title, onPhase: currPhase[0].name })\r\n    }\r\n\r\n    toggleInput = () => {\r\n        this.setState(prevState => ({ isTitleOnEdit: !prevState.isTitleOnEdit }))\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        if (!this.state.txt.trim()) return this.toggleInput();\r\n        if (this.state.isTitleOnEdit) {\r\n            let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n            const cardId = this.props.card.id;\r\n            let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n            currPhase[0].cards.forEach(card => {\r\n                if (card.id === this.props.card.id) {\r\n                    card.title = this.state.txt;\r\n                }\r\n            })\r\n            this.props.updateBoard(boardClone)\r\n            this.toggleInput();\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    autoGrow = (el) => {\r\n        el.style.height = (el.scrollHeight) + \"px\";\r\n    }\r\n\r\n    backToboard = () => {\r\n        history.push(`/board/${this.props.board._id}`)\r\n    }\r\n\r\n    render() {\r\n        if (!this.state) return 'loading';\r\n        const { txt, isTitleOnEdit, onPhase } = this.state;\r\n\r\n        return (<div className=\"card-header\">\r\n            <div className=\"card-header-container flex align-center\">\r\n                <NoteOutlinedIcon className=\"icon\" />\r\n                {!isTitleOnEdit && <h3 onClick={this.toggleInput} className=\"card-title grow\">{txt}</h3>}\r\n                {isTitleOnEdit && <textarea ref={el => this.elTextarea = el} spellCheck=\"false\"\r\n                    onFocus={(ev) => { this.autoGrow(ev.target) }} onKeyDown={(e) => this.handleKeyPress(e)}\r\n                    className=\"card-title-input\" autoFocus\r\n                    onBlur={this.handleSaveBoard} placeholder=\"Title...\" autoCorrect=\"false\"\r\n                    onChange={this.handleChange} value={txt} />}\r\n            </div>\r\n            <button className=\"close-btn\" onClick={() => { this.props.setCard(null) }}>\r\n                <Clear className=\"close-icon\" /></button>\r\n            <p className=\"card-link\">in list <span\r\n                onClick={() => { this.props.setCard(null) }}>{onPhase}</span></p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\n\r\nexport const CardHeader = connect(mapStateToProps, mapDispatchToProps)(_CardHeader)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard } from '../store/actions/boardActions';\r\n\r\nclass _CardDesc extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ txt: this.props.card.desc })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n    }\r\n\r\n\r\n    handleSaveBoard = () => {\r\n        let boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        let currPhase = boardClone.phaseLists.filter(phase => phase.cards.find(card => card.id === cardId));\r\n\r\n        currPhase[0].cards.forEach(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.desc = this.state.txt;\r\n            }\r\n        })\r\n        this.props.updateBoard(boardClone);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div className=\"desc-header-container flex\">\r\n                    <DescriptionIcon className=\"icon\" />\r\n                    <span className=\"desc-header\">Description</span>\r\n                </div>\r\n                <textarea className=\"card-desc-input\"\r\n                    placeholder=\"Add a more detailed description...\" onChange={this.handleChange}\r\n                    spellCheck=\"false\"\r\n                    onBlur={this.handleSaveBoard} value={this.state.txt}></textarea>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\n\r\nexport const CardDesc = connect(mapStateToProps, mapDispatchToProps)(_CardDesc)\r\n\r\n\r\n","import React from 'react';\r\nimport { Clear } from '@material-ui/icons';\r\n\r\nexport function ChecklistItem(props) {\r\n    const { idx, todo, onDelete, handleChange, handleSaveBoard, handleKeyPress } = props;\r\n    return (\r\n        <div className=\"checklist-item flex align-center\" key={idx} >\r\n            <input className=\"checkbox\" type=\"checkbox\" name=\"isDone\"\r\n                onChange={(e) => { handleChange(e, idx) }}\r\n                onBlur={handleSaveBoard} checked={todo.isDone} />\r\n                \r\n            <input className=\"checklist-item-txt grow\" type=\"text\" name=\"txt\"\r\n                onChange={(e) => handleChange(e, idx)} spellCheck=\"false\"\r\n                onBlur={handleSaveBoard} value={todo.txt} onKeyDown={handleKeyPress} />\r\n            <button onClick={() => { onDelete(idx) }}><Clear className=\"icon\" /></button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { PlaylistAddCheck } from '@material-ui/icons';\r\nimport { ChecklistItem } from './ChecklistItem';\r\nimport { loadBoard, updateBoard, LOGGED_IN_USER } from '../store/actions/boardActions';\r\nimport { boardService, OPERETIONS, TYPES } from '../services/boardService'\r\n\r\nclass _CardChecklist extends Component {\r\n    state = {\r\n        checkList: null,\r\n        todoText: '',\r\n        onAdd: false,\r\n        progress: 0,\r\n        checklistTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let checklistTitle;\r\n        (this.props.card.checklistTitle ? checklistTitle = this.props.card.checklistTitle : checklistTitle = '')\r\n        this.setState({ checkList: this.props.card.checkList, onAdd: false, checklistTitle },\r\n            () => this.progressBarUpdate());\r\n    }\r\n\r\n    progressBarUpdate = () => {\r\n        const doneTodos = this.state.checkList.reduce((acc, currVal) => {\r\n            if (currVal.isDone) acc++\r\n            return acc\r\n        }, 0)\r\n        this.setState({ progress: Math.floor((doneTodos / this.state.checkList.length) * 100) });\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (!this.state.todoText) return\r\n\r\n        let newTodo = { txt: this.state.todoText, isDone: false }\r\n        let clone = this.state.checkList.slice();\r\n        clone.push(newTodo);\r\n        this.setState({ checkList: clone, todoText: '' }, () => {\r\n            this.handleSaveBoard();\r\n        });\r\n    }\r\n\r\n    handleSaveBoard = () => {\r\n        const boardClone = JSON.parse(JSON.stringify(this.props.board));\r\n        const cardId = this.props.card.id;\r\n        const currPhase = boardClone.phaseLists.find(phase => phase.cards.some(card => card.id === cardId));\r\n\r\n        const updatedCards = currPhase.cards.map(card => {\r\n            if (card.id === this.props.card.id) {\r\n                card.checkList = this.state.checkList;\r\n                card.checklistTitle = this.state.checklistTitle;\r\n            }\r\n            return card;\r\n        })\r\n        const phaseIndex = boardClone.phaseLists.findIndex(phase => phase.id === currPhase.id)\r\n        currPhase.cards = updatedCards;\r\n        boardClone.phaseLists[phaseIndex] = currPhase;\r\n        boardService.addActivity(boardClone, LOGGED_IN_USER, OPERETIONS.UPDATE, TYPES.CARD,\r\n            { id: this.props.card.id, title: this.props.card.title },\r\n            'update checklist on card');\r\n\r\n        this.props.updateBoard(boardClone)\r\n            .then(() => {\r\n                this.progressBarUpdate();\r\n            })\r\n    }\r\n\r\n\r\n    toggleAdd = () => {\r\n        if (this.state.todoText) this.addTodo();\r\n        this.setState(prevState => ({ onAdd: !prevState.onAdd }));\r\n    }\r\n\r\n\r\n    onDelete = (idx) => {\r\n        let clone = this.state.checkList.slice();\r\n        clone.splice(idx, 1);\r\n        const checklistTitle = this.state.checkList.length === 1 ? '' : this.state.checklistTitle;\r\n        this.setState({ checkList: clone, checklistTitle }, () => {\r\n            this.handleSaveBoard();\r\n        })\r\n    }\r\n\r\n    handleChange = ({ target }, idx = -1) => {\r\n        const field = target.name;\r\n        const value = (field === 'isDone') ? target.checked : target.value;\r\n        let cloneChkList = this.state.checkList.slice();\r\n        if (field === 'isDone') {\r\n            cloneChkList[idx].isDone = value;\r\n            this.setState({ checkList: cloneChkList }, () => {\r\n                this.handleSaveBoard();\r\n            });\r\n        }\r\n        else {\r\n            if (idx === -1)\r\n                (this.state.onAdd ? this.setState({ todoText: value }) : this.setState({ checklistTitle: value }))\r\n\r\n            else {\r\n\r\n                cloneChkList[idx].txt = value;\r\n            }\r\n        }\r\n        this.setState({ checkList: cloneChkList });\r\n    }\r\n\r\n    handleFocus = (ev) => ev.target.select();\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { todoText, onAdd, checklistTitle, progress } = this.state;\r\n        if (!this.state.checkList || !this.state.checkList.length) return null;\r\n        const progressBgc = this.state.progress === 100 ? '#61bd4f' : '#2196f3';\r\n\r\n        return (\r\n            <div className=\"card-check-list\">\r\n                <div className=\"checklist-title-container flex align-center\">\r\n                    <PlaylistAddCheck className=\"checklist-icon\" />\r\n                    <input className=\"checklist-title\" type=\"text\" name=\"txt\" placeholder=\"Checklist name...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} spellCheck=\"false\"\r\n                        onFocus={this.handleFocus} onBlur={this.handleSaveBoard}\r\n                        value={checklistTitle} /></div>\r\n                <div className=\"progress-bar-container\">\r\n                    <div className=\"progress-bar\"\r\n                        style={{ width: `${progress}%`, backgroundColor: progressBgc }}></div>\r\n                </div>\r\n                {this.state.checkList.map((todo, idx) => <ChecklistItem todo={todo} key={idx}\r\n                    onDelete={this.onDelete} handleChange={this.handleChange}\r\n                    handleSaveBoard={this.handleSaveBoard} idx={idx}\r\n                    handleKeyPress={this.handleKeyPress} />)}\r\n\r\n                {!onAdd && <button className=\"add-btn\" onClick={this.toggleAdd}>Add Todo</button>}\r\n                {onAdd && <div className=\"add-item flex align-center\">\r\n                    <input type=\"text\" onChange={this.handleChange}\r\n                        onKeyDown={this.handleKeyPress} autoFocus onBlur={this.toggleAdd} value={todoText} />\r\n                    <button className=\"save-checklist-item-btn\">Save</button>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard\r\n}\r\n\r\nexport const CardChecklist = connect(mapStateToProps, mapDispatchToProps)(_CardChecklist)\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\n\nasync function uploadImg({ target }) {\n    const CLOUD_NAME = 'marmelada';\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;\n\n    const formData = new FormData();\n    formData.append('file', target.files[0]);\n    formData.append('upload_preset', 'balulu');\n    try {\n        const res = await axios.post(UPLOAD_URL, formData);\n        return res.data.url\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React from 'react';\r\nimport { DeleteForeverOutlined } from '@material-ui/icons';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const CardImage = (props) => {\r\n    const { isImgLoading, imgUrl, title, removeImgUrl } = props;\r\n    return (\r\n        <React.Fragment>\r\n            {isImgLoading && <div className=\"loading-field flex column align-center\">\r\n                <Loader secondaryColor=\"#2196f3d9\" type=\"Circles\" color=\"#2196F3\"\r\n                    className=\"loader\" height={60} width={60} />\r\n                <p>Loading your image..</p>\r\n            </div>}\r\n            {\r\n                imgUrl && <React.Fragment>\r\n                    <img className=\"card-img\" src={imgUrl} alt={title} />\r\n                    <button className=\"remove-btn flex align-center\"\r\n                        title=\"Remove cover image\" onClick={removeImgUrl}>\r\n                        <DeleteForeverOutlined className=\"icon\" /></button>\r\n                </React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, setCard, updateBoard } from '../store/actions/boardActions';\r\nimport { CardHeader } from './CardHeader';\r\nimport { CardDesc } from './CardDesc';\r\nimport { CardChecklist } from './CardChecklist';\r\nimport { Activities } from '../cmps/Activities'\r\nimport {\r\n    PermIdentity, LabelOutlined, PlaylistAddCheck,\r\n    Schedule, Attachment, CropOriginal,\r\n} from '@material-ui/icons';\r\nimport { LabelsEdit } from './LabelsEdit';\r\nimport { MembersEdit } from './MembersEdit';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { boardService } from '../services/boardService';\r\nimport { DueDateEdit } from './DueDateEdit';\r\nimport moment from 'moment';\r\nimport { cloudinaryService } from '../services/cloudinaryService';\r\nimport { CardImage } from './CardImage';\r\n\r\n\r\nclass _Card extends Component {\r\n    state = {\r\n        card: null,\r\n        isLabelEditShown: false,\r\n        isMembersEditShown: false,\r\n        cardActivities: [],\r\n        isDueDateEditShown: false,\r\n        isImgLoading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.hideCard);\r\n        var card;\r\n        this.props.board.phaseLists.forEach(phase => {\r\n            const res = phase.cards.find(card => card.id === this.props.cardId);\r\n            if (res) card = res;\r\n        });\r\n        const cardActivities = this.getActivities(card.id);\r\n        this.setState({ card, cardActivities });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.hideCard);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (JSON.stringify(prevProps.board) !== JSON.stringify(this.props.board)) {\r\n            var card;\r\n            this.props.board.phaseLists.forEach(phase => {\r\n                const res = phase.cards.find(card => card.id === this.props.cardId);\r\n                if (res) card = res;\r\n            });\r\n            const cardActivities = this.getActivities(card.id);\r\n            this.setState({ card, cardActivities });\r\n        }\r\n    }\r\n\r\n    getUpdatedLabels = () => {\r\n        if (!this.props.board.labels.length) return [];\r\n        const { labels } = this.state.card;\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const updatedLabels = labels.reduce((acc, label) => {\r\n            const foundLabel = boardCopy.labels.find(boardLabel => boardLabel.id === label.id);\r\n            if (foundLabel) acc.push(foundLabel);\r\n            return acc;\r\n        }, [])\r\n        return updatedLabels;\r\n    }\r\n\r\n    hideCard = (ev) => {\r\n        const { isLabelEditShown, isMembersEditShown, isDueDateEditShown } = this.state;\r\n        if (ev.code === 'Escape' && !isLabelEditShown\r\n            && !isMembersEditShown && !isDueDateEditShown\r\n        ) this.props.setCard(null);\r\n    }\r\n\r\n\r\n    toggleProperty = property => {\r\n        this.setState(prevState => ({ [property]: !prevState[property] }));\r\n    }\r\n\r\n    getActivities = (cardId, limit = 10) => {\r\n        const cardActivities = this.props.board.activities.filter(activity => activity.object.id === cardId);\r\n        if (cardActivities.length > 10) return cardActivities.slice(0, limit);\r\n        return cardActivities\r\n\r\n\r\n    }\r\n\r\n    addCheckList = () => {\r\n        const cloneCard = JSON.parse(JSON.stringify(this.state.card));\r\n        if (!cloneCard.checkList.length) {\r\n            cloneCard.checkList.push({ txt: '', isDone: false });\r\n            this.setState({ card: cloneCard })\r\n        }\r\n    }\r\n\r\n    getPhaseIdxByCardId = (cardId) => {\r\n        return this.props.board.phaseLists.findIndex(phase =>\r\n            phase.cards.some(card => card.id === cardId))\r\n    }\r\n\r\n\r\n    removeMemberFromCard = (member) => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n\r\n        // Getting the access to the card members inside the board\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        const card = boardCopy.phaseLists[phaseIdx].cards[cardIdx];\r\n\r\n        //Removing the member from the card\r\n        card.assignedTo = card.assignedTo.filter(mmbr => mmbr._id !== member._id);\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx] = card;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    changeDueDate = newDate => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].dueDate = newDate;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    removeImgUrl = () => {\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].imgUrl = null;\r\n        this.props.updateBoard(boardCopy);\r\n    }\r\n\r\n    onUploadImg = async (ev) => {\r\n        this.setState({ isImgLoading: true });\r\n        const imgUrl = await cloudinaryService.uploadImg(ev);\r\n        const boardCopy = boardService.getBoardCopy(this.props.board);\r\n        const cardId = this.props.card.id;\r\n        const phaseIdx = this.getPhaseIdxByCardId(cardId);\r\n        const cardIdx = boardCopy.phaseLists[phaseIdx].cards.findIndex(card => card.id === cardId);\r\n        //Getting access to the card inside the board\r\n\r\n        boardCopy.phaseLists[phaseIdx].cards[cardIdx].imgUrl = imgUrl;\r\n        this.props.updateBoard(boardCopy);\r\n        this.setState({ isImgLoading: false });\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board || !this.state.card) return 'Loading';\r\n        const { card, isLabelEditShown, isMembersEditShown, cardActivities, isDueDateEditShown, isImgLoading } = this.state;\r\n        const { assignedTo, dueDate, imgUrl, title } = card;\r\n        const { toggleProperty, changeDueDate, removeImgUrl } = this;\r\n        const labels = this.getUpdatedLabels();\r\n\r\n        return (\r\n            <section>\r\n                <div onClick={() => { this.props.setCard(null) }} className=\"card-modal\" >\r\n                    <div onClick={(ev) => ev.stopPropagation()} className=\"card-container\" >\r\n                        <div className=\"card-img-container flex justify-center\">\r\n                            <CardImage isImgLoading={isImgLoading} imgUrl={imgUrl}\r\n                                title={title} removeImgUrl={removeImgUrl} />\r\n                        </div>\r\n                        < CardHeader card={card} />\r\n                        <div className=\"card-content flex\">\r\n                            <div className=\"card-details flex column grow\">\r\n                                {assignedTo.length > 0 && <div className=\"card-details-members\">\r\n                                    <h3>Members</h3>\r\n                                    <div className=\"flex align-center\">\r\n                                        {assignedTo.map((member) => <span key={member._id}\r\n                                            onClick={() => { this.removeMemberFromCard(member) }}>\r\n                                            <MemberInitials member={member} />\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {labels.length > 0 && <div className=\"card-details-labels\">\r\n                                    <h3>Labels</h3>\r\n                                    <div className=\"labels-gallery flex wrap align-center\">\r\n                                        {labels.map(label => <span title={label.txt} className=\"label\"\r\n                                            onClick={() => { toggleProperty('isLabelEditShown') }}\r\n                                            style={{ backgroundColor: label.color }}\r\n                                            key={label.id}> <span className=\"label-txt\">{label.txt}</span>\r\n                                        </span>)}\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {dueDate && <div className=\"card-details-date\">\r\n                                    <h3>Due Date</h3>\r\n                                    <div onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                        className=\"date flex align-center\">\r\n                                        <span className=\"date-str\">{`${moment(dueDate).format(\"MMM Do\")}\r\n                                     at ${moment(dueDate).format(\"HH:mm\")}`}</span>\r\n                                    </div>\r\n                                </div>}\r\n                                < CardDesc card={card} />\r\n                                {(card.checkList.length > 0) && < CardChecklist card={card} />}\r\n                                <Activities card={card} showCommentBox={true} activities={cardActivities} />\r\n                            </div>\r\n                            <div className=\"card-sidebar\">\r\n                                <button onClick={() => { toggleProperty('isMembersEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <PermIdentity className=\"icon\" /></span>Members</button>\r\n                                {isMembersEditShown &&\r\n                                    <MembersEdit members={this.props.board.members} card={card}\r\n                                        toggleProperty={toggleProperty} />}\r\n\r\n                                <button onClick={() => { toggleProperty('isLabelEditShown') }} className=\"card-sidebar-btn\">\r\n                                    <span ><LabelOutlined className=\"icon\" /></span>Labels</button>\r\n\r\n                                {isLabelEditShown &&\r\n                                    <LabelsEdit card={card} toggleProperty={toggleProperty} />}\r\n\r\n                                {(card.checkList.length < 1) && <button className=\"card-sidebar-btn\"\r\n                                    onClick={this.addCheckList}><span>\r\n                                        <PlaylistAddCheck className=\"icon\" /></span>Checklist</button>}\r\n\r\n                                <button onClick={() => { toggleProperty('isDueDateEditShown') }}\r\n                                    className=\"card-sidebar-btn\"><span>\r\n                                        <Schedule className=\"icon\" /></span>Due Date</button>\r\n                                {isDueDateEditShown && <DueDateEdit changeDueDate={changeDueDate}\r\n                                    toggleProperty={toggleProperty} />}\r\n\r\n                                <button className=\"card-sidebar-btn\"><span>\r\n                                    <Attachment className=\"icon\" /></span>Attachment</button>\r\n\r\n                                {!imgUrl && <React.Fragment>\r\n                                    <label htmlFor=\"imgUrl\" className=\"card-sidebar-btn pointer\"><span>\r\n                                        <CropOriginal className=\"icon\" /></span>Cover</label>\r\n                                    <input className=\"display-none\" type=\"file\" id=\"imgUrl\"\r\n                                        onChange={this.onUploadImg} />\r\n                                </React.Fragment>}\r\n                            </div>\r\n                        </div>\r\n                    </div></div>\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    setCard\r\n}\r\n\r\nexport const Card = connect(mapStateToProps, mapDispatchToProps)(_Card)","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport function BoardUserFilter(props) {\r\n\r\n    return (\r\n        <form >\r\n            <div className=\"search-input-container\">\r\n                <input className=\"board-filter-input\" placeholder=\"Filter by user...\" type=\"text\" list=\"users\" name=\"user\" onChange={(event) => props.onInputChanged(event.target.value)} /><SearchIcon className=\"search-icon\" />\r\n            </div>\r\n            {/* <datalist id=\"users\">\r\n                {props.users.map(user => <option value={user.fullName} key={user._id} />)}\r\n            </datalist> */}\r\n        </form>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { loadBoard } from '../store/actions/boardActions';\r\nimport { connect } from 'react-redux';\r\nimport { PhaseList } from '../cmps/PhaseList';\r\nimport { MemberInitials } from '../cmps/MemberInitials';\r\nimport { BoardMenu } from '../cmps/boardMenu/BoardMenu';\r\nimport { ColorMenu } from '../cmps/boardMenu/ColorMenu';\r\nimport { PhotoMenu } from '../cmps/boardMenu/PhotoMenu';\r\nimport { MenuOutlined, PieChartOutlined } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { BackgroundMenu } from '../cmps/boardMenu/BackgroundMenu';\r\nimport { Card } from '../cmps/Card';\r\nimport { BoardUserFilter } from '../cmps/BoardUserFilter'\r\nimport { socketService } from '../services/socketService';\r\n\r\n\r\nclass _Board extends Component {\r\n\r\n    state = {\r\n        boardMenus: {\r\n            currentOpend: null,\r\n            menusState: {\r\n                mainMenu: false,\r\n                backgroundMenu: false,\r\n                colorMenu: false,\r\n                photoMenu: false\r\n            }\r\n        },\r\n        filteredByUser: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n        this.openSocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socketService.off('open board socket');\r\n        socketService.terminate();\r\n    }\r\n\r\n    openSocket = () => {\r\n        socketService.setup();\r\n        const id = this.props.match.params.id;\r\n        socketService.emit('open board socket', id);\r\n        socketService.on('board updated', () => {\r\n            this.getBoardById();\r\n        });\r\n    }\r\n\r\n\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    toggleMenu = (menuName) => {\r\n        const { boardMenus } = this.state;\r\n        const clonedMenus = JSON.parse(JSON.stringify(boardMenus));\r\n        //close open menu if their is\r\n        if (!menuName) { //menuName===null mean no menu should be open\r\n            clonedMenus.menusState[clonedMenus.currentOpend] = false;\r\n            clonedMenus.currentOpend = null;\r\n        } else {\r\n            if (clonedMenus.currentOpend != null)\r\n                clonedMenus.menusState[clonedMenus.currentOpend] = !clonedMenus.menusState[clonedMenus.currentOpend];\r\n            //open menu new menu\r\n            clonedMenus.menusState[menuName] = !clonedMenus.menusState[menuName];\r\n            //set currentOpend \r\n            clonedMenus.currentOpend = menuName;\r\n        }\r\n        this.setState({ boardMenus: clonedMenus }, () => {\r\n            if (this.state.boardMenus.currentOpend) window.addEventListener('keydown', this.handleKeyDown);\r\n            else window.removeEventListener('keydown', this.handleKeyDown)\r\n        });\r\n    }\r\n\r\n    handleKeyDown = (ev) => {\r\n        if (ev.code === 'Escape') this.toggleMenu(null);\r\n    }\r\n    onInputChanged = async (name) => {\r\n        await this.setState({ filteredByUser: name })\r\n    }\r\n\r\n    render() {\r\n        const { filteredByUser } = this.state;\r\n        const { board } = this.props;\r\n        if ((!board) || (!this.state)) return '';\r\n\r\n        const { mainMenu, backgroundMenu, colorMenu, photoMenu } = this.state.boardMenus.menusState;\r\n        const boardBg = board.bgColor ? { \"backgroundColor\": board.bgColor } :\r\n            { \"backgroundImage\": `url(\"${board.imgUrl}\")`, \"backgroundSize\": \"cover\" }\r\n\r\n        return (\r\n            (!board) ? 'loading' : <main style={boardBg} className=\"board flex column grow\">\r\n                <section className=\"board-nav flex space-between\">\r\n                    <div className=\"flex\">\r\n                        <div className=\"board-title\" href=\"#\">\r\n                            <span dir=\"auto\">{board.name}</span>\r\n                        </div>\r\n                        <span className=\"board-nav-divider\"></span>\r\n                        <div className=\"board-members flex align-center\">\r\n                            {board.members && board.members.map((member) => <MemberInitials key={member._id} member={member} />)}\r\n                        </div>\r\n                        <BoardUserFilter users={board.members} onInputChanged={this.onInputChanged} />\r\n                        <Link to={`/board/${board._id}/dashboard`}>\r\n                            <div className=\"nav-btn  flex align-center\">\r\n                                <PieChartOutlined className=\"nav-icon\" />\r\n                                <span className=\"btn-text\">Statistics</span>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"nav-btn flex align-center\" onClick={() => this.toggleMenu(\"mainMenu\")}>\r\n                        <MenuOutlined />\r\n                    </div>\r\n                    <BoardMenu isMenuShown={mainMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <BackgroundMenu isMenuShown={backgroundMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <ColorMenu isMenuShown={colorMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                    <PhotoMenu isMenuShown={photoMenu} board={board} onToggleMenu={this.toggleMenu} />\r\n                </section>\r\n                <section className=\"board-content flex grow\">\r\n                    <PhaseList filteredByUser={filteredByUser} />\r\n                </section>\r\n                {this.props.card && <Card cardId={this.props.card.id} />}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        card: state.trelloApp.card\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nclass _Home extends Component {\r\n    render() {\r\n        return (\r\n            <main className=\"home-container\">\r\n                <div className=\"text-area flex column align-start\">\r\n                    <h1>Don't Waste Papers</h1>\r\n                    <h3><span>Flowz</span> the project managment software that keep teams going and Collaborate</h3>\r\n\r\n                    <Link to=\"/board/5ecbc8edcb39d7f5494f8d40\"> <span className=\"btn-home\">Get Started</span></Link>\r\n                </div>\r\n\r\n\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(_Home);\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport function SignIn() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n        </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n          </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n              </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\n","import { httpService } from './httpService'\r\nexport const OPERETIONS = {\r\n    ADD: 'Add',\r\n    UPDATE: 'Updated',\r\n    DELETE: 'Delete'\r\n}\r\nexport const TYPES = {\r\n    User: 'User'\r\n}\r\n\r\n\r\nasync function query(filter) {\r\n    var queryString = '';\r\n    // if (filter) {\r\n    //     if (filter.inStock !== '') queryString = `?inStock=${filter.inStock}`;\r\n    //     if (filter.type !== '') (queryString === '') ? queryString = `?type=${filter.type}` : queryString += `&type=${filter.type}`;\r\n    //     if (filter.name !== '') (queryString === '') ? queryString = `?q=${filter.name}` : queryString += `&q=${filter.name}`;\r\n    // }\r\n    const users = await httpService.get(`user/${queryString}`);\r\n    return users;\r\n}\r\n\r\nasync function getById(id) {\r\n    const user = await httpService.get(`user/${id}`);\r\n    return user\r\n}\r\n\r\nasync function add(addeduser) {\r\n\r\n    const newUser = {\r\n        fullName: this.createfullName(addeduser.fName, addeduser.lName),\r\n        password: addeduser.password,\r\n        email: addeduser.email,\r\n        createdAt: Date.now()\r\n    }\r\n    const user = await httpService.post(`user`, newUser);\r\n    return user;\r\n}\r\n\r\nasync function update(updateuser) {\r\n    const user = await httpService.put('user', updateuser);\r\n    return user;\r\n}\r\n\r\nasync function remove(id) {\r\n    await httpService.delete(`user/${id}`);\r\n}\r\n\r\nfunction getUserCopy(user) {\r\n    return JSON.parse(JSON.stringify(user));\r\n}\r\n\r\n\r\nfunction createfullName(fName, lName) {\r\n\r\n    return (fName + ' ' + lName);\r\n}\r\n\r\n\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nexport const userService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    add,\r\n    update,\r\n    makeId,\r\n    getUserCopy,\r\n    createfullName\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addUser } from '../store/actions/userActions'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n\r\n\r\nclass _SignUp extends Component {\r\n    state = {\r\n        firstName: null,\r\n        lastName: null,\r\n        email: null,\r\n        password: null\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name;\r\n        const value = target.value;\r\n        this.setState(prevState => ({ ...prevState, [field]: value }), () => (console.log(this.state)));\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.addUser(this.state);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"sign-up-container\">\r\n                <form className=\"sign-up-form\" onsubmit={this.submitForm} noValidate>\r\n\r\n                    <TextField onChange={this.handleChange}\r\n                        className=\"signup-first-name\"\r\n                        autoComplete=\"fname\"\r\n                        name=\"firstName\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        autoFocus\r\n                    />\r\n\r\n                    <TextField onChange={this.handleChange}\r\n                        className=\"signup-last-name\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        autoComplete=\"lname\"\r\n                    />\r\n\r\n                    <TextField onChange={this.handleChange}\r\n                        className=\"signup-email\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n\r\n                    <TextField onChange={this.handleChange}\r\n                        className=\"signup-password\"\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n\r\n                    {/* <FormControlLabel\r\n                        className=\"signup-marketing-checkbox\"\r\n                        control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                        label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n                    /> */}\r\n\r\n                    <Button\r\n\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"sign-up-submit-btn\"\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n\r\n\r\n                </form>\r\n\r\n\r\n                {/* <a  className=\"sign-in-link\">\r\n                    Already have an account? Sign in\r\n                    </a> */}\r\n            </main >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.trelloUser.userReducer\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    addUser\r\n}\r\n\r\nexport const SignUp = connect(mapStateToProps, mapDispatchToProps)(_SignUp);\r\n","import { userService } from '../../services/userService'\r\nimport { socketService } from '../../services/socketService'\r\nexport const LOAD_USER = 'LOAD_USER';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\nexport const QUERY_USERS = 'QUERY_USERS'\r\nexport const CREATE_USER = 'CREATE_USER';\r\n\r\nexport const LOGGED_IN_USER = {\r\n    \"_id\": \"5eccd4e1cb39d7f54947fd7e\",\r\n    \"fullName\": \"Guest\",\r\n    \"email\": \"noemail@no.com\",\r\n    \"password\": \"123456\",\r\n    \"img\": \"https://img.icons8.com/plasticine/2x/user.png\"\r\n}\r\n\r\nexport function queryUsers(filter) {\r\n    return dispatch => {\r\n        userService.query(filter)\r\n            .then(users => dispatch({ type: QUERY_USERS, users }));\r\n    }\r\n}\r\n\r\nexport function loadUser(id) {\r\n    return async dispatch => {\r\n        const user = await userService.getById(id);\r\n        dispatch({ type: LOAD_USER, user });\r\n    }\r\n}\r\n\r\nexport function addUser(addedUser) {\r\n    return async dispatch => {\r\n        const user = await userService.add(addedUser);\r\n        dispatch({ type: ADD_USER, user })\r\n    }\r\n}\r\n\r\nexport function updateUser(updatedUser) {\r\n\r\n    return async (dispatch, state) => {\r\n        //const keepUser = userService.getUserCopy(state.user); not working right now the state.user is undifined; wierd!!!\r\n        dispatch({ type: UPDATE_USER, user: updatedUser });\r\n\r\n        try {\r\n            await userService.update(updatedUser);\r\n        } catch (err) {\r\n            // dispatch({ type: UPDATE_USER, user: keepUser });\r\n        }\r\n\r\n        socketService.emit('user updated', updatedUser._id);\r\n    }\r\n}\r\n\r\nexport function removeUser(userId) {\r\n    return dispatch => {\r\n        userService.remove(userId)\r\n            .then(() => dispatch({ type: REMOVE_USER, userId }));\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { boardService } from '../services/boardService'\r\nimport { HomeOutlined, DashboardOutlined, AccountTreeOutlined, Add, Close } from '@material-ui/icons';\r\nimport { MemberInitials } from './MemberInitials';\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, addBoard } from '../store/actions/boardActions';\r\nimport { LOGGED_IN_USER } from '../store/actions/boardActions'\r\n\r\nconst isLogin = true;\r\n\r\nclass _MainNav extends Component {\r\n\r\n\r\n    state = {\r\n        isCreateBoardMenuShown: false,\r\n        newBoardName: '',\r\n        newBoardColor: '#61acca'\r\n    }\r\n\r\n\r\n    handleChangeColor = async ({ target }) => {\r\n\r\n        const boardColor = target.value;\r\n        await this.setState({ newBoardColor: boardColor });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ newBoardName: value })\r\n    }\r\n\r\n    toggleAddBoard = () => {\r\n        this.setState(prevState => ({ isCreateBoardMenuShown: !prevState.isCreateBoardMenuShown }))\r\n    }\r\n\r\n    createNewBoard = async () => {\r\n        let boardName;\r\n        if (!this.state.newBoardName.trim()) boardName = 'New Board';\r\n        else boardName = this.state.newBoardName;\r\n        const newBoard = boardService.createNewBoard(boardName, this.state.newBoardColor, LOGGED_IN_USER);\r\n        await this.props.addBoard(newBoard);\r\n        history.push(`/board/${this.props.board._id}`)\r\n        this.setState({ isCreateBoardMenuShown: false, newBoardName: '' })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { isCreateBoardMenuShown, newBoardName, newBoardColor } = this.state\r\n        if (!this.state) return ''\r\n        return (\r\n            <header className=\"main-header flex space-between\">\r\n                <nav className=\"flex align-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"btn-main-nav\">\r\n                            <HomeOutlined className=\"btn-icon\" />\r\n                        </div>\r\n                    </Link>\r\n                    <Link to=\"/boards\">\r\n                        <div className=\"btn-main-nav flex align-center\">\r\n                            <DashboardOutlined className=\"btn-icon\" />\r\n                            <span className=\"btn-text\">Boards</span>\r\n                        </div>\r\n                    </Link>\r\n                </nav>\r\n\r\n                <div className=\"nav-center flex align-center justify-center\">\r\n                    <Link to=\"/\">\r\n                        <div className=\"logo flex align-center\">\r\n                            <AccountTreeOutlined className=\"btn-icon\" />\r\n                            <span className=\"logo-text\">Flowz</span>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <nav className=\"right-nav flex flex-end align-center\">\r\n                    <div className=\"btn-main-nav\" onClick={this.toggleAddBoard}>\r\n                        <Add className=\"btn-icon\" />\r\n                    </div>\r\n                    {isCreateBoardMenuShown && <div className=\"create-board-menu  flex column\">\r\n                        <div className=\"create-board-header flex align-center\">\r\n                            <h5 className=\"grow\">New Board</h5>\r\n                            <Close className=\"close-create-board-menu\" onClick={this.toggleAddBoard} />\r\n                        </div>\r\n                        <div className=\"create-board-btns flex column\">\r\n                            <div className=\"color-container\">\r\n                                {/* style=\"width:20px; height:20px; background-color:red;display:inline-block\" */}\r\n                                {/* style=\"display:none\" */}\r\n\r\n                                <label className={\"rgb(81, 152, 57)\" === newBoardColor ? \"color-preview green selected\" : \"color-preview green\"}  >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"green\" value=\"rgb(81, 152, 57)\" /></label>\r\n\r\n                                <label className={\"#d29034\" === newBoardColor ? \"color-preview orange selected\" : \"color-preview orange\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"orange\" value=\"#d29034\" /></label>\r\n\r\n                                <label className={\"rgb(0, 121, 191)\" === newBoardColor ? \"color-preview blue selected\" : \"color-preview blue\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"blue\" value=\"rgb(0, 121, 191)\" /></label>\r\n\r\n                                <label className={\"rgb(176, 70, 50)\" === newBoardColor ? \"color-preview red selected\" : \"color-preview red\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"red\" value=\"rgb(176, 70, 50)\" /></label>\r\n\r\n                                <label className={\"rgb(137, 96, 158)\" === newBoardColor ? \"color-preview purple selected\" : \"color-preview purple\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"purple\" value=\"rgb(137, 96, 158)\" /></label>\r\n\r\n                                <label className={\"rgb(205, 90, 145)\" === newBoardColor ? \"color-preview pink selected\" : \"color-preview pink\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"pink\" value=\"rgb(205, 90, 145)\" /></label>\r\n\r\n                                <label className={\"rgb(75, 191, 107)\" === newBoardColor ? \"color-preview light-green selected\" : \"color-preview light-green\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"light-green\" value=\"rgb(75, 191, 107)\" /></label>\r\n\r\n                                <label className={\"rgb(73, 169, 215)\" === newBoardColor ? \"color-preview turquise selected\" : \"color-preview turquise\"} >\r\n                                    <input onClick={this.handleChangeColor} className=\"color-preview-input\" type=\"radio\"\r\n                                        name=\"turquise\" value=\"rgb(73, 169, 215)\" /></label>\r\n\r\n\r\n                                {/* <div onClick={this.handleChangeColor} className=\"color-preview color-preview-green\">&nbsp;</div> */}\r\n\r\n\r\n                                {/* <div onClick={this.handleChangeColor} className=\"color-preview color-preview-orange\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-blue\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-red\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-purple\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-pink\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-light-green\">&nbsp;</div>\r\n                                <div onClick={this.handleChangeColor} className=\"color-preview color-preview-turquise\">&nbsp;</div> */}\r\n                            </div>\r\n                            <input className=\"board-name-input\" type=\"text\" onChange={this.handleChange} placeholder=\"Your Board's name...\" value={newBoardName} />\r\n                            <button className=\"create-board-btn\" onClick={this.createNewBoard} >Create a new Board</button>\r\n                        </div>\r\n                    </div>}\r\n                    {\r\n                        isLogin ? <span className=\"logged-in flex align-center\"><MemberInitials fullName=\"Or Levy\" /></span> :\r\n                            <div className=\"btn-main-nav\">\r\n                                <span className=\"btn-text\">Login</span>\r\n                            </div>\r\n                    }\r\n\r\n                </nav>\r\n            </header >\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    addBoard\r\n}\r\n\r\n\r\nexport const MainNav = connect(mapStateToProps, mapDispatchToProps)(_MainNav)\r\n\r\n","import React, { Component } from 'react'\r\nimport { history } from '../history'\r\nimport { connect } from 'react-redux';\r\nimport { loadBoard, updateBoard, queryBoards } from '../store/actions/boardActions';\r\n\r\nclass _Boards extends Component {\r\n    state = {\r\n        txt: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.queryBoards();\r\n    }\r\n\r\n\r\n    handleChange = ({ target }) => {\r\n        var value = target.value\r\n        this.setState({ txt: value })\r\n        this.autoGrow(this.elTextarea)\r\n    }\r\n\r\n\r\n    backToboard = () => {\r\n        history.push(`/board/${this.props.board._id}`)\r\n    }\r\n\r\n    handleLoadBoard = (id) => {\r\n        this.props.loadBoard(id)\r\n        history.push(`/board/${id}`)\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.state) return;\r\n        const { boards } = this.props\r\n        return (\r\n            <section>\r\n                <div className=\"boards-page\">\r\n                    <div className='boards flex column' >\r\n                        <h1 className=\"boards-title flex\">Boards</h1>\r\n                        <div className=\"boards-container\">\r\n                            {boards && boards.map((board, idx) =>\r\n                                <div className={`board-item board-item${idx}`} key={idx}\r\n                                    onClick={() => this.handleLoadBoard(board._id)}\r\n                                    style={board.imgUrl ?\r\n                                        { backgroundImage: `url(${board.imgUrl})`, backgroundSize: 'cover' } : { backgroundColor: board.bgColor }} >\r\n                                    {<h3>{board.name}</h3>}\r\n                                </div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board,\r\n        boards: state.trelloApp.boards\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard,\r\n    updateBoard,\r\n    queryBoards\r\n}\r\n\r\nexport const Boards = connect(mapStateToProps, mapDispatchToProps)(_Boards)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Doughnut, Bar, Pie } from 'react-chartjs-2';\r\nimport { connect } from 'react-redux';\r\nimport { history } from '../history'\r\nimport { loadBoard, } from '../store/actions/boardActions';\r\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\n\r\nconst bgColors =\r\n    [\r\n        '#273d5d',\r\n        '#006c95',\r\n        '#009da2',\r\n        '#00ca78',\r\n        '#a8eb12',\r\n        '#003f5c',\r\n        '#2d4f73',\r\n        '#4f608a',\r\n        '#72709e',\r\n        '#9580b0',\r\n        '#b991bf',\r\n        '#dda2cc',\r\n        '#ffb5d7',\r\n    ];\r\nconst hovColors =\r\n    [\r\n        '#FF6384A0',\r\n        '#36A2EBA0',\r\n        '#FFCE56A0',\r\n        '#e53935',\r\n        '#e57373',\r\n        '#6633FF',\r\n        '#FF00CC',\r\n        '#9900FF',\r\n        '#DAF7A6',\r\n        '#82b1ff',\r\n        '#1976d2',\r\n        '#e53935',\r\n        '#e57373',\r\n        '#6633FF',\r\n        '#FF00CC',\r\n    ];\r\n\r\n\r\nclass _Dashboard extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.getBoardById();\r\n\r\n\r\n    }\r\n    getBoardById = async () => {\r\n        const id = this.props.match.params.id;\r\n        await this.props.loadBoard(id);\r\n    }\r\n\r\n    getSprintProgress = () => {\r\n\r\n        const { board } = this.props;\r\n        var getSprintProgressMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.checkList.forEach(checkListItem => {\r\n                    if (checkListItem.isDone) {\r\n                        (!getSprintProgressMap[\"Completed\"]) ? getSprintProgressMap[\"Completed\"] = 1 : getSprintProgressMap[\"Completed\"] += 1;\r\n                    } else {\r\n                        (!getSprintProgressMap[\"In Progress\"]) ? getSprintProgressMap[\"In Progress\"] = 1 : getSprintProgressMap[\"In Progress\"] += 1;\r\n                    }\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(getSprintProgressMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Sprint Progress\",\r\n                data: [...Object.values(getSprintProgressMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTaskPerPhaseDistribution = () => {\r\n        const { board } = this.props;\r\n        var phaseTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n\r\n                (!phaseTaskMap[phase.name]) ? phaseTaskMap[phase.name] = 1 : phaseTaskMap[phase.name] += 1;\r\n\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n\r\n                ...Object.keys(phaseTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Task Per Phase Distribution\",\r\n                data: [...Object.values(phaseTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n    getTaskByLables = () => {\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.labels.forEach(label => {\r\n                    (!devTaskMap[label.txt]) ? devTaskMap[label.txt] = 1 : devTaskMap[label.txt] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Tasks by Labels\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n    }\r\n\r\n    getTasksPerDevloperData() {\r\n\r\n        const { board } = this.props;\r\n        var devTaskMap = {};\r\n        board.phaseLists.forEach(phase => {\r\n            phase.cards.forEach(card => {\r\n                card.assignedTo.forEach(member => {\r\n                    (!devTaskMap[member.fullName]) ? devTaskMap[member.fullName] = 1 : devTaskMap[member.fullName] += 1;\r\n                })\r\n            })\r\n        });\r\n\r\n        return {\r\n\r\n            labels: [\r\n                //the labels are the keys of the object map,E.g 'Educational, Funny..'\r\n                ...Object.keys(devTaskMap)\r\n            ],\r\n            datasets: [{\r\n                label: \"Task Per Devloper\",\r\n                data: [...Object.values(devTaskMap)],\r\n                backgroundColor: bgColors,\r\n                hoverBackgroundColor: hovColors\r\n\r\n            }]\r\n        };\r\n\r\n    }\r\n\r\n    goBack = () => {\r\n        history.push(`/board/${this.props.match.params.id}`);\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.board) return 'loading';\r\n        const tPerDevloper = this.getTasksPerDevloperData();\r\n        const taskPerPhaseDistribution = this.getTaskPerPhaseDistribution();\r\n        const tasksByLabels = this.getTaskByLables()\r\n        const sprintProgress = this.getSprintProgress();\r\n        return (\r\n\r\n            <div className=\"dashboard flex column align-center  justify-center \">\r\n                <div className=\"btn-back flex space-between align-center\" onClick={this.goBack} >\r\n                    <ArrowBackIosOutlinedIcon />\r\n                    <span>Back</span>\r\n                </div>\r\n                <section className=\"chart-cont flex column justify-center align-center\">\r\n                    <article className=\"chart sprint-progress flex justify-center column align-center\">\r\n                        <h2>Sprint Progress</h2>\r\n                        <Pie data={sprintProgress} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-per-devloper flex column justify-center align-center\">\r\n                        <h2>Task Per Devloper</h2>\r\n                        <Bar data={tPerDevloper} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                    <article className=\"chart tasks-per-phase flex column justify-center align-center\">\r\n                        <h2>Task Per Phase</h2>\r\n                        <Doughnut data={taskPerPhaseDistribution} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n\r\n                    <article className=\"chart tasks-by-lables flex column justify-center align-center\">\r\n                        <h2>Task By Labels</h2>\r\n                        <Bar data={tasksByLabels} options={{\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }} />\r\n                    </article>\r\n                </section>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.trelloApp.board\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadBoard\r\n}\r\n\r\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(_Dashboard)\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { history } from './history';\r\nimport { Board } from './pages/Board';\r\nimport { Home } from './pages/Home';\r\nimport { SignIn } from './pages/SignIn';\r\nimport { SignUp } from './pages/SignUp';\r\nimport { Card } from './cmps/Card';\r\nimport { MainNav } from './cmps/MainNav';\r\nimport { Boards } from './pages/Boards';\r\nimport { Dashboard } from './pages/Dashboard';\r\n\r\nexport function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router history={history}>\r\n        <MainNav />\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n          <Route path=\"/signin\" component={SignIn} exact />\r\n          <Route path=\"/signup\" component={SignUp} exact />\r\n          <Route path=\"/board/:boardId/card/:cardId\" component={Card} exact />\r\n          <Route path=\"/board/:id/dashboard\" component={Dashboard} />\r\n          <Route path=\"/boards\" component={Boards} exact />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_BOARD, QUERY_BOARDS, REMOVE_BOARD, ADD_BOARD, LOAD_BOARD } from '../actions/boardActions';\r\nimport { socketService } from '../../services/socketService';\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    boards: [],\r\n    board: null,\r\n    card: null\r\n}\r\n\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUERY_BOARDS:\r\n            return {\r\n                ...state,\r\n                boards: action.boards\r\n            }\r\n        case LOAD_BOARD:\r\n\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            };\r\n        case ADD_BOARD:\r\n            return {\r\n                ...state,\r\n                board: action.board\r\n            };\r\n        case UPDATE_BOARD:\r\n            socketService.emit('board updated', action.board._id)\r\n            return {\r\n                ...state,\r\n                board: { ...action.board }\r\n            }\r\n        case REMOVE_BOARD:\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(board => board._id !== action.boardId)\r\n            };\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                card: action.card\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\n","import { UPDATE_USER, QUERY_USERS, REMOVE_USER, ADD_USER, LOAD_USER } from '../actions/userActions';\r\nimport { socketService } from '../../services/socketService';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    user: null,\r\n    card: null\r\n}\r\n\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUERY_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case LOAD_USER:\r\n\r\n            return {\r\n                ...state,\r\n                user: { ...action.user }\r\n            };\r\n        case ADD_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            };\r\n        case UPDATE_USER:\r\n            socketService.emit('user updated', action.user._id)\r\n            return {\r\n                ...state,\r\n                user: { ...action.user }\r\n            }\r\n        case REMOVE_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(user => user._id !== action.userId)\r\n            };\r\n        case 'SET_CARD':\r\n            return {\r\n                ...state,\r\n                card: action.card\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { boardReducer } from './boardReducer'\r\nimport { userReducer } from './userReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    trelloApp: boardReducer,\r\n    trelloUser: userReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './style/global.scss';\nimport { App } from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}